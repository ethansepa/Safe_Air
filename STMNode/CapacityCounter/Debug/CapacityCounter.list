
CapacityCounter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008ce8  08008ce8  00018ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d48  08008d48  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008d48  08008d48  00018d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d50  08008d50  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d50  08008d50  00018d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d54  08008d54  00018d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000854  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008e4  200008e4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dfe6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dcd  00000000  00000000  0003e0a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  00041e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011e0  00000000  00000000  00043198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002442e  00000000  00000000  00044378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fa2  00000000  00000000  000687a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdc32  00000000  00000000  00082748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015037a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005414  00000000  00000000  001503d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008cd0 	.word	0x08008cd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008cd0 	.word	0x08008cd0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int capacity = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  int cycles = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fd63 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f90f 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fa35 	bl	80009fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000592:	f000 f975 	bl	8000880 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000596:	f000 f9a1 	bl	80008dc <MX_I2S3_Init>
  MX_SPI1_Init();
 800059a:	f000 f9cf 	bl	800093c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800059e:	f007 fc1f 	bl	8007de0 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 fa01 	bl	80009a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  enum capCount_state{NO_LIT, OUT_LIT, IN_LIT, BOTH_LIT};
  enum capCount_state st = NO_LIT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005aa:	f007 fc3f 	bl	8007e2c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    //GPIO pins
    int out_sensor = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 80005ae:	2101      	movs	r1, #1
 80005b0:	4879      	ldr	r0, [pc, #484]	; (8000798 <main+0x220>)
 80005b2:	f001 f891 	bl	80016d8 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	613b      	str	r3, [r7, #16]
    int in_sensor  = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2);
 80005ba:	2104      	movs	r1, #4
 80005bc:	4876      	ldr	r0, [pc, #472]	; (8000798 <main+0x220>)
 80005be:	f001 f88b 	bl	80016d8 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005cc:	4872      	ldr	r0, [pc, #456]	; (8000798 <main+0x220>)
 80005ce:	f001 f89b 	bl	8001708 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	486f      	ldr	r0, [pc, #444]	; (8000798 <main+0x220>)
 80005da:	f001 f895 	bl	8001708 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e4:	486c      	ldr	r0, [pc, #432]	; (8000798 <main+0x220>)
 80005e6:	f001 f88f 	bl	8001708 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f0:	4869      	ldr	r0, [pc, #420]	; (8000798 <main+0x220>)
 80005f2:	f001 f889 	bl	8001708 <HAL_GPIO_WritePin>

    // Capacity Counter
    switch (st) {
 80005f6:	7dfb      	ldrb	r3, [r7, #23]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	f200 8094 	bhi.w	8000726 <main+0x1ae>
 80005fe:	a201      	add	r2, pc, #4	; (adr r2, 8000604 <main+0x8c>)
 8000600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000604:	08000615 	.word	0x08000615
 8000608:	08000657 	.word	0x08000657
 800060c:	08000699 	.word	0x08000699
 8000610:	080006db 	.word	0x080006db
    	case NO_LIT:
    		if (out_sensor && !in_sensor) {
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d005      	beq.n	8000626 <main+0xae>
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d102      	bne.n	8000626 <main+0xae>
    			st = OUT_LIT;
 8000620:	2301      	movs	r3, #1
 8000622:	75fb      	strb	r3, [r7, #23]
 8000624:	e010      	b.n	8000648 <main+0xd0>
       		} else if (!out_sensor && in_sensor) {
 8000626:	693b      	ldr	r3, [r7, #16]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d105      	bne.n	8000638 <main+0xc0>
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <main+0xc0>
       			st = IN_LIT;
 8000632:	2302      	movs	r3, #2
 8000634:	75fb      	strb	r3, [r7, #23]
 8000636:	e007      	b.n	8000648 <main+0xd0>
       		} else if (out_sensor && in_sensor) {
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d004      	beq.n	8000648 <main+0xd0>
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <main+0xd0>
       			st = BOTH_LIT;
 8000644:	2303      	movs	r3, #3
 8000646:	75fb      	strb	r3, [r7, #23]
       		}
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064e:	4852      	ldr	r0, [pc, #328]	; (8000798 <main+0x220>)
 8000650:	f001 f85a 	bl	8001708 <HAL_GPIO_WritePin>
        	break;
 8000654:	e067      	b.n	8000726 <main+0x1ae>
    	case OUT_LIT:
    		if (!out_sensor && !in_sensor) {
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d105      	bne.n	8000668 <main+0xf0>
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d102      	bne.n	8000668 <main+0xf0>
    			st = NO_LIT;
 8000662:	2300      	movs	r3, #0
 8000664:	75fb      	strb	r3, [r7, #23]
 8000666:	e010      	b.n	800068a <main+0x112>
    		} else if (!out_sensor && in_sensor) {
 8000668:	693b      	ldr	r3, [r7, #16]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d105      	bne.n	800067a <main+0x102>
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <main+0x102>
    			st = IN_LIT;
 8000674:	2302      	movs	r3, #2
 8000676:	75fb      	strb	r3, [r7, #23]
 8000678:	e007      	b.n	800068a <main+0x112>
    		} else if (out_sensor && in_sensor) {
 800067a:	693b      	ldr	r3, [r7, #16]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d004      	beq.n	800068a <main+0x112>
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <main+0x112>
    			st = BOTH_LIT;
 8000686:	2303      	movs	r3, #3
 8000688:	75fb      	strb	r3, [r7, #23]
    		}
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	4841      	ldr	r0, [pc, #260]	; (8000798 <main+0x220>)
 8000692:	f001 f839 	bl	8001708 <HAL_GPIO_WritePin>
        	break;
 8000696:	e046      	b.n	8000726 <main+0x1ae>
    	case IN_LIT:
    		if (!out_sensor && !in_sensor) {
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d105      	bne.n	80006aa <main+0x132>
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <main+0x132>
    			st = NO_LIT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	75fb      	strb	r3, [r7, #23]
 80006a8:	e010      	b.n	80006cc <main+0x154>
    		} else if (out_sensor && !in_sensor) {
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d005      	beq.n	80006bc <main+0x144>
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d102      	bne.n	80006bc <main+0x144>
    			st = OUT_LIT;
 80006b6:	2301      	movs	r3, #1
 80006b8:	75fb      	strb	r3, [r7, #23]
 80006ba:	e007      	b.n	80006cc <main+0x154>
    		} else if (out_sensor && in_sensor) {
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d004      	beq.n	80006cc <main+0x154>
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <main+0x154>
    			st = BOTH_LIT;
 80006c8:	2303      	movs	r3, #3
 80006ca:	75fb      	strb	r3, [r7, #23]
    		}
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d2:	4831      	ldr	r0, [pc, #196]	; (8000798 <main+0x220>)
 80006d4:	f001 f818 	bl	8001708 <HAL_GPIO_WritePin>
    		break;
 80006d8:	e025      	b.n	8000726 <main+0x1ae>
    	case BOTH_LIT:
    		if (!out_sensor && !in_sensor) {
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d105      	bne.n	80006ec <main+0x174>
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d102      	bne.n	80006ec <main+0x174>
    			st = NO_LIT;
 80006e6:	2300      	movs	r3, #0
 80006e8:	75fb      	strb	r3, [r7, #23]
 80006ea:	e016      	b.n	800071a <main+0x1a2>
    		} else if (out_sensor && !in_sensor) {
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d008      	beq.n	8000704 <main+0x18c>
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d105      	bne.n	8000704 <main+0x18c>
    			st = OUT_LIT;
 80006f8:	2301      	movs	r3, #1
 80006fa:	75fb      	strb	r3, [r7, #23]
    			capacity -= 1;
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	3b01      	subs	r3, #1
 8000700:	61fb      	str	r3, [r7, #28]
 8000702:	e00a      	b.n	800071a <main+0x1a2>
    		} else if (!out_sensor && in_sensor) {
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d107      	bne.n	800071a <main+0x1a2>
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d004      	beq.n	800071a <main+0x1a2>
    			st = IN_LIT;
 8000710:	2302      	movs	r3, #2
 8000712:	75fb      	strb	r3, [r7, #23]
    			capacity += 1;
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	3301      	adds	r3, #1
 8000718:	61fb      	str	r3, [r7, #28]
    		}
    		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000720:	481d      	ldr	r0, [pc, #116]	; (8000798 <main+0x220>)
 8000722:	f000 fff1 	bl	8001708 <HAL_GPIO_WritePin>
    }

    // transmit data to raspi4
    //uint8_t data[] = {0, 1, 2, 3, 4, 5, 6, 7, 8};
    if (cycles == 10000) {
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	f242 7210 	movw	r2, #10000	; 0x2710
 800072c:	4293      	cmp	r3, r2
 800072e:	d12c      	bne.n	800078a <main+0x212>
		char buffer[] = "Hunter";
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <main+0x224>)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000738:	6018      	str	r0, [r3, #0]
 800073a:	3304      	adds	r3, #4
 800073c:	8019      	strh	r1, [r3, #0]
 800073e:	3302      	adds	r3, #2
 8000740:	0c0a      	lsrs	r2, r1, #16
 8000742:	701a      	strb	r2, [r3, #0]
		sprintf(buffer, "%ld", capacity);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	69fa      	ldr	r2, [r7, #28]
 8000748:	4915      	ldr	r1, [pc, #84]	; (80007a0 <main+0x228>)
 800074a:	4618      	mov	r0, r3
 800074c:	f007 ff4c 	bl	80085e8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *) buffer, strlen(buffer), 1000);
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff fd3c 	bl	80001d0 <strlen>
 8000758:	4603      	mov	r3, r0
 800075a:	b29a      	uxth	r2, r3
 800075c:	1d39      	adds	r1, r7, #4
 800075e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000762:	4810      	ldr	r0, [pc, #64]	; (80007a4 <main+0x22c>)
 8000764:	f004 f9c8 	bl	8004af8 <HAL_UART_Transmit>
		char newline[] = "\r\n";
 8000768:	4a0f      	ldr	r2, [pc, #60]	; (80007a8 <main+0x230>)
 800076a:	463b      	mov	r3, r7
 800076c:	6812      	ldr	r2, [r2, #0]
 800076e:	4611      	mov	r1, r2
 8000770:	8019      	strh	r1, [r3, #0]
 8000772:	3302      	adds	r3, #2
 8000774:	0c12      	lsrs	r2, r2, #16
 8000776:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 1000);
 8000778:	4639      	mov	r1, r7
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	2202      	movs	r2, #2
 8000780:	4808      	ldr	r0, [pc, #32]	; (80007a4 <main+0x22c>)
 8000782:	f004 f9b9 	bl	8004af8 <HAL_UART_Transmit>
		cycles = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
    }

    HAL_Delay(1);
 800078a:	2001      	movs	r0, #1
 800078c:	f000 fcd2 	bl	8001134 <HAL_Delay>
    cycles = cycles + 1;
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	3301      	adds	r3, #1
 8000794:	61bb      	str	r3, [r7, #24]
  {
 8000796:	e708      	b.n	80005aa <main+0x32>
 8000798:	40020c00 	.word	0x40020c00
 800079c:	08008cec 	.word	0x08008cec
 80007a0:	08008ce8 	.word	0x08008ce8
 80007a4:	20000168 	.word	0x20000168
 80007a8:	08008cf4 	.word	0x08008cf4

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f007 fe52 	bl	8008464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b28      	ldr	r3, [pc, #160]	; (8000878 <SystemClock_Config+0xcc>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a27      	ldr	r2, [pc, #156]	; (8000878 <SystemClock_Config+0xcc>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <SystemClock_Config+0xcc>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <SystemClock_Config+0xd0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a21      	ldr	r2, [pc, #132]	; (800087c <SystemClock_Config+0xd0>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <SystemClock_Config+0xd0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000816:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800081c:	2308      	movs	r3, #8
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000820:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000824:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000826:	2302      	movs	r3, #2
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800082a:	2307      	movs	r3, #7
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	4618      	mov	r0, r3
 8000834:	f003 fad6 	bl	8003de4 <HAL_RCC_OscConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800083e:	f000 f9db 	bl	8000bf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000842:	230f      	movs	r3, #15
 8000844:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	2302      	movs	r3, #2
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800084e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000852:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2105      	movs	r1, #5
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fd37 	bl	80042d4 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800086c:	f000 f9c4 	bl	8000bf8 <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3750      	adds	r7, #80	; 0x50
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000

08000880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2C1_Init+0x50>)
 8000886:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <MX_I2C1_Init+0x54>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2C1_Init+0x50>)
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MX_I2C1_Init+0x58>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_I2C1_Init+0x50>)
 800089e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_I2C1_Init+0x50>)
 80008be:	f002 fcad 	bl	800321c <HAL_I2C_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008c8:	f000 f996 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	200000bc 	.word	0x200000bc
 80008d4:	40005400 	.word	0x40005400
 80008d8:	000186a0 	.word	0x000186a0

080008dc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_I2S3_Init+0x54>)
 80008e2:	4a14      	ldr	r2, [pc, #80]	; (8000934 <MX_I2S3_Init+0x58>)
 80008e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_I2S3_Init+0x54>)
 80008e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <MX_I2S3_Init+0x54>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_I2S3_Init+0x54>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_I2S3_Init+0x54>)
 80008fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000900:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_I2S3_Init+0x54>)
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <MX_I2S3_Init+0x5c>)
 8000906:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_I2S3_Init+0x54>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_I2S3_Init+0x54>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_I2S3_Init+0x54>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_I2S3_Init+0x54>)
 800091c:	f002 fdc2 	bl	80034a4 <HAL_I2S_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000926:	f000 f967 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200001ac 	.word	0x200001ac
 8000934:	40003c00 	.word	0x40003c00
 8000938:	00017700 	.word	0x00017700

0800093c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_SPI1_Init+0x64>)
 8000942:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <MX_SPI1_Init+0x68>)
 8000944:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_SPI1_Init+0x64>)
 8000948:	f44f 7282 	mov.w	r2, #260	; 0x104
 800094c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_SPI1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_SPI1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_SPI1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_SPI1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_SPI1_Init+0x64>)
 8000968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_SPI1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_SPI1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_SPI1_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_SPI1_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_SPI1_Init+0x64>)
 8000988:	220a      	movs	r2, #10
 800098a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_SPI1_Init+0x64>)
 800098e:	f003 ffdd 	bl	800494c <HAL_SPI_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000998:	f000 f92e 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000110 	.word	0x20000110
 80009a4:	40013000 	.word	0x40013000

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART2_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f004 f83d 	bl	8004a5e <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f000 f905 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000168 	.word	0x20000168
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	4b72      	ldr	r3, [pc, #456]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a71      	ldr	r2, [pc, #452]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a1c:	f043 0310 	orr.w	r3, r3, #16
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b6f      	ldr	r3, [pc, #444]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0310 	and.w	r3, r3, #16
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	4b6b      	ldr	r3, [pc, #428]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a6a      	ldr	r2, [pc, #424]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b68      	ldr	r3, [pc, #416]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b64      	ldr	r3, [pc, #400]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a63      	ldr	r2, [pc, #396]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b61      	ldr	r3, [pc, #388]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b5d      	ldr	r3, [pc, #372]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a5c      	ldr	r2, [pc, #368]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b56      	ldr	r3, [pc, #344]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a55      	ldr	r2, [pc, #340]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b53      	ldr	r3, [pc, #332]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b4f      	ldr	r3, [pc, #316]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a4e      	ldr	r2, [pc, #312]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b4c      	ldr	r3, [pc, #304]	; (8000be0 <MX_GPIO_Init+0x1e4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2108      	movs	r1, #8
 8000abe:	4849      	ldr	r0, [pc, #292]	; (8000be4 <MX_GPIO_Init+0x1e8>)
 8000ac0:	f000 fe22 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4847      	ldr	r0, [pc, #284]	; (8000be8 <MX_GPIO_Init+0x1ec>)
 8000aca:	f000 fe1d 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ad4:	4845      	ldr	r0, [pc, #276]	; (8000bec <MX_GPIO_Init+0x1f0>)
 8000ad6:	f000 fe17 	bl	8001708 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ada:	2308      	movs	r3, #8
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	483c      	ldr	r0, [pc, #240]	; (8000be4 <MX_GPIO_Init+0x1e8>)
 8000af2:	f000 fc55 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4836      	ldr	r0, [pc, #216]	; (8000be8 <MX_GPIO_Init+0x1ec>)
 8000b0e:	f000 fc47 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b12:	2308      	movs	r3, #8
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b22:	2305      	movs	r3, #5
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	482e      	ldr	r0, [pc, #184]	; (8000be8 <MX_GPIO_Init+0x1ec>)
 8000b2e:	f000 fc37 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b36:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	482a      	ldr	r0, [pc, #168]	; (8000bf0 <MX_GPIO_Init+0x1f4>)
 8000b48:	f000 fc2a 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4825      	ldr	r0, [pc, #148]	; (8000bf4 <MX_GPIO_Init+0x1f8>)
 8000b60:	f000 fc1e 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b76:	2305      	movs	r3, #5
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 031c 	add.w	r3, r7, #28
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <MX_GPIO_Init+0x1f8>)
 8000b82:	f000 fc0d 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b86:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b8a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4813      	ldr	r0, [pc, #76]	; (8000bec <MX_GPIO_Init+0x1f0>)
 8000ba0:	f000 fbfe 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_GPIO_Init+0x1f0>)
 8000bb8:	f000 fbf2 	bl	80013a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bc0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_GPIO_Init+0x1e8>)
 8000bd2:	f000 fbe5 	bl	80013a0 <HAL_GPIO_Init>

}
 8000bd6:	bf00      	nop
 8000bd8:	3730      	adds	r7, #48	; 0x30
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020c00 	.word	0x40020c00
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020400 	.word	0x40020400

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c42:	2007      	movs	r0, #7
 8000c44:	f000 fb6a 	bl	800131c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	; (8000cd8 <HAL_I2C_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12c      	bne.n	8000cd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c98:	2312      	movs	r3, #18
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <HAL_I2C_MspInit+0x8c>)
 8000cb0:	f000 fb76 	bl	80013a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3728      	adds	r7, #40	; 0x28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a31      	ldr	r2, [pc, #196]	; (8000dd4 <HAL_I2S_MspInit+0xf0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d15a      	bne.n	8000dca <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d14:	2301      	movs	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d18:	23c0      	movs	r3, #192	; 0xc0
 8000d1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fcd1 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d30:	f7ff ff62 	bl	8000bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <HAL_I2S_MspInit+0xf4>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <HAL_I2S_MspInit+0xf4>)
 8000d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d42:	6413      	str	r3, [r2, #64]	; 0x40
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <HAL_I2S_MspInit+0xf4>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <HAL_I2S_MspInit+0xf4>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a1f      	ldr	r2, [pc, #124]	; (8000dd8 <HAL_I2S_MspInit+0xf4>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <HAL_I2S_MspInit+0xf4>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <HAL_I2S_MspInit+0xf4>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <HAL_I2S_MspInit+0xf4>)
 8000d76:	f043 0304 	orr.w	r3, r3, #4
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_I2S_MspInit+0xf4>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d88:	2310      	movs	r3, #16
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d98:	2306      	movs	r3, #6
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <HAL_I2S_MspInit+0xf8>)
 8000da4:	f000 fafc 	bl	80013a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000da8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dba:	2306      	movs	r3, #6
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <HAL_I2S_MspInit+0xfc>)
 8000dc6:	f000 faeb 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3738      	adds	r7, #56	; 0x38
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40003c00 	.word	0x40003c00
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000
 8000de0:	40020800 	.word	0x40020800

08000de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_SPI_MspInit+0x84>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d12b      	bne.n	8000e5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_SPI_MspInit+0x88>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e3e:	23e0      	movs	r3, #224	; 0xe0
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e4e:	2305      	movs	r3, #5
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_SPI_MspInit+0x8c>)
 8000e5a:	f000 faa1 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3728      	adds	r7, #40	; 0x28
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40013000 	.word	0x40013000
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000

08000e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <HAL_UART_MspInit+0x84>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d12b      	bne.n	8000eee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_UART_MspInit+0x88>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a17      	ldr	r2, [pc, #92]	; (8000efc <HAL_UART_MspInit+0x88>)
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_UART_MspInit+0x88>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_UART_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a10      	ldr	r2, [pc, #64]	; (8000efc <HAL_UART_MspInit+0x88>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_UART_MspInit+0x88>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ece:	230c      	movs	r3, #12
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ede:	2307      	movs	r3, #7
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <HAL_UART_MspInit+0x8c>)
 8000eea:	f000 fa59 	bl	80013a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40004400 	.word	0x40004400
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020000 	.word	0x40020000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f50:	f000 f8d0 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <OTG_FS_IRQHandler+0x10>)
 8000f5e:	f000 fe57 	bl	8001c10 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200005d0 	.word	0x200005d0

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f007 fa28 	bl	80083f0 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20020000 	.word	0x20020000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	200000ac 	.word	0x200000ac
 8000fd4:	200008e8 	.word	0x200008e8

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f007 f9e7 	bl	80083fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff faa3 	bl	8000578 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001040:	08008d58 	.word	0x08008d58
  ldr r2, =_sbss
 8001044:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001048:	200008e4 	.word	0x200008e4

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f94f 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fdbe 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f967 	bl	8001386 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f92f 	bl	8001332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	200001f4 	.word	0x200001f4

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	200001f4 	.word	0x200001f4

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff3e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff31 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e16b      	b.n	8001694 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013bc:	2201      	movs	r2, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 815a 	bne.w	800168e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d130      	bne.n	8001454 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	2203      	movs	r2, #3
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001428:	2201      	movs	r2, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	091b      	lsrs	r3, r3, #4
 800143e:	f003 0201 	and.w	r2, r3, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b03      	cmp	r3, #3
 800145e:	d017      	beq.n	8001490 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d123      	bne.n	80014e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	69b9      	ldr	r1, [r7, #24]
 80014e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	2203      	movs	r2, #3
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 0203 	and.w	r2, r3, #3
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 80b4 	beq.w	800168e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b60      	ldr	r3, [pc, #384]	; (80016ac <HAL_GPIO_Init+0x30c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a5f      	ldr	r2, [pc, #380]	; (80016ac <HAL_GPIO_Init+0x30c>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b5d      	ldr	r3, [pc, #372]	; (80016ac <HAL_GPIO_Init+0x30c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001542:	4a5b      	ldr	r2, [pc, #364]	; (80016b0 <HAL_GPIO_Init+0x310>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a52      	ldr	r2, [pc, #328]	; (80016b4 <HAL_GPIO_Init+0x314>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d02b      	beq.n	80015c6 <HAL_GPIO_Init+0x226>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a51      	ldr	r2, [pc, #324]	; (80016b8 <HAL_GPIO_Init+0x318>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d025      	beq.n	80015c2 <HAL_GPIO_Init+0x222>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a50      	ldr	r2, [pc, #320]	; (80016bc <HAL_GPIO_Init+0x31c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01f      	beq.n	80015be <HAL_GPIO_Init+0x21e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4f      	ldr	r2, [pc, #316]	; (80016c0 <HAL_GPIO_Init+0x320>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d019      	beq.n	80015ba <HAL_GPIO_Init+0x21a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4e      	ldr	r2, [pc, #312]	; (80016c4 <HAL_GPIO_Init+0x324>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0x216>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4d      	ldr	r2, [pc, #308]	; (80016c8 <HAL_GPIO_Init+0x328>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d00d      	beq.n	80015b2 <HAL_GPIO_Init+0x212>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4c      	ldr	r2, [pc, #304]	; (80016cc <HAL_GPIO_Init+0x32c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d007      	beq.n	80015ae <HAL_GPIO_Init+0x20e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4b      	ldr	r2, [pc, #300]	; (80016d0 <HAL_GPIO_Init+0x330>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_GPIO_Init+0x20a>
 80015a6:	2307      	movs	r3, #7
 80015a8:	e00e      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015aa:	2308      	movs	r3, #8
 80015ac:	e00c      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015ae:	2306      	movs	r3, #6
 80015b0:	e00a      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015b2:	2305      	movs	r3, #5
 80015b4:	e008      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e004      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015be:	2302      	movs	r3, #2
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x228>
 80015c6:	2300      	movs	r3, #0
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f002 0203 	and.w	r2, r2, #3
 80015ce:	0092      	lsls	r2, r2, #2
 80015d0:	4093      	lsls	r3, r2
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d8:	4935      	ldr	r1, [pc, #212]	; (80016b0 <HAL_GPIO_Init+0x310>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e6:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <HAL_GPIO_Init+0x334>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800160a:	4a32      	ldr	r2, [pc, #200]	; (80016d4 <HAL_GPIO_Init+0x334>)
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <HAL_GPIO_Init+0x334>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <HAL_GPIO_Init+0x334>)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_GPIO_Init+0x334>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_GPIO_Init+0x334>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_GPIO_Init+0x334>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <HAL_GPIO_Init+0x334>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3301      	adds	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b0f      	cmp	r3, #15
 8001698:	f67f ae90 	bls.w	80013bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40013800 	.word	0x40013800
 80016b4:	40020000 	.word	0x40020000
 80016b8:	40020400 	.word	0x40020400
 80016bc:	40020800 	.word	0x40020800
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40021400 	.word	0x40021400
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40021c00 	.word	0x40021c00
 80016d4:	40013c00 	.word	0x40013c00

080016d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016f0:	2301      	movs	r3, #1
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	e001      	b.n	80016fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001724:	e003      	b.n	800172e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	041a      	lsls	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	619a      	str	r2, [r3, #24]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800173a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173c:	b08f      	sub	sp, #60	; 0x3c
 800173e:	af0a      	add	r7, sp, #40	; 0x28
 8001740:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e054      	b.n	80017f6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f006 fb98 	bl	8007e9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2203      	movs	r2, #3
 8001770:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fcee 	bl	800516c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	687e      	ldr	r6, [r7, #4]
 8001798:	466d      	mov	r5, sp
 800179a:	f106 0410 	add.w	r4, r6, #16
 800179e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80017ae:	1d33      	adds	r3, r6, #4
 80017b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b2:	6838      	ldr	r0, [r7, #0]
 80017b4:	f003 fc68 	bl	8005088 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 fce5 	bl	800518e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	687e      	ldr	r6, [r7, #4]
 80017cc:	466d      	mov	r5, sp
 80017ce:	f106 0410 	add.w	r4, r6, #16
 80017d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017de:	e885 0003 	stmia.w	r5, {r0, r1}
 80017e2:	1d33      	adds	r3, r6, #4
 80017e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	f003 fe4c 	bl	8005484 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017fe <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017fe:	b590      	push	{r4, r7, lr}
 8001800:	b089      	sub	sp, #36	; 0x24
 8001802:	af04      	add	r7, sp, #16
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	4608      	mov	r0, r1
 8001808:	4611      	mov	r1, r2
 800180a:	461a      	mov	r2, r3
 800180c:	4603      	mov	r3, r0
 800180e:	70fb      	strb	r3, [r7, #3]
 8001810:	460b      	mov	r3, r1
 8001812:	70bb      	strb	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_HCD_HC_Init+0x28>
 8001822:	2302      	movs	r3, #2
 8001824:	e076      	b.n	8001914 <HAL_HCD_HC_Init+0x116>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	212c      	movs	r1, #44	; 0x2c
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	333d      	adds	r3, #61	; 0x3d
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3338      	adds	r3, #56	; 0x38
 800184e:	787a      	ldrb	r2, [r7, #1]
 8001850:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	3340      	adds	r3, #64	; 0x40
 8001860:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001862:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3339      	adds	r3, #57	; 0x39
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	333f      	adds	r3, #63	; 0x3f
 8001884:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001888:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	78ba      	ldrb	r2, [r7, #2]
 800188e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001892:	b2d0      	uxtb	r0, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	212c      	movs	r1, #44	; 0x2c
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	4413      	add	r3, r2
 800189e:	333a      	adds	r3, #58	; 0x3a
 80018a0:	4602      	mov	r2, r0
 80018a2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80018a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da09      	bge.n	80018c0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	212c      	movs	r1, #44	; 0x2c
 80018b2:	fb01 f303 	mul.w	r3, r1, r3
 80018b6:	4413      	add	r3, r2
 80018b8:	333b      	adds	r3, #59	; 0x3b
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
 80018be:	e008      	b.n	80018d2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	212c      	movs	r1, #44	; 0x2c
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	333b      	adds	r3, #59	; 0x3b
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	333c      	adds	r3, #60	; 0x3c
 80018e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018e4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	787c      	ldrb	r4, [r7, #1]
 80018ec:	78ba      	ldrb	r2, [r7, #2]
 80018ee:	78f9      	ldrb	r1, [r7, #3]
 80018f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4623      	mov	r3, r4
 8001902:	f003 ff39 	bl	8005778 <USB_HC_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001912:	7bfb      	ldrb	r3, [r7, #15]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}

0800191c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_HCD_HC_Halt+0x1e>
 8001936:	2302      	movs	r3, #2
 8001938:	e00f      	b.n	800195a <HAL_HCD_HC_Halt+0x3e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	78fa      	ldrb	r2, [r7, #3]
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f004 f975 	bl	8005c3a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	4608      	mov	r0, r1
 800196e:	4611      	mov	r1, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4603      	mov	r3, r0
 8001974:	70fb      	strb	r3, [r7, #3]
 8001976:	460b      	mov	r3, r1
 8001978:	70bb      	strb	r3, [r7, #2]
 800197a:	4613      	mov	r3, r2
 800197c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	212c      	movs	r1, #44	; 0x2c
 8001984:	fb01 f303 	mul.w	r3, r1, r3
 8001988:	4413      	add	r3, r2
 800198a:	333b      	adds	r3, #59	; 0x3b
 800198c:	78ba      	ldrb	r2, [r7, #2]
 800198e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	212c      	movs	r1, #44	; 0x2c
 8001996:	fb01 f303 	mul.w	r3, r1, r3
 800199a:	4413      	add	r3, r2
 800199c:	333f      	adds	r3, #63	; 0x3f
 800199e:	787a      	ldrb	r2, [r7, #1]
 80019a0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019a2:	7c3b      	ldrb	r3, [r7, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d112      	bne.n	80019ce <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	212c      	movs	r1, #44	; 0x2c
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	3342      	adds	r3, #66	; 0x42
 80019b6:	2203      	movs	r2, #3
 80019b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	333d      	adds	r3, #61	; 0x3d
 80019c8:	7f3a      	ldrb	r2, [r7, #28]
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e008      	b.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	3342      	adds	r3, #66	; 0x42
 80019dc:	2202      	movs	r2, #2
 80019de:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019e0:	787b      	ldrb	r3, [r7, #1]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	f200 80c6 	bhi.w	8001b74 <HAL_HCD_HC_SubmitRequest+0x210>
 80019e8:	a201      	add	r2, pc, #4	; (adr r2, 80019f0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80019ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ee:	bf00      	nop
 80019f0:	08001a01 	.word	0x08001a01
 80019f4:	08001b61 	.word	0x08001b61
 80019f8:	08001a65 	.word	0x08001a65
 80019fc:	08001ae3 	.word	0x08001ae3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a00:	7c3b      	ldrb	r3, [r7, #16]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f040 80b8 	bne.w	8001b78 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a08:	78bb      	ldrb	r3, [r7, #2]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 80b4 	bne.w	8001b78 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a10:	8b3b      	ldrh	r3, [r7, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	3355      	adds	r3, #85	; 0x55
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	3355      	adds	r3, #85	; 0x55
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	3342      	adds	r3, #66	; 0x42
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a4e:	e093      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3342      	adds	r3, #66	; 0x42
 8001a5e:	2202      	movs	r2, #2
 8001a60:	701a      	strb	r2, [r3, #0]
      break;
 8001a62:	e089      	b.n	8001b78 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a64:	78bb      	ldrb	r3, [r7, #2]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d11d      	bne.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	212c      	movs	r1, #44	; 0x2c
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	3355      	adds	r3, #85	; 0x55
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	212c      	movs	r1, #44	; 0x2c
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	3342      	adds	r3, #66	; 0x42
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a90:	e073      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	212c      	movs	r1, #44	; 0x2c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3342      	adds	r3, #66	; 0x42
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	701a      	strb	r2, [r3, #0]
      break;
 8001aa4:	e069      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	212c      	movs	r1, #44	; 0x2c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3354      	adds	r3, #84	; 0x54
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3342      	adds	r3, #66	; 0x42
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
      break;
 8001acc:	e055      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3342      	adds	r3, #66	; 0x42
 8001adc:	2202      	movs	r2, #2
 8001ade:	701a      	strb	r2, [r3, #0]
      break;
 8001ae0:	e04b      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ae2:	78bb      	ldrb	r3, [r7, #2]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d11d      	bne.n	8001b24 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	212c      	movs	r1, #44	; 0x2c
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	3355      	adds	r3, #85	; 0x55
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	3342      	adds	r3, #66	; 0x42
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b0e:	e034      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3342      	adds	r3, #66	; 0x42
 8001b1e:	2202      	movs	r2, #2
 8001b20:	701a      	strb	r2, [r3, #0]
      break;
 8001b22:	e02a      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	3354      	adds	r3, #84	; 0x54
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	212c      	movs	r1, #44	; 0x2c
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	3342      	adds	r3, #66	; 0x42
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
      break;
 8001b4a:	e016      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3342      	adds	r3, #66	; 0x42
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	701a      	strb	r2, [r3, #0]
      break;
 8001b5e:	e00c      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3342      	adds	r3, #66	; 0x42
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
      break;
 8001b72:	e002      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b74:	bf00      	nop
 8001b76:	e000      	b.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b78:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	3344      	adds	r3, #68	; 0x44
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	8b3a      	ldrh	r2, [r7, #24]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	202c      	movs	r0, #44	; 0x2c
 8001b94:	fb00 f303 	mul.w	r3, r0, r3
 8001b98:	440b      	add	r3, r1
 8001b9a:	334c      	adds	r3, #76	; 0x4c
 8001b9c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	212c      	movs	r1, #44	; 0x2c
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	4413      	add	r3, r2
 8001baa:	3360      	adds	r3, #96	; 0x60
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	212c      	movs	r1, #44	; 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3350      	adds	r3, #80	; 0x50
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3339      	adds	r3, #57	; 0x39
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3361      	adds	r3, #97	; 0x61
 8001be2:	2200      	movs	r2, #0
 8001be4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	222c      	movs	r2, #44	; 0x2c
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	3338      	adds	r3, #56	; 0x38
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	18d1      	adds	r1, r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f003 fec8 	bl	8005994 <USB_HC_StartXfer>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop

08001c10 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fbeb 	bl	8005402 <USB_GetMode>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	f040 80f6 	bne.w	8001e20 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fbcf 	bl	80053dc <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80ec 	beq.w	8001e1e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fbc6 	bl	80053dc <USB_ReadInterrupts>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c5a:	d104      	bne.n	8001c66 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fbb6 	bl	80053dc <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c7a:	d104      	bne.n	8001c86 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 fba6 	bl	80053dc <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c9a:	d104      	bne.n	8001ca6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ca4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fb96 	bl	80053dc <USB_ReadInterrupts>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d103      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fb88 	bl	80053dc <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cd6:	d11c      	bne.n	8001d12 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ce0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10f      	bne.n	8001d12 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	6938      	ldr	r0, [r7, #16]
 8001cf6:	f003 fa97 	bl	8005228 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001cfa:	6938      	ldr	r0, [r7, #16]
 8001cfc:	f003 fab8 	bl	8005270 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fc70 	bl	80055ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f006 f943 	bl	8007f98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 fb60 	bl	80053dc <USB_ReadInterrupts>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d26:	d102      	bne.n	8001d2e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f001 fa03 	bl	8003134 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fb52 	bl	80053dc <USB_ReadInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d106      	bne.n	8001d50 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f006 f90c 	bl	8007f60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 fb41 	bl	80053dc <USB_ReadInterrupts>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d101      	bne.n	8001d68 <HAL_HCD_IRQHandler+0x158>
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_HCD_IRQHandler+0x15a>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d012      	beq.n	8001d94 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699a      	ldr	r2, [r3, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0210 	bic.w	r2, r2, #16
 8001d7c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f001 f906 	bl	8002f90 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0210 	orr.w	r2, r2, #16
 8001d92:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f003 fb1f 	bl	80053dc <USB_ReadInterrupts>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001da8:	d13a      	bne.n	8001e20 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 ff32 	bl	8005c18 <USB_HC_ReadInterrupt>
 8001db4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e025      	b.n	8001e08 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d018      	beq.n	8001e02 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001de6:	d106      	bne.n	8001df6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	4619      	mov	r1, r3
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f8ab 	bl	8001f4a <HCD_HC_IN_IRQHandler>
 8001df4:	e005      	b.n	8001e02 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fcc6 	bl	800278e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d3d4      	bcc.n	8001dbc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e1a:	615a      	str	r2, [r3, #20]
 8001e1c:	e000      	b.n	8001e20 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e1e:	bf00      	nop
    }
  }
}
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_HCD_Start+0x16>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e013      	b.n	8001e64 <HAL_HCD_Start+0x3e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fc32 	bl	80056b4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 f978 	bl	800514a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_HCD_Stop+0x16>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e00d      	b.n	8001e9e <HAL_HCD_Stop+0x32>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f004 f82c 	bl	8005eec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 fbd4 	bl	8005660 <USB_ResetPort>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	3360      	adds	r3, #96	; 0x60
 8001edc:	781b      	ldrb	r3, [r3, #0]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	3350      	adds	r3, #80	; 0x50
 8001f04:	681b      	ldr	r3, [r3, #0]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fc18 	bl	8005754 <USB_GetCurrentFrame>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fbf3 	bl	8005726 <USB_GetHostSpeed>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d119      	bne.n	8001fae <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	461a      	mov	r2, r3
 8001f88:	2304      	movs	r3, #4
 8001f8a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	0151      	lsls	r1, r2, #5
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	440a      	add	r2, r1
 8001fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	60d3      	str	r3, [r2, #12]
 8001fac:	e101      	b.n	80021b2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc4:	d12b      	bne.n	800201e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	212c      	movs	r1, #44	; 0x2c
 8001fe0:	fb01 f303 	mul.w	r3, r1, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3361      	adds	r3, #97	; 0x61
 8001fe8:	2207      	movs	r2, #7
 8001fea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	0151      	lsls	r1, r2, #5
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	440a      	add	r2, r1
 8002002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002006:	f043 0302 	orr.w	r3, r3, #2
 800200a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fe0f 	bl	8005c3a <USB_HC_Halt>
 800201c:	e0c9      	b.n	80021b2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4413      	add	r3, r2
 8002026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b20      	cmp	r3, #32
 8002032:	d109      	bne.n	8002048 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	4413      	add	r3, r2
 800203c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002040:	461a      	mov	r2, r3
 8002042:	2320      	movs	r3, #32
 8002044:	6093      	str	r3, [r2, #8]
 8002046:	e0b4      	b.n	80021b2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	015a      	lsls	r2, r3, #5
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4413      	add	r3, r2
 8002050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b08      	cmp	r3, #8
 800205c:	d133      	bne.n	80020c6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	0151      	lsls	r1, r2, #5
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	440a      	add	r2, r1
 8002074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002078:	f043 0302 	orr.w	r3, r3, #2
 800207c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	212c      	movs	r1, #44	; 0x2c
 8002084:	fb01 f303 	mul.w	r3, r1, r3
 8002088:	4413      	add	r3, r2
 800208a:	3361      	adds	r3, #97	; 0x61
 800208c:	2205      	movs	r2, #5
 800208e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209c:	461a      	mov	r2, r3
 800209e:	2310      	movs	r3, #16
 80020a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	461a      	mov	r2, r3
 80020b0:	2308      	movs	r3, #8
 80020b2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fdbb 	bl	8005c3a <USB_HC_Halt>
 80020c4:	e075      	b.n	80021b2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020dc:	d134      	bne.n	8002148 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	0151      	lsls	r1, r2, #5
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	440a      	add	r2, r1
 80020f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3361      	adds	r3, #97	; 0x61
 800210c:	2208      	movs	r2, #8
 800210e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211c:	461a      	mov	r2, r3
 800211e:	2310      	movs	r3, #16
 8002120:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	461a      	mov	r2, r3
 8002130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002134:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f003 fd7a 	bl	8005c3a <USB_HC_Halt>
 8002146:	e034      	b.n	80021b2 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	015a      	lsls	r2, r3, #5
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4413      	add	r3, r2
 8002150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b80      	cmp	r3, #128	; 0x80
 800215c:	d129      	bne.n	80021b2 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	015a      	lsls	r2, r3, #5
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4413      	add	r3, r2
 8002166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	0151      	lsls	r1, r2, #5
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	440a      	add	r2, r1
 8002174:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3361      	adds	r3, #97	; 0x61
 800218c:	2206      	movs	r2, #6
 800218e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f003 fd4d 	bl	8005c3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ac:	461a      	mov	r2, r3
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c8:	d122      	bne.n	8002210 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	0151      	lsls	r1, r2, #5
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	440a      	add	r2, r1
 80021e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 fd20 	bl	8005c3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4413      	add	r3, r2
 8002202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002206:	461a      	mov	r2, r3
 8002208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800220e:	e2ba      	b.n	8002786 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b01      	cmp	r3, #1
 8002224:	f040 811b 	bne.w	800245e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d019      	beq.n	8002264 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3348      	adds	r3, #72	; 0x48
 800223e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	0159      	lsls	r1, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	440b      	add	r3, r1
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002252:	1ad2      	subs	r2, r2, r3
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	202c      	movs	r0, #44	; 0x2c
 800225a:	fb00 f303 	mul.w	r3, r0, r3
 800225e:	440b      	add	r3, r1
 8002260:	3350      	adds	r3, #80	; 0x50
 8002262:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	3361      	adds	r3, #97	; 0x61
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	335c      	adds	r3, #92	; 0x5c
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	461a      	mov	r2, r3
 8002296:	2301      	movs	r3, #1
 8002298:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	333f      	adds	r3, #63	; 0x3f
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	333f      	adds	r3, #63	; 0x3f
 80022bc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d121      	bne.n	8002306 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	0151      	lsls	r1, r2, #5
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	440a      	add	r2, r1
 80022d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fca4 	bl	8005c3a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	461a      	mov	r2, r3
 8002300:	2310      	movs	r3, #16
 8002302:	6093      	str	r3, [r2, #8]
 8002304:	e066      	b.n	80023d4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	333f      	adds	r3, #63	; 0x3f
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d127      	bne.n	800236a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	0151      	lsls	r1, r2, #5
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	440a      	add	r2, r1
 8002330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002338:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3360      	adds	r3, #96	; 0x60
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	b2d9      	uxtb	r1, r3
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	202c      	movs	r0, #44	; 0x2c
 8002356:	fb00 f303 	mul.w	r3, r0, r3
 800235a:	4413      	add	r3, r2
 800235c:	3360      	adds	r3, #96	; 0x60
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f005 fe26 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002368:	e034      	b.n	80023d4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	333f      	adds	r3, #63	; 0x3f
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d12a      	bne.n	80023d4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3360      	adds	r3, #96	; 0x60
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3354      	adds	r3, #84	; 0x54
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	f083 0301 	eor.w	r3, r3, #1
 80023a4:	b2d8      	uxtb	r0, r3
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3354      	adds	r3, #84	; 0x54
 80023b4:	4602      	mov	r2, r0
 80023b6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	b2d9      	uxtb	r1, r3
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	202c      	movs	r0, #44	; 0x2c
 80023c2:	fb00 f303 	mul.w	r3, r0, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3360      	adds	r3, #96	; 0x60
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f005 fdf0 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d12b      	bne.n	8002434 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3348      	adds	r3, #72	; 0x48
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	202c      	movs	r0, #44	; 0x2c
 80023f2:	fb00 f202 	mul.w	r2, r0, r2
 80023f6:	440a      	add	r2, r1
 80023f8:	3240      	adds	r2, #64	; 0x40
 80023fa:	8812      	ldrh	r2, [r2, #0]
 80023fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 81be 	beq.w	8002786 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3354      	adds	r3, #84	; 0x54
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2d8      	uxtb	r0, r3
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3354      	adds	r3, #84	; 0x54
 800242e:	4602      	mov	r2, r0
 8002430:	701a      	strb	r2, [r3, #0]
}
 8002432:	e1a8      	b.n	8002786 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	212c      	movs	r1, #44	; 0x2c
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	3354      	adds	r3, #84	; 0x54
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	f083 0301 	eor.w	r3, r3, #1
 8002448:	b2d8      	uxtb	r0, r3
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	3354      	adds	r3, #84	; 0x54
 8002458:	4602      	mov	r2, r0
 800245a:	701a      	strb	r2, [r3, #0]
}
 800245c:	e193      	b.n	8002786 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b02      	cmp	r3, #2
 8002472:	f040 8106 	bne.w	8002682 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	0151      	lsls	r1, r2, #5
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	440a      	add	r2, r1
 800248c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002490:	f023 0302 	bic.w	r3, r3, #2
 8002494:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3361      	adds	r3, #97	; 0x61
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d109      	bne.n	80024be <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3360      	adds	r3, #96	; 0x60
 80024b8:	2201      	movs	r2, #1
 80024ba:	701a      	strb	r2, [r3, #0]
 80024bc:	e0c9      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	3361      	adds	r3, #97	; 0x61
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d109      	bne.n	80024e6 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	3360      	adds	r3, #96	; 0x60
 80024e0:	2205      	movs	r2, #5
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	e0b5      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3361      	adds	r3, #97	; 0x61
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d009      	beq.n	800250e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	212c      	movs	r1, #44	; 0x2c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	3361      	adds	r3, #97	; 0x61
 8002508:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800250a:	2b08      	cmp	r3, #8
 800250c:	d150      	bne.n	80025b0 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	335c      	adds	r3, #92	; 0x5c
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	202c      	movs	r0, #44	; 0x2c
 8002526:	fb00 f303 	mul.w	r3, r0, r3
 800252a:	440b      	add	r3, r1
 800252c:	335c      	adds	r3, #92	; 0x5c
 800252e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	212c      	movs	r1, #44	; 0x2c
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	4413      	add	r3, r2
 800253c:	335c      	adds	r3, #92	; 0x5c
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d912      	bls.n	800256a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	212c      	movs	r1, #44	; 0x2c
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	4413      	add	r3, r2
 8002550:	335c      	adds	r3, #92	; 0x5c
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	3360      	adds	r3, #96	; 0x60
 8002564:	2204      	movs	r2, #4
 8002566:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002568:	e073      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	3360      	adds	r3, #96	; 0x60
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002592:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800259a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025ae:	e050      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3361      	adds	r3, #97	; 0x61
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d122      	bne.n	800260a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	3360      	adds	r3, #96	; 0x60
 80025d2:	2202      	movs	r2, #2
 80025d4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025ec:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025f4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	461a      	mov	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	e023      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	3361      	adds	r3, #97	; 0x61
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b07      	cmp	r3, #7
 800261c:	d119      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	335c      	adds	r3, #92	; 0x5c
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	202c      	movs	r0, #44	; 0x2c
 8002636:	fb00 f303 	mul.w	r3, r0, r3
 800263a:	440b      	add	r3, r1
 800263c:	335c      	adds	r3, #92	; 0x5c
 800263e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3360      	adds	r3, #96	; 0x60
 800264e:	2204      	movs	r2, #4
 8002650:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	461a      	mov	r2, r3
 8002660:	2302      	movs	r3, #2
 8002662:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	b2d9      	uxtb	r1, r3
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	202c      	movs	r0, #44	; 0x2c
 800266e:	fb00 f303 	mul.w	r3, r0, r3
 8002672:	4413      	add	r3, r2
 8002674:	3360      	adds	r3, #96	; 0x60
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f005 fc9a 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002680:	e081      	b.n	8002786 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b10      	cmp	r3, #16
 8002696:	d176      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	333f      	adds	r3, #63	; 0x3f
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d121      	bne.n	80026f0 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	335c      	adds	r3, #92	; 0x5c
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	0151      	lsls	r1, r2, #5
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	440a      	add	r2, r1
 80026d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f003 faa6 	bl	8005c3a <USB_HC_Halt>
 80026ee:	e041      	b.n	8002774 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	333f      	adds	r3, #63	; 0x3f
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d009      	beq.n	8002718 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	333f      	adds	r3, #63	; 0x3f
 8002712:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002714:	2b02      	cmp	r3, #2
 8002716:	d12d      	bne.n	8002774 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	335c      	adds	r3, #92	; 0x5c
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d120      	bne.n	8002774 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	3361      	adds	r3, #97	; 0x61
 8002740:	2203      	movs	r2, #3
 8002742:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	0151      	lsls	r1, r2, #5
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	440a      	add	r2, r1
 800275a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fa63 	bl	8005c3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	2310      	movs	r3, #16
 8002784:	6093      	str	r3, [r2, #8]
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b088      	sub	sp, #32
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d119      	bne.n	80027f2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	461a      	mov	r2, r3
 80027cc:	2304      	movs	r3, #4
 80027ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	0151      	lsls	r1, r2, #5
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	440a      	add	r2, r1
 80027e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80027f0:	e3ca      	b.n	8002f88 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b20      	cmp	r3, #32
 8002806:	d13e      	bne.n	8002886 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	461a      	mov	r2, r3
 8002816:	2320      	movs	r3, #32
 8002818:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	333d      	adds	r3, #61	; 0x3d
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	f040 83ac 	bne.w	8002f88 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	333d      	adds	r3, #61	; 0x3d
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3360      	adds	r3, #96	; 0x60
 8002850:	2202      	movs	r2, #2
 8002852:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	0151      	lsls	r1, r2, #5
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	440a      	add	r2, r1
 800286a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800286e:	f043 0302 	orr.w	r3, r3, #2
 8002872:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f003 f9db 	bl	8005c3a <USB_HC_Halt>
}
 8002884:	e380      	b.n	8002f88 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800289c:	d122      	bne.n	80028e4 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	0151      	lsls	r1, r2, #5
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	440a      	add	r2, r1
 80028b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 f9b6 	bl	8005c3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	461a      	mov	r2, r3
 80028dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e0:	6093      	str	r3, [r2, #8]
}
 80028e2:	e351      	b.n	8002f88 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d150      	bne.n	800299c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	212c      	movs	r1, #44	; 0x2c
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	335c      	adds	r3, #92	; 0x5c
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d111      	bne.n	8002946 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	333d      	adds	r3, #61	; 0x3d
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	461a      	mov	r2, r3
 8002942:	2340      	movs	r3, #64	; 0x40
 8002944:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	0151      	lsls	r1, r2, #5
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	440a      	add	r2, r1
 800295c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f003 f962 	bl	8005c3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	461a      	mov	r2, r3
 8002984:	2301      	movs	r3, #1
 8002986:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3361      	adds	r3, #97	; 0x61
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
}
 800299a:	e2f5      	b.n	8002f88 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b40      	cmp	r3, #64	; 0x40
 80029b0:	d13c      	bne.n	8002a2c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3361      	adds	r3, #97	; 0x61
 80029c0:	2204      	movs	r2, #4
 80029c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	333d      	adds	r3, #61	; 0x3d
 80029d2:	2201      	movs	r2, #1
 80029d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	335c      	adds	r3, #92	; 0x5c
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	0151      	lsls	r1, r2, #5
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	440a      	add	r2, r1
 80029fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a02:	f043 0302 	orr.w	r3, r3, #2
 8002a06:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 f911 	bl	8005c3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	461a      	mov	r2, r3
 8002a26:	2340      	movs	r3, #64	; 0x40
 8002a28:	6093      	str	r3, [r2, #8]
}
 8002a2a:	e2ad      	b.n	8002f88 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d12a      	bne.n	8002a98 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2308      	movs	r3, #8
 8002a52:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f003 f8db 	bl	8005c3a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3361      	adds	r3, #97	; 0x61
 8002a92:	2205      	movs	r2, #5
 8002a94:	701a      	strb	r2, [r3, #0]
}
 8002a96:	e277      	b.n	8002f88 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b10      	cmp	r3, #16
 8002aac:	d150      	bne.n	8002b50 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	335c      	adds	r3, #92	; 0x5c
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3361      	adds	r3, #97	; 0x61
 8002ace:	2203      	movs	r2, #3
 8002ad0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	333d      	adds	r3, #61	; 0x3d
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d112      	bne.n	8002b0c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	333c      	adds	r3, #60	; 0x3c
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d108      	bne.n	8002b0c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	333d      	adds	r3, #61	; 0x3d
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	0151      	lsls	r1, r2, #5
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	440a      	add	r2, r1
 8002b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 f87f 	bl	8005c3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	015a      	lsls	r2, r3, #5
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	4413      	add	r3, r2
 8002b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	6093      	str	r3, [r2, #8]
}
 8002b4e:	e21b      	b.n	8002f88 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d174      	bne.n	8002c50 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d121      	bne.n	8002bb2 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3361      	adds	r3, #97	; 0x61
 8002b7c:	2206      	movs	r2, #6
 8002b7e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	0151      	lsls	r1, r2, #5
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	440a      	add	r2, r1
 8002b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b9a:	f043 0302 	orr.w	r3, r3, #2
 8002b9e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 f845 	bl	8005c3a <USB_HC_Halt>
 8002bb0:	e044      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	335c      	adds	r3, #92	; 0x5c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	202c      	movs	r0, #44	; 0x2c
 8002bca:	fb00 f303 	mul.w	r3, r0, r3
 8002bce:	440b      	add	r3, r1
 8002bd0:	335c      	adds	r3, #92	; 0x5c
 8002bd2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	335c      	adds	r3, #92	; 0x5c
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d920      	bls.n	8002c2a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	335c      	adds	r3, #92	; 0x5c
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3360      	adds	r3, #96	; 0x60
 8002c08:	2204      	movs	r2, #4
 8002c0a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	b2d9      	uxtb	r1, r3
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	202c      	movs	r0, #44	; 0x2c
 8002c16:	fb00 f303 	mul.w	r3, r0, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3360      	adds	r3, #96	; 0x60
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f005 f9c6 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c28:	e008      	b.n	8002c3c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	3360      	adds	r3, #96	; 0x60
 8002c38:	2202      	movs	r2, #2
 8002c3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	6093      	str	r3, [r2, #8]
}
 8002c4e:	e19b      	b.n	8002f88 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c66:	d134      	bne.n	8002cd2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	0151      	lsls	r1, r2, #5
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	440a      	add	r2, r1
 8002c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c82:	f043 0302 	orr.w	r3, r3, #2
 8002c86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	4611      	mov	r1, r2
 8002c92:	4618      	mov	r0, r3
 8002c94:	f002 ffd1 	bl	8005c3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2310      	movs	r3, #16
 8002ca8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3361      	adds	r3, #97	; 0x61
 8002ccc:	2208      	movs	r2, #8
 8002cce:	701a      	strb	r2, [r3, #0]
}
 8002cd0:	e15a      	b.n	8002f88 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	f040 814f 	bne.w	8002f88 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	0151      	lsls	r1, r2, #5
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	440a      	add	r2, r1
 8002d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d04:	f023 0302 	bic.w	r3, r3, #2
 8002d08:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3361      	adds	r3, #97	; 0x61
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d17d      	bne.n	8002e1a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3360      	adds	r3, #96	; 0x60
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	333f      	adds	r3, #63	; 0x3f
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d00a      	beq.n	8002d5a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	333f      	adds	r3, #63	; 0x3f
 8002d52:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	f040 8100 	bne.w	8002f5a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d113      	bne.n	8002d8a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3355      	adds	r3, #85	; 0x55
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	f083 0301 	eor.w	r3, r3, #1
 8002d76:	b2d8      	uxtb	r0, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3355      	adds	r3, #85	; 0x55
 8002d86:	4602      	mov	r2, r0
 8002d88:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	f040 80e3 	bne.w	8002f5a <HCD_HC_OUT_IRQHandler+0x7cc>
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	334c      	adds	r3, #76	; 0x4c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80d8 	beq.w	8002f5a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	334c      	adds	r3, #76	; 0x4c
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	202c      	movs	r0, #44	; 0x2c
 8002dc0:	fb00 f202 	mul.w	r2, r0, r2
 8002dc4:	440a      	add	r2, r1
 8002dc6:	3240      	adds	r2, #64	; 0x40
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	202c      	movs	r0, #44	; 0x2c
 8002dd4:	fb00 f202 	mul.w	r2, r0, r2
 8002dd8:	440a      	add	r2, r1
 8002dda:	3240      	adds	r2, #64	; 0x40
 8002ddc:	8812      	ldrh	r2, [r2, #0]
 8002dde:	fbb3 f3f2 	udiv	r3, r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80b5 	beq.w	8002f5a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3355      	adds	r3, #85	; 0x55
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	f083 0301 	eor.w	r3, r3, #1
 8002e04:	b2d8      	uxtb	r0, r3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	3355      	adds	r3, #85	; 0x55
 8002e14:	4602      	mov	r2, r0
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e09f      	b.n	8002f5a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3361      	adds	r3, #97	; 0x61
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d109      	bne.n	8002e42 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	212c      	movs	r1, #44	; 0x2c
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3360      	adds	r3, #96	; 0x60
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e08b      	b.n	8002f5a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3361      	adds	r3, #97	; 0x61
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d109      	bne.n	8002e6a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3360      	adds	r3, #96	; 0x60
 8002e64:	2202      	movs	r2, #2
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e077      	b.n	8002f5a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	3361      	adds	r3, #97	; 0x61
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d109      	bne.n	8002e92 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3360      	adds	r3, #96	; 0x60
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e063      	b.n	8002f5a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3361      	adds	r3, #97	; 0x61
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d009      	beq.n	8002eba <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3361      	adds	r3, #97	; 0x61
 8002eb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d14f      	bne.n	8002f5a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	335c      	adds	r3, #92	; 0x5c
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	202c      	movs	r0, #44	; 0x2c
 8002ed2:	fb00 f303 	mul.w	r3, r0, r3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	335c      	adds	r3, #92	; 0x5c
 8002eda:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	335c      	adds	r3, #92	; 0x5c
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d912      	bls.n	8002f16 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	212c      	movs	r1, #44	; 0x2c
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	335c      	adds	r3, #92	; 0x5c
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3360      	adds	r3, #96	; 0x60
 8002f10:	2204      	movs	r2, #4
 8002f12:	701a      	strb	r2, [r3, #0]
 8002f14:	e021      	b.n	8002f5a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3360      	adds	r3, #96	; 0x60
 8002f24:	2202      	movs	r2, #2
 8002f26:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f3e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f46:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f66:	461a      	mov	r2, r3
 8002f68:	2302      	movs	r3, #2
 8002f6a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	b2d9      	uxtb	r1, r3
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	202c      	movs	r0, #44	; 0x2c
 8002f76:	fb00 f303 	mul.w	r3, r0, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3360      	adds	r3, #96	; 0x60
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f005 f816 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f88:	bf00      	nop
 8002f8a:	3720      	adds	r7, #32
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	0c5b      	lsrs	r3, r3, #17
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fc4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d004      	beq.n	8002fd6 <HCD_RXQLVL_IRQHandler+0x46>
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	f000 80a9 	beq.w	8003126 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fd4:	e0aa      	b.n	800312c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a6 	beq.w	800312a <HCD_RXQLVL_IRQHandler+0x19a>
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	3344      	adds	r3, #68	; 0x44
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 809b 	beq.w	800312a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	3350      	adds	r3, #80	; 0x50
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	441a      	add	r2, r3
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	202c      	movs	r0, #44	; 0x2c
 800300e:	fb00 f303 	mul.w	r3, r0, r3
 8003012:	440b      	add	r3, r1
 8003014:	334c      	adds	r3, #76	; 0x4c
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d87a      	bhi.n	8003112 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3344      	adds	r3, #68	; 0x44
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	b292      	uxth	r2, r2
 8003034:	4619      	mov	r1, r3
 8003036:	f002 f979 	bl	800532c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3344      	adds	r3, #68	; 0x44
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	441a      	add	r2, r3
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	202c      	movs	r0, #44	; 0x2c
 8003054:	fb00 f303 	mul.w	r3, r0, r3
 8003058:	440b      	add	r3, r1
 800305a:	3344      	adds	r3, #68	; 0x44
 800305c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	3350      	adds	r3, #80	; 0x50
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	441a      	add	r2, r3
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	202c      	movs	r0, #44	; 0x2c
 8003078:	fb00 f303 	mul.w	r3, r0, r3
 800307c:	440b      	add	r3, r1
 800307e:	3350      	adds	r3, #80	; 0x50
 8003080:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	4413      	add	r3, r2
 800308a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	0cdb      	lsrs	r3, r3, #19
 8003092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003096:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3340      	adds	r3, #64	; 0x40
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d13c      	bne.n	800312a <HCD_RXQLVL_IRQHandler+0x19a>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d039      	beq.n	800312a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030cc:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030d4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	461a      	mov	r2, r3
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	3354      	adds	r3, #84	; 0x54
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	f083 0301 	eor.w	r3, r3, #1
 80030fc:	b2d8      	uxtb	r0, r3
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	212c      	movs	r1, #44	; 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	3354      	adds	r3, #84	; 0x54
 800310c:	4602      	mov	r2, r0
 800310e:	701a      	strb	r2, [r3, #0]
      break;
 8003110:	e00b      	b.n	800312a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	3360      	adds	r3, #96	; 0x60
 8003120:	2204      	movs	r2, #4
 8003122:	701a      	strb	r2, [r3, #0]
      break;
 8003124:	e001      	b.n	800312a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003126:	bf00      	nop
 8003128:	e000      	b.n	800312c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800312a:	bf00      	nop
  }
}
 800312c:	bf00      	nop
 800312e:	3728      	adds	r7, #40	; 0x28
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003160:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b02      	cmp	r3, #2
 800316a:	d10b      	bne.n	8003184 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d102      	bne.n	800317c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f004 ff00 	bl	8007f7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b08      	cmp	r3, #8
 800318c:	d132      	bne.n	80031f4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d126      	bne.n	80031ee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d113      	bne.n	80031d0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031b2:	d106      	bne.n	80031c2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2102      	movs	r1, #2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 fa16 	bl	80055ec <USB_InitFSLSPClkSel>
 80031c0:	e011      	b.n	80031e6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2101      	movs	r1, #1
 80031c8:	4618      	mov	r0, r3
 80031ca:	f002 fa0f 	bl	80055ec <USB_InitFSLSPClkSel>
 80031ce:	e00a      	b.n	80031e6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d106      	bne.n	80031e6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031de:	461a      	mov	r2, r3
 80031e0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031e4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f004 fef2 	bl	8007fd0 <HAL_HCD_PortEnabled_Callback>
 80031ec:	e002      	b.n	80031f4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f004 fefc 	bl	8007fec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d103      	bne.n	8003206 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f043 0320 	orr.w	r3, r3, #32
 8003204:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	6013      	str	r3, [r2, #0]
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e12b      	b.n	8003486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd fd06 	bl	8000c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2224      	movs	r2, #36	; 0x24
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800326e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800327e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003280:	f001 f9fc 	bl	800467c <HAL_RCC_GetPCLK1Freq>
 8003284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4a81      	ldr	r2, [pc, #516]	; (8003490 <HAL_I2C_Init+0x274>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d807      	bhi.n	80032a0 <HAL_I2C_Init+0x84>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a80      	ldr	r2, [pc, #512]	; (8003494 <HAL_I2C_Init+0x278>)
 8003294:	4293      	cmp	r3, r2
 8003296:	bf94      	ite	ls
 8003298:	2301      	movls	r3, #1
 800329a:	2300      	movhi	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	e006      	b.n	80032ae <HAL_I2C_Init+0x92>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a7d      	ldr	r2, [pc, #500]	; (8003498 <HAL_I2C_Init+0x27c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	bf94      	ite	ls
 80032a8:	2301      	movls	r3, #1
 80032aa:	2300      	movhi	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e0e7      	b.n	8003486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a78      	ldr	r2, [pc, #480]	; (800349c <HAL_I2C_Init+0x280>)
 80032ba:	fba2 2303 	umull	r2, r3, r2, r3
 80032be:	0c9b      	lsrs	r3, r3, #18
 80032c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4a6a      	ldr	r2, [pc, #424]	; (8003490 <HAL_I2C_Init+0x274>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d802      	bhi.n	80032f0 <HAL_I2C_Init+0xd4>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	3301      	adds	r3, #1
 80032ee:	e009      	b.n	8003304 <HAL_I2C_Init+0xe8>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	4a69      	ldr	r2, [pc, #420]	; (80034a0 <HAL_I2C_Init+0x284>)
 80032fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003300:	099b      	lsrs	r3, r3, #6
 8003302:	3301      	adds	r3, #1
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	430b      	orrs	r3, r1
 800330a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003316:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	495c      	ldr	r1, [pc, #368]	; (8003490 <HAL_I2C_Init+0x274>)
 8003320:	428b      	cmp	r3, r1
 8003322:	d819      	bhi.n	8003358 <HAL_I2C_Init+0x13c>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1e59      	subs	r1, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003332:	1c59      	adds	r1, r3, #1
 8003334:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003338:	400b      	ands	r3, r1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_I2C_Init+0x138>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1e59      	subs	r1, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fbb1 f3f3 	udiv	r3, r1, r3
 800334c:	3301      	adds	r3, #1
 800334e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003352:	e051      	b.n	80033f8 <HAL_I2C_Init+0x1dc>
 8003354:	2304      	movs	r3, #4
 8003356:	e04f      	b.n	80033f8 <HAL_I2C_Init+0x1dc>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d111      	bne.n	8003384 <HAL_I2C_Init+0x168>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1e58      	subs	r0, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	440b      	add	r3, r1
 800336e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003372:	3301      	adds	r3, #1
 8003374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e012      	b.n	80033aa <HAL_I2C_Init+0x18e>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1e58      	subs	r0, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	0099      	lsls	r1, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	fbb0 f3f3 	udiv	r3, r0, r3
 800339a:	3301      	adds	r3, #1
 800339c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Init+0x196>
 80033ae:	2301      	movs	r3, #1
 80033b0:	e022      	b.n	80033f8 <HAL_I2C_Init+0x1dc>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10e      	bne.n	80033d8 <HAL_I2C_Init+0x1bc>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1e58      	subs	r0, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	460b      	mov	r3, r1
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	440b      	add	r3, r1
 80033c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d6:	e00f      	b.n	80033f8 <HAL_I2C_Init+0x1dc>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1e58      	subs	r0, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	0099      	lsls	r1, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ee:	3301      	adds	r3, #1
 80033f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	6809      	ldr	r1, [r1, #0]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003426:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6911      	ldr	r1, [r2, #16]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68d2      	ldr	r2, [r2, #12]
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	430b      	orrs	r3, r1
 800343a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2220      	movs	r2, #32
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	000186a0 	.word	0x000186a0
 8003494:	001e847f 	.word	0x001e847f
 8003498:	003d08ff 	.word	0x003d08ff
 800349c:	431bde83 	.word	0x431bde83
 80034a0:	10624dd3 	.word	0x10624dd3

080034a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e128      	b.n	8003708 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a90      	ldr	r2, [pc, #576]	; (8003710 <HAL_I2S_Init+0x26c>)
 80034ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fd fc07 	bl	8000ce4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034ec:	f023 030f 	bic.w	r3, r3, #15
 80034f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2202      	movs	r2, #2
 80034f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d060      	beq.n	80035c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800350a:	2310      	movs	r3, #16
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e001      	b.n	8003514 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003510:	2320      	movs	r3, #32
 8003512:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	2b20      	cmp	r3, #32
 800351a:	d802      	bhi.n	8003522 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003522:	2001      	movs	r0, #1
 8003524:	f001 f9b4 	bl	8004890 <HAL_RCCEx_GetPeriphCLKFreq>
 8003528:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003532:	d125      	bne.n	8003580 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d010      	beq.n	800355e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	fbb2 f2f3 	udiv	r2, r2, r3
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	461a      	mov	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	3305      	adds	r3, #5
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	e01f      	b.n	800359e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	3305      	adds	r3, #5
 800357c:	613b      	str	r3, [r7, #16]
 800357e:	e00e      	b.n	800359e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fbb2 f2f3 	udiv	r2, r2, r3
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	461a      	mov	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	fbb2 f3f3 	udiv	r3, r2, r3
 800359a:	3305      	adds	r3, #5
 800359c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	4a5c      	ldr	r2, [pc, #368]	; (8003714 <HAL_I2S_Init+0x270>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	08db      	lsrs	r3, r3, #3
 80035a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	e003      	b.n	80035cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80035c4:	2302      	movs	r3, #2
 80035c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d902      	bls.n	80035d8 <HAL_I2S_Init+0x134>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2bff      	cmp	r3, #255	; 0xff
 80035d6:	d907      	bls.n	80035e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	f043 0210 	orr.w	r2, r3, #16
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e08f      	b.n	8003708 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	ea42 0103 	orr.w	r1, r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003606:	f023 030f 	bic.w	r3, r3, #15
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6851      	ldr	r1, [r2, #4]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6892      	ldr	r2, [r2, #8]
 8003612:	4311      	orrs	r1, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68d2      	ldr	r2, [r2, #12]
 8003618:	4311      	orrs	r1, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6992      	ldr	r2, [r2, #24]
 800361e:	430a      	orrs	r2, r1
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800362a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d161      	bne.n	80036f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a38      	ldr	r2, [pc, #224]	; (8003718 <HAL_I2S_Init+0x274>)
 8003638:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a37      	ldr	r2, [pc, #220]	; (800371c <HAL_I2S_Init+0x278>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d101      	bne.n	8003648 <HAL_I2S_Init+0x1a4>
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_I2S_Init+0x27c>)
 8003646:	e001      	b.n	800364c <HAL_I2S_Init+0x1a8>
 8003648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	4932      	ldr	r1, [pc, #200]	; (800371c <HAL_I2S_Init+0x278>)
 8003654:	428a      	cmp	r2, r1
 8003656:	d101      	bne.n	800365c <HAL_I2S_Init+0x1b8>
 8003658:	4a31      	ldr	r2, [pc, #196]	; (8003720 <HAL_I2S_Init+0x27c>)
 800365a:	e001      	b.n	8003660 <HAL_I2S_Init+0x1bc>
 800365c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003660:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003664:	f023 030f 	bic.w	r3, r3, #15
 8003668:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2b      	ldr	r2, [pc, #172]	; (800371c <HAL_I2S_Init+0x278>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_I2S_Init+0x1d4>
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_I2S_Init+0x27c>)
 8003676:	e001      	b.n	800367c <HAL_I2S_Init+0x1d8>
 8003678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367c:	2202      	movs	r2, #2
 800367e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a25      	ldr	r2, [pc, #148]	; (800371c <HAL_I2S_Init+0x278>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d101      	bne.n	800368e <HAL_I2S_Init+0x1ea>
 800368a:	4b25      	ldr	r3, [pc, #148]	; (8003720 <HAL_I2S_Init+0x27c>)
 800368c:	e001      	b.n	8003692 <HAL_I2S_Init+0x1ee>
 800368e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800369e:	d003      	beq.n	80036a8 <HAL_I2S_Init+0x204>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d103      	bne.n	80036b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80036a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	e001      	b.n	80036b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036be:	4313      	orrs	r3, r2
 80036c0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036c8:	4313      	orrs	r3, r2
 80036ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036d2:	4313      	orrs	r3, r2
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	897b      	ldrh	r3, [r7, #10]
 80036d8:	4313      	orrs	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a0d      	ldr	r2, [pc, #52]	; (800371c <HAL_I2S_Init+0x278>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d101      	bne.n	80036f0 <HAL_I2S_Init+0x24c>
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <HAL_I2S_Init+0x27c>)
 80036ee:	e001      	b.n	80036f4 <HAL_I2S_Init+0x250>
 80036f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f4:	897a      	ldrh	r2, [r7, #10]
 80036f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3720      	adds	r7, #32
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	0800381b 	.word	0x0800381b
 8003714:	cccccccd 	.word	0xcccccccd
 8003718:	08003931 	.word	0x08003931
 800371c:	40003800 	.word	0x40003800
 8003720:	40003400 	.word	0x40003400

08003724 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	881a      	ldrh	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	1c9a      	adds	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10e      	bne.n	80037b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ffb8 	bl	8003724 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	b292      	uxth	r2, r2
 80037d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	1c9a      	adds	r2, r3, #2
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10e      	bne.n	8003812 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003802:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff ff93 	bl	8003738 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b04      	cmp	r3, #4
 8003834:	d13a      	bne.n	80038ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d109      	bne.n	8003854 <I2S_IRQHandler+0x3a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d102      	bne.n	8003854 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ffb4 	bl	80037bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d126      	bne.n	80038ac <I2S_IRQHandler+0x92>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b20      	cmp	r3, #32
 800386a:	d11f      	bne.n	80038ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800387a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f043 0202 	orr.w	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff50 	bl	800374c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d136      	bne.n	8003926 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d109      	bne.n	80038d6 <I2S_IRQHandler+0xbc>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b80      	cmp	r3, #128	; 0x80
 80038ce:	d102      	bne.n	80038d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ff45 	bl	8003760 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d122      	bne.n	8003926 <I2S_IRQHandler+0x10c>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d11b      	bne.n	8003926 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	f043 0204 	orr.w	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff13 	bl	800374c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003926:	bf00      	nop
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4aa2      	ldr	r2, [pc, #648]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800394a:	4ba2      	ldr	r3, [pc, #648]	; (8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800394c:	e001      	b.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800394e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a9b      	ldr	r2, [pc, #620]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003968:	4b9a      	ldr	r3, [pc, #616]	; (8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800396a:	e001      	b.n	8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800396c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800397c:	d004      	beq.n	8003988 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 8099 	bne.w	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b02      	cmp	r3, #2
 8003990:	d107      	bne.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f925 	bl	8003bec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d107      	bne.n	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f9c8 	bl	8003d4c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d13a      	bne.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d035      	beq.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a7e      	ldr	r2, [pc, #504]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039da:	4b7e      	ldr	r3, [pc, #504]	; (8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039dc:	e001      	b.n	80039e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4979      	ldr	r1, [pc, #484]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039ea:	428b      	cmp	r3, r1
 80039ec:	d101      	bne.n	80039f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039ee:	4b79      	ldr	r3, [pc, #484]	; (8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039f0:	e001      	b.n	80039f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f043 0202 	orr.w	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fe88 	bl	800374c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	f040 80be 	bne.w	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 80b8 	beq.w	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a59      	ldr	r2, [pc, #356]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d101      	bne.n	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a6e:	4b59      	ldr	r3, [pc, #356]	; (8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a70:	e001      	b.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4954      	ldr	r1, [pc, #336]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a7e:	428b      	cmp	r3, r1
 8003a80:	d101      	bne.n	8003a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a82:	4b54      	ldr	r3, [pc, #336]	; (8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a84:	e001      	b.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a90:	2300      	movs	r3, #0
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f043 0204 	orr.w	r2, r3, #4
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff fe4a 	bl	800374c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ab8:	e084      	b.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d107      	bne.n	8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8be 	bl	8003c50 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f8fd 	bl	8003ce8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d12f      	bne.n	8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d02a      	beq.n	8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a2e      	ldr	r2, [pc, #184]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b1c:	4b2d      	ldr	r3, [pc, #180]	; (8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b1e:	e001      	b.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4929      	ldr	r1, [pc, #164]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b2c:	428b      	cmp	r3, r1
 8003b2e:	d101      	bne.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b30:	4b28      	ldr	r3, [pc, #160]	; (8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b32:	e001      	b.n	8003b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	f043 0202 	orr.w	r2, r3, #2
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff fdfa 	bl	800374c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d131      	bne.n	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02c      	beq.n	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a17      	ldr	r2, [pc, #92]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d101      	bne.n	8003b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b78:	e001      	b.n	8003b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4912      	ldr	r1, [pc, #72]	; (8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b86:	428b      	cmp	r3, r1
 8003b88:	d101      	bne.n	8003b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b8c:	e001      	b.n	8003b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ba6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff fdc5 	bl	800374c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bc2:	e000      	b.n	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bc4:	bf00      	nop
}
 8003bc6:	bf00      	nop
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40003800 	.word	0x40003800
 8003bd4:	40003400 	.word	0x40003400

08003bd8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	1c99      	adds	r1, r3, #2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6251      	str	r1, [r2, #36]	; 0x24
 8003bfe:	881a      	ldrh	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d113      	bne.n	8003c46 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ffc9 	bl	8003bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c99      	adds	r1, r3, #2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6251      	str	r1, [r2, #36]	; 0x24
 8003c62:	8819      	ldrh	r1, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1d      	ldr	r2, [pc, #116]	; (8003ce0 <I2SEx_TxISR_I2SExt+0x90>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d101      	bne.n	8003c72 <I2SEx_TxISR_I2SExt+0x22>
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <I2SEx_TxISR_I2SExt+0x94>)
 8003c70:	e001      	b.n	8003c76 <I2SEx_TxISR_I2SExt+0x26>
 8003c72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c76:	460a      	mov	r2, r1
 8003c78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d121      	bne.n	8003cd6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <I2SEx_TxISR_I2SExt+0x90>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <I2SEx_TxISR_I2SExt+0x50>
 8003c9c:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <I2SEx_TxISR_I2SExt+0x94>)
 8003c9e:	e001      	b.n	8003ca4 <I2SEx_TxISR_I2SExt+0x54>
 8003ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	490d      	ldr	r1, [pc, #52]	; (8003ce0 <I2SEx_TxISR_I2SExt+0x90>)
 8003cac:	428b      	cmp	r3, r1
 8003cae:	d101      	bne.n	8003cb4 <I2SEx_TxISR_I2SExt+0x64>
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <I2SEx_TxISR_I2SExt+0x94>)
 8003cb2:	e001      	b.n	8003cb8 <I2SEx_TxISR_I2SExt+0x68>
 8003cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cbc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff81 	bl	8003bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40003800 	.word	0x40003800
 8003ce4:	40003400 	.word	0x40003400

08003ce8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68d8      	ldr	r0, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	1c99      	adds	r1, r3, #2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d00:	b282      	uxth	r2, r0
 8003d02:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d113      	bne.n	8003d44 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d2a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ff4a 	bl	8003bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <I2SEx_RxISR_I2SExt+0x90>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d101      	bne.n	8003d62 <I2SEx_RxISR_I2SExt+0x16>
 8003d5e:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <I2SEx_RxISR_I2SExt+0x94>)
 8003d60:	e001      	b.n	8003d66 <I2SEx_RxISR_I2SExt+0x1a>
 8003d62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d66:	68d8      	ldr	r0, [r3, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	1c99      	adds	r1, r3, #2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d72:	b282      	uxth	r2, r0
 8003d74:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d121      	bne.n	8003dd2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <I2SEx_RxISR_I2SExt+0x90>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d101      	bne.n	8003d9c <I2SEx_RxISR_I2SExt+0x50>
 8003d98:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <I2SEx_RxISR_I2SExt+0x94>)
 8003d9a:	e001      	b.n	8003da0 <I2SEx_RxISR_I2SExt+0x54>
 8003d9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	490d      	ldr	r1, [pc, #52]	; (8003ddc <I2SEx_RxISR_I2SExt+0x90>)
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d101      	bne.n	8003db0 <I2SEx_RxISR_I2SExt+0x64>
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <I2SEx_RxISR_I2SExt+0x94>)
 8003dae:	e001      	b.n	8003db4 <I2SEx_RxISR_I2SExt+0x68>
 8003db0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003db4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003db8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff03 	bl	8003bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40003800 	.word	0x40003800
 8003de0:	40003400 	.word	0x40003400

08003de4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e264      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d075      	beq.n	8003eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e02:	4ba3      	ldr	r3, [pc, #652]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d00c      	beq.n	8003e28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e0e:	4ba0      	ldr	r3, [pc, #640]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d112      	bne.n	8003e40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e1a:	4b9d      	ldr	r3, [pc, #628]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e26:	d10b      	bne.n	8003e40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e28:	4b99      	ldr	r3, [pc, #612]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d05b      	beq.n	8003eec <HAL_RCC_OscConfig+0x108>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d157      	bne.n	8003eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e23f      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e48:	d106      	bne.n	8003e58 <HAL_RCC_OscConfig+0x74>
 8003e4a:	4b91      	ldr	r3, [pc, #580]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a90      	ldr	r2, [pc, #576]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e01d      	b.n	8003e94 <HAL_RCC_OscConfig+0xb0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x98>
 8003e62:	4b8b      	ldr	r3, [pc, #556]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a8a      	ldr	r2, [pc, #552]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4b88      	ldr	r3, [pc, #544]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a87      	ldr	r2, [pc, #540]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCC_OscConfig+0xb0>
 8003e7c:	4b84      	ldr	r3, [pc, #528]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a83      	ldr	r2, [pc, #524]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	4b81      	ldr	r3, [pc, #516]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a80      	ldr	r2, [pc, #512]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d013      	beq.n	8003ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fd f93e 	bl	800111c <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea4:	f7fd f93a 	bl	800111c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e204      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0xc0>
 8003ec2:	e014      	b.n	8003eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fd f92a 	bl	800111c <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fd f926 	bl	800111c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e1f0      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ede:	4b6c      	ldr	r3, [pc, #432]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0xe8>
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d063      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efa:	4b65      	ldr	r3, [pc, #404]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f06:	4b62      	ldr	r3, [pc, #392]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d11c      	bne.n	8003f4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f12:	4b5f      	ldr	r3, [pc, #380]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d116      	bne.n	8003f4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1e:	4b5c      	ldr	r3, [pc, #368]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_RCC_OscConfig+0x152>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d001      	beq.n	8003f36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e1c4      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b56      	ldr	r3, [pc, #344]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4952      	ldr	r1, [pc, #328]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4a:	e03a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d020      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f54:	4b4f      	ldr	r3, [pc, #316]	; (8004094 <HAL_RCC_OscConfig+0x2b0>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fd f8df 	bl	800111c <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fd f8db 	bl	800111c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e1a5      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f74:	4b46      	ldr	r3, [pc, #280]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f80:	4b43      	ldr	r3, [pc, #268]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4940      	ldr	r1, [pc, #256]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]
 8003f94:	e015      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	4b3f      	ldr	r3, [pc, #252]	; (8004094 <HAL_RCC_OscConfig+0x2b0>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd f8be 	bl	800111c <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fd f8ba 	bl	800111c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e184      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb6:	4b36      	ldr	r3, [pc, #216]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d030      	beq.n	8004030 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd6:	4b30      	ldr	r3, [pc, #192]	; (8004098 <HAL_RCC_OscConfig+0x2b4>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fd f89e 	bl	800111c <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe4:	f7fd f89a 	bl	800111c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e164      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ff6:	4b26      	ldr	r3, [pc, #152]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x200>
 8004002:	e015      	b.n	8004030 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004004:	4b24      	ldr	r3, [pc, #144]	; (8004098 <HAL_RCC_OscConfig+0x2b4>)
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400a:	f7fd f887 	bl	800111c <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004012:	f7fd f883 	bl	800111c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e14d      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004024:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8004026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1f0      	bne.n	8004012 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80a0 	beq.w	800417e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004042:	4b13      	ldr	r3, [pc, #76]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10f      	bne.n	800406e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	4a0e      	ldr	r2, [pc, #56]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8004058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405c:	6413      	str	r3, [r2, #64]	; 0x40
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004066:	60bb      	str	r3, [r7, #8]
 8004068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406a:	2301      	movs	r3, #1
 800406c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_RCC_OscConfig+0x2b8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d121      	bne.n	80040be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <HAL_RCC_OscConfig+0x2b8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a07      	ldr	r2, [pc, #28]	; (800409c <HAL_RCC_OscConfig+0x2b8>)
 8004080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004086:	f7fd f849 	bl	800111c <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408c:	e011      	b.n	80040b2 <HAL_RCC_OscConfig+0x2ce>
 800408e:	bf00      	nop
 8004090:	40023800 	.word	0x40023800
 8004094:	42470000 	.word	0x42470000
 8004098:	42470e80 	.word	0x42470e80
 800409c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a0:	f7fd f83c 	bl	800111c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e106      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	4b85      	ldr	r3, [pc, #532]	; (80042c8 <HAL_RCC_OscConfig+0x4e4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d106      	bne.n	80040d4 <HAL_RCC_OscConfig+0x2f0>
 80040c6:	4b81      	ldr	r3, [pc, #516]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	4a80      	ldr	r2, [pc, #512]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6713      	str	r3, [r2, #112]	; 0x70
 80040d2:	e01c      	b.n	800410e <HAL_RCC_OscConfig+0x32a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b05      	cmp	r3, #5
 80040da:	d10c      	bne.n	80040f6 <HAL_RCC_OscConfig+0x312>
 80040dc:	4b7b      	ldr	r3, [pc, #492]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	4a7a      	ldr	r2, [pc, #488]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 80040e2:	f043 0304 	orr.w	r3, r3, #4
 80040e6:	6713      	str	r3, [r2, #112]	; 0x70
 80040e8:	4b78      	ldr	r3, [pc, #480]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	4a77      	ldr	r2, [pc, #476]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	; 0x70
 80040f4:	e00b      	b.n	800410e <HAL_RCC_OscConfig+0x32a>
 80040f6:	4b75      	ldr	r3, [pc, #468]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	4a74      	ldr	r2, [pc, #464]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	6713      	str	r3, [r2, #112]	; 0x70
 8004102:	4b72      	ldr	r3, [pc, #456]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	4a71      	ldr	r2, [pc, #452]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 8004108:	f023 0304 	bic.w	r3, r3, #4
 800410c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d015      	beq.n	8004142 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004116:	f7fd f801 	bl	800111c <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fc fffd 	bl	800111c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0c5      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004134:	4b65      	ldr	r3, [pc, #404]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ee      	beq.n	800411e <HAL_RCC_OscConfig+0x33a>
 8004140:	e014      	b.n	800416c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004142:	f7fc ffeb 	bl	800111c <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004148:	e00a      	b.n	8004160 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7fc ffe7 	bl	800111c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f241 3288 	movw	r2, #5000	; 0x1388
 8004158:	4293      	cmp	r3, r2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e0af      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004160:	4b5a      	ldr	r3, [pc, #360]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ee      	bne.n	800414a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d105      	bne.n	800417e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004172:	4b56      	ldr	r3, [pc, #344]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	4a55      	ldr	r2, [pc, #340]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 8004178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 809b 	beq.w	80042be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004188:	4b50      	ldr	r3, [pc, #320]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b08      	cmp	r3, #8
 8004192:	d05c      	beq.n	800424e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d141      	bne.n	8004220 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419c:	4b4c      	ldr	r3, [pc, #304]	; (80042d0 <HAL_RCC_OscConfig+0x4ec>)
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a2:	f7fc ffbb 	bl	800111c <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041aa:	f7fc ffb7 	bl	800111c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e081      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041bc:	4b43      	ldr	r3, [pc, #268]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f0      	bne.n	80041aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	019b      	lsls	r3, r3, #6
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	3b01      	subs	r3, #1
 80041e2:	041b      	lsls	r3, r3, #16
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	061b      	lsls	r3, r3, #24
 80041ec:	4937      	ldr	r1, [pc, #220]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f2:	4b37      	ldr	r3, [pc, #220]	; (80042d0 <HAL_RCC_OscConfig+0x4ec>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fc ff90 	bl	800111c <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004200:	f7fc ff8c 	bl	800111c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e056      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004212:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x41c>
 800421e:	e04e      	b.n	80042be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004220:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <HAL_RCC_OscConfig+0x4ec>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004226:	f7fc ff79 	bl	800111c <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422e:	f7fc ff75 	bl	800111c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e03f      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004240:	4b22      	ldr	r3, [pc, #136]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCC_OscConfig+0x44a>
 800424c:	e037      	b.n	80042be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e032      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800425a:	4b1c      	ldr	r3, [pc, #112]	; (80042cc <HAL_RCC_OscConfig+0x4e8>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d028      	beq.n	80042ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d121      	bne.n	80042ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d11a      	bne.n	80042ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800428a:	4013      	ands	r3, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004290:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004292:	4293      	cmp	r3, r2
 8004294:	d111      	bne.n	80042ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	3b01      	subs	r3, #1
 80042a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d001      	beq.n	80042be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40007000 	.word	0x40007000
 80042cc:	40023800 	.word	0x40023800
 80042d0:	42470060 	.word	0x42470060

080042d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0cc      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042e8:	4b68      	ldr	r3, [pc, #416]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d90c      	bls.n	8004310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f6:	4b65      	ldr	r3, [pc, #404]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	4b63      	ldr	r3, [pc, #396]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0b8      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d020      	beq.n	800435e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004328:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4a58      	ldr	r2, [pc, #352]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004332:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	4a52      	ldr	r2, [pc, #328]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800434a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434c:	4b50      	ldr	r3, [pc, #320]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	494d      	ldr	r1, [pc, #308]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d044      	beq.n	80043f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d107      	bne.n	8004382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d119      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e07f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d003      	beq.n	8004392 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438e:	2b03      	cmp	r3, #3
 8004390:	d107      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004392:	4b3f      	ldr	r3, [pc, #252]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e06f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e067      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b2:	4b37      	ldr	r3, [pc, #220]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f023 0203 	bic.w	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	4934      	ldr	r1, [pc, #208]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c4:	f7fc feaa 	bl	800111c <HAL_GetTick>
 80043c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043cc:	f7fc fea6 	bl	800111c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e04f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	4b2b      	ldr	r3, [pc, #172]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 020c 	and.w	r2, r3, #12
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d1eb      	bne.n	80043cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f4:	4b25      	ldr	r3, [pc, #148]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d20c      	bcs.n	800441c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004402:	4b22      	ldr	r3, [pc, #136]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <HAL_RCC_ClockConfig+0x1b8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e032      	b.n	8004482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4916      	ldr	r1, [pc, #88]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	490e      	ldr	r1, [pc, #56]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800445a:	f000 f821 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800445e:	4602      	mov	r2, r0
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	490a      	ldr	r1, [pc, #40]	; (8004494 <HAL_RCC_ClockConfig+0x1c0>)
 800446c:	5ccb      	ldrb	r3, [r1, r3]
 800446e:	fa22 f303 	lsr.w	r3, r2, r3
 8004472:	4a09      	ldr	r2, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <HAL_RCC_ClockConfig+0x1c8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fc fe0a 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40023c00 	.word	0x40023c00
 8004490:	40023800 	.word	0x40023800
 8004494:	08008cfc 	.word	0x08008cfc
 8004498:	20000000 	.word	0x20000000
 800449c:	20000004 	.word	0x20000004

080044a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	2300      	movs	r3, #0
 80044b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b8:	4b67      	ldr	r3, [pc, #412]	; (8004658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d00d      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x40>
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	f200 80bd 	bhi.w	8004644 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq+0x34>
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d003      	beq.n	80044da <HAL_RCC_GetSysClockFreq+0x3a>
 80044d2:	e0b7      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d4:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044d6:	60bb      	str	r3, [r7, #8]
       break;
 80044d8:	e0b7      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044da:	4b61      	ldr	r3, [pc, #388]	; (8004660 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044dc:	60bb      	str	r3, [r7, #8]
      break;
 80044de:	e0b4      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044e0:	4b5d      	ldr	r3, [pc, #372]	; (8004658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ea:	4b5b      	ldr	r3, [pc, #364]	; (8004658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d04d      	beq.n	8004592 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f6:	4b58      	ldr	r3, [pc, #352]	; (8004658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	099b      	lsrs	r3, r3, #6
 80044fc:	461a      	mov	r2, r3
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004506:	f04f 0100 	mov.w	r1, #0
 800450a:	ea02 0800 	and.w	r8, r2, r0
 800450e:	ea03 0901 	and.w	r9, r3, r1
 8004512:	4640      	mov	r0, r8
 8004514:	4649      	mov	r1, r9
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	014b      	lsls	r3, r1, #5
 8004520:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004524:	0142      	lsls	r2, r0, #5
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	ebb0 0008 	subs.w	r0, r0, r8
 800452e:	eb61 0109 	sbc.w	r1, r1, r9
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	018b      	lsls	r3, r1, #6
 800453c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004540:	0182      	lsls	r2, r0, #6
 8004542:	1a12      	subs	r2, r2, r0
 8004544:	eb63 0301 	sbc.w	r3, r3, r1
 8004548:	f04f 0000 	mov.w	r0, #0
 800454c:	f04f 0100 	mov.w	r1, #0
 8004550:	00d9      	lsls	r1, r3, #3
 8004552:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004556:	00d0      	lsls	r0, r2, #3
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	eb12 0208 	adds.w	r2, r2, r8
 8004560:	eb43 0309 	adc.w	r3, r3, r9
 8004564:	f04f 0000 	mov.w	r0, #0
 8004568:	f04f 0100 	mov.w	r1, #0
 800456c:	0259      	lsls	r1, r3, #9
 800456e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004572:	0250      	lsls	r0, r2, #9
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	461a      	mov	r2, r3
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	f7fb fe7c 	bl	8000280 <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4613      	mov	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e04a      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004592:	4b31      	ldr	r3, [pc, #196]	; (8004658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	099b      	lsrs	r3, r3, #6
 8004598:	461a      	mov	r2, r3
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045a2:	f04f 0100 	mov.w	r1, #0
 80045a6:	ea02 0400 	and.w	r4, r2, r0
 80045aa:	ea03 0501 	and.w	r5, r3, r1
 80045ae:	4620      	mov	r0, r4
 80045b0:	4629      	mov	r1, r5
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	014b      	lsls	r3, r1, #5
 80045bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045c0:	0142      	lsls	r2, r0, #5
 80045c2:	4610      	mov	r0, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	1b00      	subs	r0, r0, r4
 80045c8:	eb61 0105 	sbc.w	r1, r1, r5
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	018b      	lsls	r3, r1, #6
 80045d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045da:	0182      	lsls	r2, r0, #6
 80045dc:	1a12      	subs	r2, r2, r0
 80045de:	eb63 0301 	sbc.w	r3, r3, r1
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f04f 0100 	mov.w	r1, #0
 80045ea:	00d9      	lsls	r1, r3, #3
 80045ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045f0:	00d0      	lsls	r0, r2, #3
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	1912      	adds	r2, r2, r4
 80045f8:	eb45 0303 	adc.w	r3, r5, r3
 80045fc:	f04f 0000 	mov.w	r0, #0
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	0299      	lsls	r1, r3, #10
 8004606:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800460a:	0290      	lsls	r0, r2, #10
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	461a      	mov	r2, r3
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	f7fb fe30 	bl	8000280 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4613      	mov	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	0c1b      	lsrs	r3, r3, #16
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	3301      	adds	r3, #1
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	60bb      	str	r3, [r7, #8]
      break;
 8004642:	e002      	b.n	800464a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004646:	60bb      	str	r3, [r7, #8]
      break;
 8004648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800464a:	68bb      	ldr	r3, [r7, #8]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	00f42400 	.word	0x00f42400
 8004660:	007a1200 	.word	0x007a1200

08004664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004668:	4b03      	ldr	r3, [pc, #12]	; (8004678 <HAL_RCC_GetHCLKFreq+0x14>)
 800466a:	681b      	ldr	r3, [r3, #0]
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000000 	.word	0x20000000

0800467c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004680:	f7ff fff0 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 8004684:	4602      	mov	r2, r0
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	0a9b      	lsrs	r3, r3, #10
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	4903      	ldr	r1, [pc, #12]	; (80046a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004692:	5ccb      	ldrb	r3, [r1, r3]
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40023800 	.word	0x40023800
 80046a0:	08008d0c 	.word	0x08008d0c

080046a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046a8:	f7ff ffdc 	bl	8004664 <HAL_RCC_GetHCLKFreq>
 80046ac:	4602      	mov	r2, r0
 80046ae:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	0b5b      	lsrs	r3, r3, #13
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	4903      	ldr	r1, [pc, #12]	; (80046c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ba:	5ccb      	ldrb	r3, [r1, r3]
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40023800 	.word	0x40023800
 80046c8:	08008d0c 	.word	0x08008d0c

080046cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d105      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d035      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046f4:	4b62      	ldr	r3, [pc, #392]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046fa:	f7fc fd0f 	bl	800111c <HAL_GetTick>
 80046fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004702:	f7fc fd0b 	bl	800111c <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e0b0      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004714:	4b5b      	ldr	r3, [pc, #364]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f0      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	019a      	lsls	r2, r3, #6
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	071b      	lsls	r3, r3, #28
 800472c:	4955      	ldr	r1, [pc, #340]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004734:	4b52      	ldr	r3, [pc, #328]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800473a:	f7fc fcef 	bl	800111c <HAL_GetTick>
 800473e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004742:	f7fc fceb 	bl	800111c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e090      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004754:	4b4b      	ldr	r3, [pc, #300]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8083 	beq.w	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	4b44      	ldr	r3, [pc, #272]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	4a43      	ldr	r2, [pc, #268]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477c:	6413      	str	r3, [r2, #64]	; 0x40
 800477e:	4b41      	ldr	r3, [pc, #260]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800478a:	4b3f      	ldr	r3, [pc, #252]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a3e      	ldr	r2, [pc, #248]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004794:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004796:	f7fc fcc1 	bl	800111c <HAL_GetTick>
 800479a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800479c:	e008      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800479e:	f7fc fcbd 	bl	800111c <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e062      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047b0:	4b35      	ldr	r3, [pc, #212]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047bc:	4b31      	ldr	r3, [pc, #196]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d02f      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d028      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047da:	4b2a      	ldr	r3, [pc, #168]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e4:	4b29      	ldr	r3, [pc, #164]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047e6:	2201      	movs	r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ea:	4b28      	ldr	r3, [pc, #160]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047f0:	4a24      	ldr	r2, [pc, #144]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047f6:	4b23      	ldr	r3, [pc, #140]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d114      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004802:	f7fc fc8b 	bl	800111c <HAL_GetTick>
 8004806:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004808:	e00a      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fc fc87 	bl	800111c <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f241 3288 	movw	r2, #5000	; 0x1388
 8004818:	4293      	cmp	r3, r2
 800481a:	d901      	bls.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e02a      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	4b18      	ldr	r3, [pc, #96]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0ee      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004838:	d10d      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800484a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484e:	490d      	ldr	r1, [pc, #52]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004850:	4313      	orrs	r3, r2
 8004852:	608b      	str	r3, [r1, #8]
 8004854:	e005      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800485c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004860:	6093      	str	r3, [r2, #8]
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004864:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486e:	4905      	ldr	r1, [pc, #20]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004870:	4313      	orrs	r3, r2
 8004872:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	42470068 	.word	0x42470068
 8004884:	40023800 	.word	0x40023800
 8004888:	40007000 	.word	0x40007000
 800488c:	42470e40 	.word	0x42470e40

08004890 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d13e      	bne.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048ae:	4b23      	ldr	r3, [pc, #140]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d12f      	bne.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048c4:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048c6:	617b      	str	r3, [r7, #20]
          break;
 80048c8:	e02f      	b.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048ca:	4b1c      	ldr	r3, [pc, #112]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d6:	d108      	bne.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048d8:	4b18      	ldr	r3, [pc, #96]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e0:	4a18      	ldr	r2, [pc, #96]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	e007      	b.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048ea:	4b14      	ldr	r3, [pc, #80]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f2:	4a15      	ldr	r2, [pc, #84]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048fa:	4b10      	ldr	r3, [pc, #64]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004900:	099b      	lsrs	r3, r3, #6
 8004902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800490e:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004914:	0f1b      	lsrs	r3, r3, #28
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004920:	617b      	str	r3, [r7, #20]
          break;
 8004922:	e002      	b.n	800492a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
          break;
 8004928:	bf00      	nop
        }
      }
      break;
 800492a:	bf00      	nop
    }
  }
  return frequency;
 800492c:	697b      	ldr	r3, [r7, #20]
}
 800492e:	4618      	mov	r0, r3
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	00bb8000 	.word	0x00bb8000
 8004944:	007a1200 	.word	0x007a1200
 8004948:	00f42400 	.word	0x00f42400

0800494c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e07b      	b.n	8004a56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	2b00      	cmp	r3, #0
 8004964:	d108      	bne.n	8004978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496e:	d009      	beq.n	8004984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	61da      	str	r2, [r3, #28]
 8004976:	e005      	b.n	8004984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fc fa20 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a08:	ea42 0103 	orr.w	r1, r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	0c1b      	lsrs	r3, r3, #16
 8004a22:	f003 0104 	and.w	r1, r3, #4
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	f003 0210 	and.w	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e03f      	b.n	8004af0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fc f9f5 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2224      	movs	r2, #36	; 0x24
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aa0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f928 	bl	8004cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ab6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d17c      	bne.n	8004c12 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <HAL_UART_Transmit+0x2c>
 8004b1e:	88fb      	ldrh	r3, [r7, #6]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e075      	b.n	8004c14 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_UART_Transmit+0x3e>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e06e      	b.n	8004c14 <HAL_UART_Transmit+0x11c>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2221      	movs	r2, #33	; 0x21
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b4c:	f7fc fae6 	bl	800111c <HAL_GetTick>
 8004b50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	88fa      	ldrh	r2, [r7, #6]
 8004b56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b66:	d108      	bne.n	8004b7a <HAL_UART_Transmit+0x82>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	61bb      	str	r3, [r7, #24]
 8004b78:	e003      	b.n	8004b82 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b8a:	e02a      	b.n	8004be2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	2180      	movs	r1, #128	; 0x80
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f840 	bl	8004c1c <UART_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e036      	b.n	8004c14 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	e007      	b.n	8004bd4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	781a      	ldrb	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1cf      	bne.n	8004b8c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2140      	movs	r1, #64	; 0x40
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f810 	bl	8004c1c <UART_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e006      	b.n	8004c14 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e000      	b.n	8004c14 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
  }
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3720      	adds	r7, #32
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b090      	sub	sp, #64	; 0x40
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2c:	e050      	b.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d04c      	beq.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8004c3c:	f7fc fa6e 	bl	800111c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d241      	bcs.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	330c      	adds	r3, #12
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c6c:	637a      	str	r2, [r7, #52]	; 0x34
 8004c6e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e5      	bne.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3314      	adds	r3, #20
 8004c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3314      	adds	r3, #20
 8004c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ca0:	623a      	str	r2, [r7, #32]
 8004ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	69f9      	ldr	r1, [r7, #28]
 8004ca6:	6a3a      	ldr	r2, [r7, #32]
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e5      	bne.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e00f      	b.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d09f      	beq.n	8004c2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3740      	adds	r7, #64	; 0x40
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfc:	b09f      	sub	sp, #124	; 0x7c
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0e:	68d9      	ldr	r1, [r3, #12]
 8004d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	ea40 0301 	orr.w	r3, r0, r1
 8004d18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d3c:	f021 010c 	bic.w	r1, r1, #12
 8004d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d46:	430b      	orrs	r3, r1
 8004d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d56:	6999      	ldr	r1, [r3, #24]
 8004d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	ea40 0301 	orr.w	r3, r0, r1
 8004d60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4bc5      	ldr	r3, [pc, #788]	; (800507c <UART_SetConfig+0x384>)
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d004      	beq.n	8004d76 <UART_SetConfig+0x7e>
 8004d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	4bc3      	ldr	r3, [pc, #780]	; (8005080 <UART_SetConfig+0x388>)
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d103      	bne.n	8004d7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d76:	f7ff fc95 	bl	80046a4 <HAL_RCC_GetPCLK2Freq>
 8004d7a:	6778      	str	r0, [r7, #116]	; 0x74
 8004d7c:	e002      	b.n	8004d84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d7e:	f7ff fc7d 	bl	800467c <HAL_RCC_GetPCLK1Freq>
 8004d82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d8c:	f040 80b6 	bne.w	8004efc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d92:	461c      	mov	r4, r3
 8004d94:	f04f 0500 	mov.w	r5, #0
 8004d98:	4622      	mov	r2, r4
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	1891      	adds	r1, r2, r2
 8004d9e:	6439      	str	r1, [r7, #64]	; 0x40
 8004da0:	415b      	adcs	r3, r3
 8004da2:	647b      	str	r3, [r7, #68]	; 0x44
 8004da4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004da8:	1912      	adds	r2, r2, r4
 8004daa:	eb45 0303 	adc.w	r3, r5, r3
 8004dae:	f04f 0000 	mov.w	r0, #0
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	00d9      	lsls	r1, r3, #3
 8004db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dbc:	00d0      	lsls	r0, r2, #3
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	1911      	adds	r1, r2, r4
 8004dc4:	6639      	str	r1, [r7, #96]	; 0x60
 8004dc6:	416b      	adcs	r3, r5
 8004dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8004dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	1891      	adds	r1, r2, r2
 8004dd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dd8:	415b      	adcs	r3, r3
 8004dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004de0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004de4:	f7fb fa4c 	bl	8000280 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4ba5      	ldr	r3, [pc, #660]	; (8005084 <UART_SetConfig+0x38c>)
 8004dee:	fba3 2302 	umull	r2, r3, r3, r2
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	011e      	lsls	r6, r3, #4
 8004df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df8:	461c      	mov	r4, r3
 8004dfa:	f04f 0500 	mov.w	r5, #0
 8004dfe:	4622      	mov	r2, r4
 8004e00:	462b      	mov	r3, r5
 8004e02:	1891      	adds	r1, r2, r2
 8004e04:	6339      	str	r1, [r7, #48]	; 0x30
 8004e06:	415b      	adcs	r3, r3
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e0e:	1912      	adds	r2, r2, r4
 8004e10:	eb45 0303 	adc.w	r3, r5, r3
 8004e14:	f04f 0000 	mov.w	r0, #0
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	00d9      	lsls	r1, r3, #3
 8004e1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e22:	00d0      	lsls	r0, r2, #3
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	1911      	adds	r1, r2, r4
 8004e2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e2c:	416b      	adcs	r3, r5
 8004e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	461a      	mov	r2, r3
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	1891      	adds	r1, r2, r2
 8004e3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e3e:	415b      	adcs	r3, r3
 8004e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004e4a:	f7fb fa19 	bl	8000280 <__aeabi_uldivmod>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4b8c      	ldr	r3, [pc, #560]	; (8005084 <UART_SetConfig+0x38c>)
 8004e54:	fba3 1302 	umull	r1, r3, r3, r2
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	2164      	movs	r1, #100	; 0x64
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	3332      	adds	r3, #50	; 0x32
 8004e66:	4a87      	ldr	r2, [pc, #540]	; (8005084 <UART_SetConfig+0x38c>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e74:	441e      	add	r6, r3
 8004e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f04f 0100 	mov.w	r1, #0
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	1894      	adds	r4, r2, r2
 8004e84:	623c      	str	r4, [r7, #32]
 8004e86:	415b      	adcs	r3, r3
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e8e:	1812      	adds	r2, r2, r0
 8004e90:	eb41 0303 	adc.w	r3, r1, r3
 8004e94:	f04f 0400 	mov.w	r4, #0
 8004e98:	f04f 0500 	mov.w	r5, #0
 8004e9c:	00dd      	lsls	r5, r3, #3
 8004e9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ea2:	00d4      	lsls	r4, r2, #3
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	462b      	mov	r3, r5
 8004ea8:	1814      	adds	r4, r2, r0
 8004eaa:	653c      	str	r4, [r7, #80]	; 0x50
 8004eac:	414b      	adcs	r3, r1
 8004eae:	657b      	str	r3, [r7, #84]	; 0x54
 8004eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	1891      	adds	r1, r2, r2
 8004ebc:	61b9      	str	r1, [r7, #24]
 8004ebe:	415b      	adcs	r3, r3
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ec6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004eca:	f7fb f9d9 	bl	8000280 <__aeabi_uldivmod>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4b6c      	ldr	r3, [pc, #432]	; (8005084 <UART_SetConfig+0x38c>)
 8004ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	2164      	movs	r1, #100	; 0x64
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	3332      	adds	r3, #50	; 0x32
 8004ee6:	4a67      	ldr	r2, [pc, #412]	; (8005084 <UART_SetConfig+0x38c>)
 8004ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	f003 0207 	and.w	r2, r3, #7
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4432      	add	r2, r6
 8004ef8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004efa:	e0b9      	b.n	8005070 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004efe:	461c      	mov	r4, r3
 8004f00:	f04f 0500 	mov.w	r5, #0
 8004f04:	4622      	mov	r2, r4
 8004f06:	462b      	mov	r3, r5
 8004f08:	1891      	adds	r1, r2, r2
 8004f0a:	6139      	str	r1, [r7, #16]
 8004f0c:	415b      	adcs	r3, r3
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f14:	1912      	adds	r2, r2, r4
 8004f16:	eb45 0303 	adc.w	r3, r5, r3
 8004f1a:	f04f 0000 	mov.w	r0, #0
 8004f1e:	f04f 0100 	mov.w	r1, #0
 8004f22:	00d9      	lsls	r1, r3, #3
 8004f24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f28:	00d0      	lsls	r0, r2, #3
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	eb12 0804 	adds.w	r8, r2, r4
 8004f32:	eb43 0905 	adc.w	r9, r3, r5
 8004f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f04f 0100 	mov.w	r1, #0
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	008b      	lsls	r3, r1, #2
 8004f4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f4e:	0082      	lsls	r2, r0, #2
 8004f50:	4640      	mov	r0, r8
 8004f52:	4649      	mov	r1, r9
 8004f54:	f7fb f994 	bl	8000280 <__aeabi_uldivmod>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4b49      	ldr	r3, [pc, #292]	; (8005084 <UART_SetConfig+0x38c>)
 8004f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	011e      	lsls	r6, r3, #4
 8004f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f04f 0100 	mov.w	r1, #0
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	1894      	adds	r4, r2, r2
 8004f74:	60bc      	str	r4, [r7, #8]
 8004f76:	415b      	adcs	r3, r3
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f7e:	1812      	adds	r2, r2, r0
 8004f80:	eb41 0303 	adc.w	r3, r1, r3
 8004f84:	f04f 0400 	mov.w	r4, #0
 8004f88:	f04f 0500 	mov.w	r5, #0
 8004f8c:	00dd      	lsls	r5, r3, #3
 8004f8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f92:	00d4      	lsls	r4, r2, #3
 8004f94:	4622      	mov	r2, r4
 8004f96:	462b      	mov	r3, r5
 8004f98:	1814      	adds	r4, r2, r0
 8004f9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f9c:	414b      	adcs	r3, r1
 8004f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f04f 0100 	mov.w	r1, #0
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	008b      	lsls	r3, r1, #2
 8004fb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fb8:	0082      	lsls	r2, r0, #2
 8004fba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004fbe:	f7fb f95f 	bl	8000280 <__aeabi_uldivmod>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4b2f      	ldr	r3, [pc, #188]	; (8005084 <UART_SetConfig+0x38c>)
 8004fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fcc:	095b      	lsrs	r3, r3, #5
 8004fce:	2164      	movs	r1, #100	; 0x64
 8004fd0:	fb01 f303 	mul.w	r3, r1, r3
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	3332      	adds	r3, #50	; 0x32
 8004fda:	4a2a      	ldr	r2, [pc, #168]	; (8005084 <UART_SetConfig+0x38c>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe6:	441e      	add	r6, r3
 8004fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fea:	4618      	mov	r0, r3
 8004fec:	f04f 0100 	mov.w	r1, #0
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	1894      	adds	r4, r2, r2
 8004ff6:	603c      	str	r4, [r7, #0]
 8004ff8:	415b      	adcs	r3, r3
 8004ffa:	607b      	str	r3, [r7, #4]
 8004ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005000:	1812      	adds	r2, r2, r0
 8005002:	eb41 0303 	adc.w	r3, r1, r3
 8005006:	f04f 0400 	mov.w	r4, #0
 800500a:	f04f 0500 	mov.w	r5, #0
 800500e:	00dd      	lsls	r5, r3, #3
 8005010:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005014:	00d4      	lsls	r4, r2, #3
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	eb12 0a00 	adds.w	sl, r2, r0
 800501e:	eb43 0b01 	adc.w	fp, r3, r1
 8005022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	4618      	mov	r0, r3
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	008b      	lsls	r3, r1, #2
 8005036:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800503a:	0082      	lsls	r2, r0, #2
 800503c:	4650      	mov	r0, sl
 800503e:	4659      	mov	r1, fp
 8005040:	f7fb f91e 	bl	8000280 <__aeabi_uldivmod>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <UART_SetConfig+0x38c>)
 800504a:	fba3 1302 	umull	r1, r3, r3, r2
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	2164      	movs	r1, #100	; 0x64
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	3332      	adds	r3, #50	; 0x32
 800505c:	4a09      	ldr	r2, [pc, #36]	; (8005084 <UART_SetConfig+0x38c>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	f003 020f 	and.w	r2, r3, #15
 8005068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4432      	add	r2, r6
 800506e:	609a      	str	r2, [r3, #8]
}
 8005070:	bf00      	nop
 8005072:	377c      	adds	r7, #124	; 0x7c
 8005074:	46bd      	mov	sp, r7
 8005076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507a:	bf00      	nop
 800507c:	40011000 	.word	0x40011000
 8005080:	40011400 	.word	0x40011400
 8005084:	51eb851f 	.word	0x51eb851f

08005088 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005088:	b084      	sub	sp, #16
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	f107 001c 	add.w	r0, r7, #28
 8005096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	2b01      	cmp	r3, #1
 800509e:	d122      	bne.n	80050e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d105      	bne.n	80050da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f9a0 	bl	8005420 <USB_CoreReset>
 80050e0:	4603      	mov	r3, r0
 80050e2:	73fb      	strb	r3, [r7, #15]
 80050e4:	e01a      	b.n	800511c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f994 	bl	8005420 <USB_CoreReset>
 80050f8:	4603      	mov	r3, r0
 80050fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
 800510e:	e005      	b.n	800511c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10b      	bne.n	800513a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f043 0206 	orr.w	r2, r3, #6
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f043 0220 	orr.w	r2, r3, #32
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800513a:	7bfb      	ldrb	r3, [r7, #15]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005146:	b004      	add	sp, #16
 8005148:	4770      	bx	lr

0800514a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f043 0201 	orr.w	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f023 0201 	bic.w	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d115      	bne.n	80051dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051bc:	2001      	movs	r0, #1
 80051be:	f7fb ffb9 	bl	8001134 <HAL_Delay>
      ms++;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	3301      	adds	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f91a 	bl	8005402 <USB_GetMode>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d01e      	beq.n	8005212 <USB_SetCurrentMode+0x84>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b31      	cmp	r3, #49	; 0x31
 80051d8:	d9f0      	bls.n	80051bc <USB_SetCurrentMode+0x2e>
 80051da:	e01a      	b.n	8005212 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d115      	bne.n	800520e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051ee:	2001      	movs	r0, #1
 80051f0:	f7fb ffa0 	bl	8001134 <HAL_Delay>
      ms++;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3301      	adds	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f901 	bl	8005402 <USB_GetMode>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <USB_SetCurrentMode+0x84>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b31      	cmp	r3, #49	; 0x31
 800520a:	d9f0      	bls.n	80051ee <USB_SetCurrentMode+0x60>
 800520c:	e001      	b.n	8005212 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e005      	b.n	800521e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b32      	cmp	r3, #50	; 0x32
 8005216:	d101      	bne.n	800521c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	019b      	lsls	r3, r3, #6
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <USB_FlushTxFifo+0x44>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e006      	b.n	8005260 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b20      	cmp	r3, #32
 800525c:	d0f1      	beq.n	8005242 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	00030d40 	.word	0x00030d40

08005270 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2210      	movs	r2, #16
 8005280:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3301      	adds	r3, #1
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	4a08      	ldr	r2, [pc, #32]	; (80052ac <USB_FlushRxFifo+0x3c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e006      	b.n	80052a0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b10      	cmp	r3, #16
 800529c:	d0f1      	beq.n	8005282 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	00030d40 	.word	0x00030d40

080052b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b089      	sub	sp, #36	; 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4611      	mov	r1, r2
 80052bc:	461a      	mov	r2, r3
 80052be:	460b      	mov	r3, r1
 80052c0:	71fb      	strb	r3, [r7, #7]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d123      	bne.n	800531e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052d6:	88bb      	ldrh	r3, [r7, #4]
 80052d8:	3303      	adds	r3, #3
 80052da:	089b      	lsrs	r3, r3, #2
 80052dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052de:	2300      	movs	r3, #0
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	e018      	b.n	8005316 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	031a      	lsls	r2, r3, #12
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f0:	461a      	mov	r2, r3
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	3301      	adds	r3, #1
 80052fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	3301      	adds	r3, #1
 8005302:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	3301      	adds	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	3301      	adds	r3, #1
 800530e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	3301      	adds	r3, #1
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	429a      	cmp	r2, r3
 800531c:	d3e2      	bcc.n	80052e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3724      	adds	r7, #36	; 0x24
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800532c:	b480      	push	{r7}
 800532e:	b08b      	sub	sp, #44	; 0x2c
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	4613      	mov	r3, r2
 8005338:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	089b      	lsrs	r3, r3, #2
 8005346:	b29b      	uxth	r3, r3
 8005348:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005352:	2300      	movs	r3, #0
 8005354:	623b      	str	r3, [r7, #32]
 8005356:	e014      	b.n	8005382 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	601a      	str	r2, [r3, #0]
    pDest++;
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	3301      	adds	r3, #1
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	3301      	adds	r3, #1
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	3301      	adds	r3, #1
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	3301      	adds	r3, #1
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	3301      	adds	r3, #1
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	6a3a      	ldr	r2, [r7, #32]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	429a      	cmp	r2, r3
 8005388:	d3e6      	bcc.n	8005358 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800538a:	8bfb      	ldrh	r3, [r7, #30]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01e      	beq.n	80053ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800539a:	461a      	mov	r2, r3
 800539c:	f107 0310 	add.w	r3, r7, #16
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	701a      	strb	r2, [r3, #0]
      i++;
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	3301      	adds	r3, #1
 80053ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	3301      	adds	r3, #1
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80053c2:	8bfb      	ldrh	r3, [r7, #30]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053c8:	8bfb      	ldrh	r3, [r7, #30]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ea      	bne.n	80053a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	372c      	adds	r7, #44	; 0x2c
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4013      	ands	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053f4:	68fb      	ldr	r3, [r7, #12]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 0301 	and.w	r3, r3, #1
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3301      	adds	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	4a13      	ldr	r2, [pc, #76]	; (8005480 <USB_CoreReset+0x60>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d901      	bls.n	800543c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e01a      	b.n	8005472 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	2b00      	cmp	r3, #0
 8005442:	daf3      	bge.n	800542c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f043 0201 	orr.w	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	4a09      	ldr	r2, [pc, #36]	; (8005480 <USB_CoreReset+0x60>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d901      	bls.n	8005464 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e006      	b.n	8005472 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b01      	cmp	r3, #1
 800546e:	d0f1      	beq.n	8005454 <USB_CoreReset+0x34>

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	00030d40 	.word	0x00030d40

08005484 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005484:	b084      	sub	sp, #16
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	f107 001c 	add.w	r0, r7, #28
 8005492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054a0:	461a      	mov	r2, r3
 80054a2:	2300      	movs	r3, #0
 80054a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d10a      	bne.n	80054f2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054ea:	f043 0304 	orr.w	r3, r3, #4
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	e014      	b.n	800551c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005500:	f023 0304 	bic.w	r3, r3, #4
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	e009      	b.n	800551c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005516:	f023 0304 	bic.w	r3, r3, #4
 800551a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800551c:	2110      	movs	r1, #16
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff fe82 	bl	8005228 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff fea3 	bl	8005270 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	e015      	b.n	800555c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553c:	461a      	mov	r2, r3
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4413      	add	r3, r2
 800554c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005550:	461a      	mov	r2, r3
 8005552:	2300      	movs	r3, #0
 8005554:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3301      	adds	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	429a      	cmp	r2, r3
 8005562:	d3e5      	bcc.n	8005530 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f04f 32ff 	mov.w	r2, #4294967295
 8005570:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005584:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a13      	ldr	r2, [pc, #76]	; (80055d8 <USB_HostInit+0x154>)
 800558a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a13      	ldr	r2, [pc, #76]	; (80055dc <USB_HostInit+0x158>)
 8005590:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005594:	e009      	b.n	80055aa <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2280      	movs	r2, #128	; 0x80
 800559a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a10      	ldr	r2, [pc, #64]	; (80055e0 <USB_HostInit+0x15c>)
 80055a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a0f      	ldr	r2, [pc, #60]	; (80055e4 <USB_HostInit+0x160>)
 80055a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d105      	bne.n	80055bc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	f043 0210 	orr.w	r2, r3, #16
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699a      	ldr	r2, [r3, #24]
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <USB_HostInit+0x164>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055d4:	b004      	add	sp, #16
 80055d6:	4770      	bx	lr
 80055d8:	01000200 	.word	0x01000200
 80055dc:	00e00300 	.word	0x00e00300
 80055e0:	00600080 	.word	0x00600080
 80055e4:	004000e0 	.word	0x004000e0
 80055e8:	a3200008 	.word	0xa3200008

080055ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800560a:	f023 0303 	bic.w	r3, r3, #3
 800560e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	68f9      	ldr	r1, [r7, #12]
 8005620:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005624:	4313      	orrs	r3, r2
 8005626:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d107      	bne.n	800563e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005634:	461a      	mov	r2, r3
 8005636:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800563a:	6053      	str	r3, [r2, #4]
 800563c:	e009      	b.n	8005652 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800563e:	78fb      	ldrb	r3, [r7, #3]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d106      	bne.n	8005652 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800564a:	461a      	mov	r2, r3
 800564c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005650:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005680:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800568a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005690:	2064      	movs	r0, #100	; 0x64
 8005692:	f7fb fd4f 	bl	8001134 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800569e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80056a4:	200a      	movs	r0, #10
 80056a6:	f7fb fd45 	bl	8001134 <HAL_Delay>

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d109      	bne.n	80056f8 <USB_DriveVbus+0x44>
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d106      	bne.n	80056f8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056f6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005702:	d109      	bne.n	8005718 <USB_DriveVbus+0x64>
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005712:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005716:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	0c5b      	lsrs	r3, r3, #17
 8005744:	f003 0303 	and.w	r3, r3, #3
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	b29b      	uxth	r3, r3
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	4608      	mov	r0, r1
 8005782:	4611      	mov	r1, r2
 8005784:	461a      	mov	r2, r3
 8005786:	4603      	mov	r3, r0
 8005788:	70fb      	strb	r3, [r7, #3]
 800578a:	460b      	mov	r3, r1
 800578c:	70bb      	strb	r3, [r7, #2]
 800578e:	4613      	mov	r3, r2
 8005790:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a6:	461a      	mov	r2, r3
 80057a8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80057ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d87e      	bhi.n	80058b4 <USB_HC_Init+0x13c>
 80057b6:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <USB_HC_Init+0x44>)
 80057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057bc:	080057cd 	.word	0x080057cd
 80057c0:	08005877 	.word	0x08005877
 80057c4:	080057cd 	.word	0x080057cd
 80057c8:	08005839 	.word	0x08005839
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d8:	461a      	mov	r2, r3
 80057da:	f240 439d 	movw	r3, #1181	; 0x49d
 80057de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80057e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	da10      	bge.n	800580a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	78fa      	ldrb	r2, [r7, #3]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005806:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005808:	e057      	b.n	80058ba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	2b00      	cmp	r3, #0
 8005814:	d051      	beq.n	80058ba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4413      	add	r3, r2
 800581e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	78fa      	ldrb	r2, [r7, #3]
 8005826:	0151      	lsls	r1, r2, #5
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	440a      	add	r2, r1
 800582c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005830:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005834:	60d3      	str	r3, [r2, #12]
      break;
 8005836:	e040      	b.n	80058ba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4413      	add	r3, r2
 8005840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005844:	461a      	mov	r2, r3
 8005846:	f240 639d 	movw	r3, #1693	; 0x69d
 800584a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800584c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005850:	2b00      	cmp	r3, #0
 8005852:	da34      	bge.n	80058be <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	78fa      	ldrb	r2, [r7, #3]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	440a      	add	r2, r1
 800586a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800586e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005872:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005874:	e023      	b.n	80058be <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4413      	add	r3, r2
 800587e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005882:	461a      	mov	r2, r3
 8005884:	f240 2325 	movw	r3, #549	; 0x225
 8005888:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800588a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800588e:	2b00      	cmp	r3, #0
 8005890:	da17      	bge.n	80058c2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005892:	78fb      	ldrb	r3, [r7, #3]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4413      	add	r3, r2
 800589a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	78fa      	ldrb	r2, [r7, #3]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80058b0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80058b2:	e006      	b.n	80058c2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	77fb      	strb	r3, [r7, #31]
      break;
 80058b8:	e004      	b.n	80058c4 <USB_HC_Init+0x14c>
      break;
 80058ba:	bf00      	nop
 80058bc:	e002      	b.n	80058c4 <USB_HC_Init+0x14c>
      break;
 80058be:	bf00      	nop
 80058c0:	e000      	b.n	80058c4 <USB_HC_Init+0x14c>
      break;
 80058c2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	f003 030f 	and.w	r3, r3, #15
 80058d2:	2101      	movs	r1, #1
 80058d4:	fa01 f303 	lsl.w	r3, r1, r3
 80058d8:	6939      	ldr	r1, [r7, #16]
 80058da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058de:	4313      	orrs	r3, r2
 80058e0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80058ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	da03      	bge.n	80058fe <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80058f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	e001      	b.n	8005902 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff ff0f 	bl	8005726 <USB_GetHostSpeed>
 8005908:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800590a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800590e:	2b02      	cmp	r3, #2
 8005910:	d106      	bne.n	8005920 <USB_HC_Init+0x1a8>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d003      	beq.n	8005920 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e001      	b.n	8005924 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005924:	787b      	ldrb	r3, [r7, #1]
 8005926:	059b      	lsls	r3, r3, #22
 8005928:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800592c:	78bb      	ldrb	r3, [r7, #2]
 800592e:	02db      	lsls	r3, r3, #11
 8005930:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005934:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005936:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800593a:	049b      	lsls	r3, r3, #18
 800593c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005940:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005942:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005944:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005948:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	0159      	lsls	r1, r3, #5
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	440b      	add	r3, r1
 8005956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800595a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005960:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005962:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005966:	2b03      	cmp	r3, #3
 8005968:	d10f      	bne.n	800598a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4413      	add	r3, r2
 8005972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	78fa      	ldrb	r2, [r7, #3]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	440a      	add	r2, r1
 8005980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005988:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800598a:	7ffb      	ldrb	r3, [r7, #31]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08c      	sub	sp, #48	; 0x30
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	4613      	mov	r3, r2
 80059a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80059ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059b0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d02d      	beq.n	8005a1a <USB_HC_StartXfer+0x86>
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	791b      	ldrb	r3, [r3, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d129      	bne.n	8005a1a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d117      	bne.n	80059fc <USB_HC_StartXfer+0x68>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	79db      	ldrb	r3, [r3, #7]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <USB_HC_StartXfer+0x48>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	79db      	ldrb	r3, [r3, #7]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d10f      	bne.n	80059fc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80059fc:	79fb      	ldrb	r3, [r7, #7]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10b      	bne.n	8005a1a <USB_HC_StartXfer+0x86>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	795b      	ldrb	r3, [r3, #5]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d107      	bne.n	8005a1a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	4619      	mov	r1, r3
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fa2f 	bl	8005e74 <USB_DoPing>
      return HAL_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	e0f8      	b.n	8005c0c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d018      	beq.n	8005a54 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	8912      	ldrh	r2, [r2, #8]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	8912      	ldrh	r2, [r2, #8]
 8005a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a36:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005a38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a3a:	8b7b      	ldrh	r3, [r7, #26]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d90b      	bls.n	8005a58 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005a40:	8b7b      	ldrh	r3, [r7, #26]
 8005a42:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	8912      	ldrh	r2, [r2, #8]
 8005a4a:	fb02 f203 	mul.w	r2, r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	611a      	str	r2, [r3, #16]
 8005a52:	e001      	b.n	8005a58 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005a54:	2301      	movs	r3, #1
 8005a56:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	78db      	ldrb	r3, [r3, #3]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	8912      	ldrh	r2, [r2, #8]
 8005a66:	fb02 f203 	mul.w	r2, r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	611a      	str	r2, [r3, #16]
 8005a6e:	e003      	b.n	8005a78 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	695a      	ldr	r2, [r3, #20]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a82:	04d9      	lsls	r1, r3, #19
 8005a84:	4b63      	ldr	r3, [pc, #396]	; (8005c14 <USB_HC_StartXfer+0x280>)
 8005a86:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a88:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	7a9b      	ldrb	r3, [r3, #10]
 8005a8e:	075b      	lsls	r3, r3, #29
 8005a90:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a94:	69f9      	ldr	r1, [r7, #28]
 8005a96:	0148      	lsls	r0, r1, #5
 8005a98:	6a39      	ldr	r1, [r7, #32]
 8005a9a:	4401      	add	r1, r0
 8005a9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005aa0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005aa2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d009      	beq.n	8005abe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	68d9      	ldr	r1, [r3, #12]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	460a      	mov	r2, r1
 8005abc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	bf0c      	ite	eq
 8005ace:	2301      	moveq	r3, #1
 8005ad0:	2300      	movne	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	6a3a      	ldr	r2, [r7, #32]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005af0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005af4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	7e7b      	ldrb	r3, [r7, #25]
 8005b06:	075b      	lsls	r3, r3, #29
 8005b08:	69f9      	ldr	r1, [r7, #28]
 8005b0a:	0148      	lsls	r0, r1, #5
 8005b0c:	6a39      	ldr	r1, [r7, #32]
 8005b0e:	4401      	add	r1, r0
 8005b10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005b14:	4313      	orrs	r3, r2
 8005b16:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b2e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	78db      	ldrb	r3, [r3, #3]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	e003      	b.n	8005b4a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b48:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b50:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5e:	461a      	mov	r2, r3
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e04e      	b.n	8005c0c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	78db      	ldrb	r3, [r3, #3]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d149      	bne.n	8005c0a <USB_HC_StartXfer+0x276>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d045      	beq.n	8005c0a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	79db      	ldrb	r3, [r3, #7]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d830      	bhi.n	8005be8 <USB_HC_StartXfer+0x254>
 8005b86:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <USB_HC_StartXfer+0x1f8>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005bc1 	.word	0x08005bc1
 8005b94:	08005b9d 	.word	0x08005b9d
 8005b98:	08005bc1 	.word	0x08005bc1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	3303      	adds	r3, #3
 8005ba2:	089b      	lsrs	r3, r3, #2
 8005ba4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005ba6:	8afa      	ldrh	r2, [r7, #22]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d91c      	bls.n	8005bec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	619a      	str	r2, [r3, #24]
        }
        break;
 8005bbe:	e015      	b.n	8005bec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	3303      	adds	r3, #3
 8005bc6:	089b      	lsrs	r3, r3, #2
 8005bc8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005bca:	8afa      	ldrh	r2, [r7, #22]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d90a      	bls.n	8005bf0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005be6:	e003      	b.n	8005bf0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005be8:	bf00      	nop
 8005bea:	e002      	b.n	8005bf2 <USB_HC_StartXfer+0x25e>
        break;
 8005bec:	bf00      	nop
 8005bee:	e000      	b.n	8005bf2 <USB_HC_StartXfer+0x25e>
        break;
 8005bf0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	68d9      	ldr	r1, [r3, #12]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	785a      	ldrb	r2, [r3, #1]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	2000      	movs	r0, #0
 8005c02:	9000      	str	r0, [sp, #0]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff fb53 	bl	80052b0 <USB_WritePacket>
  }

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3728      	adds	r7, #40	; 0x28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	1ff80000 	.word	0x1ff80000

08005c18 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	b29b      	uxth	r3, r3
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b089      	sub	sp, #36	; 0x24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	460b      	mov	r3, r1
 8005c44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	0c9b      	lsrs	r3, r3, #18
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	0fdb      	lsrs	r3, r3, #31
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	d104      	bne.n	8005c94 <USB_HC_Halt+0x5a>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e0e8      	b.n	8005e66 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <USB_HC_Halt+0x66>
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d173      	bne.n	8005d88 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cbe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f040 80cb 	bne.w	8005e64 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d143      	bne.n	8005d62 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cf8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d18:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d38:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	61fb      	str	r3, [r7, #28]
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d46:	d81d      	bhi.n	8005d84 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d5e:	d0ec      	beq.n	8005d3a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d60:	e080      	b.n	8005e64 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	0151      	lsls	r1, r2, #5
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	440a      	add	r2, r1
 8005d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d80:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d82:	e06f      	b.n	8005e64 <USB_HC_Halt+0x22a>
            break;
 8005d84:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d86:	e06d      	b.n	8005e64 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	0151      	lsls	r1, r2, #5
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	440a      	add	r2, r1
 8005d9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005da6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d143      	bne.n	8005e40 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dd6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005df6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e16:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e24:	d81d      	bhi.n	8005e62 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e3c:	d0ec      	beq.n	8005e18 <USB_HC_Halt+0x1de>
 8005e3e:	e011      	b.n	8005e64 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	e000      	b.n	8005e64 <USB_HC_Halt+0x22a>
          break;
 8005e62:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3724      	adds	r7, #36	; 0x24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
	...

08005e74 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	04da      	lsls	r2, r3, #19
 8005e90:	4b15      	ldr	r3, [pc, #84]	; (8005ee8 <USB_DoPing+0x74>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	0151      	lsls	r1, r2, #5
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	440a      	add	r2, r1
 8005e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ea4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ebc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ec4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	1ff80000 	.word	0x1ff80000

08005eec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff f935 	bl	800516c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005f02:	2110      	movs	r1, #16
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff f98f 	bl	8005228 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff f9b0 	bl	8005270 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005f10:	2300      	movs	r3, #0
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	e01f      	b.n	8005f56 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f34:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f3c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	3301      	adds	r3, #1
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	2b0f      	cmp	r3, #15
 8005f5a:	d9dc      	bls.n	8005f16 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	e034      	b.n	8005fcc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f78:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f80:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f88:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f96:	461a      	mov	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fa8:	d80c      	bhi.n	8005fc4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc0:	d0ec      	beq.n	8005f9c <USB_StopHost+0xb0>
 8005fc2:	e000      	b.n	8005fc6 <USB_StopHost+0xda>
        break;
 8005fc4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	2b0f      	cmp	r3, #15
 8005fd0:	d9c7      	bls.n	8005f62 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f04f 33ff 	mov.w	r3, #4294967295
 8005fde:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff f8ae 	bl	800514a <USB_EnableGlobalInt>

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005ff8:	b590      	push	{r4, r7, lr}
 8005ffa:	b089      	sub	sp, #36	; 0x24
 8005ffc:	af04      	add	r7, sp, #16
 8005ffe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006000:	2301      	movs	r3, #1
 8006002:	2202      	movs	r2, #2
 8006004:	2102      	movs	r1, #2
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fc66 	bl	80068d8 <USBH_FindInterface>
 800600c:	4603      	mov	r3, r0
 800600e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	2bff      	cmp	r3, #255	; 0xff
 8006014:	d002      	beq.n	800601c <USBH_CDC_InterfaceInit+0x24>
 8006016:	7bfb      	ldrb	r3, [r7, #15]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d901      	bls.n	8006020 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800601c:	2302      	movs	r3, #2
 800601e:	e13d      	b.n	800629c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fc3b 	bl	80068a0 <USBH_SelectInterface>
 800602a:	4603      	mov	r3, r0
 800602c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800602e:	7bbb      	ldrb	r3, [r7, #14]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006034:	2302      	movs	r3, #2
 8006036:	e131      	b.n	800629c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800603e:	2050      	movs	r0, #80	; 0x50
 8006040:	f002 fa00 	bl	8008444 <malloc>
 8006044:	4603      	mov	r3, r0
 8006046:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006058:	2302      	movs	r3, #2
 800605a:	e11f      	b.n	800629c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800605c:	2250      	movs	r2, #80	; 0x50
 800605e:	2100      	movs	r1, #0
 8006060:	68b8      	ldr	r0, [r7, #8]
 8006062:	f002 f9ff 	bl	8008464 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	211a      	movs	r1, #26
 800606c:	fb01 f303 	mul.w	r3, r1, r3
 8006070:	4413      	add	r3, r2
 8006072:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	b25b      	sxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	da15      	bge.n	80060aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	211a      	movs	r1, #26
 8006084:	fb01 f303 	mul.w	r3, r1, r3
 8006088:	4413      	add	r3, r2
 800608a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800608e:	781a      	ldrb	r2, [r3, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	211a      	movs	r1, #26
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	4413      	add	r3, r2
 80060a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060a4:	881a      	ldrh	r2, [r3, #0]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	785b      	ldrb	r3, [r3, #1]
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 fe32 	bl	8007d1a <USBH_AllocPipe>
 80060b6:	4603      	mov	r3, r0
 80060b8:	461a      	mov	r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	7819      	ldrb	r1, [r3, #0]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	7858      	ldrb	r0, [r3, #1]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	8952      	ldrh	r2, [r2, #10]
 80060d6:	9202      	str	r2, [sp, #8]
 80060d8:	2203      	movs	r2, #3
 80060da:	9201      	str	r2, [sp, #4]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	4623      	mov	r3, r4
 80060e0:	4602      	mov	r2, r0
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f001 fdea 	bl	8007cbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2200      	movs	r2, #0
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f002 f8f9 	bl	80082e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80060f6:	2300      	movs	r3, #0
 80060f8:	2200      	movs	r2, #0
 80060fa:	210a      	movs	r1, #10
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fbeb 	bl	80068d8 <USBH_FindInterface>
 8006102:	4603      	mov	r3, r0
 8006104:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	2bff      	cmp	r3, #255	; 0xff
 800610a:	d002      	beq.n	8006112 <USBH_CDC_InterfaceInit+0x11a>
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d901      	bls.n	8006116 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006112:	2302      	movs	r3, #2
 8006114:	e0c2      	b.n	800629c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	211a      	movs	r1, #26
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	4413      	add	r3, r2
 8006122:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	b25b      	sxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	da16      	bge.n	800615c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	211a      	movs	r1, #26
 8006134:	fb01 f303 	mul.w	r3, r1, r3
 8006138:	4413      	add	r3, r2
 800613a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800613e:	781a      	ldrb	r2, [r3, #0]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	211a      	movs	r1, #26
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	4413      	add	r3, r2
 8006150:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006154:	881a      	ldrh	r2, [r3, #0]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	835a      	strh	r2, [r3, #26]
 800615a:	e015      	b.n	8006188 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	211a      	movs	r1, #26
 8006162:	fb01 f303 	mul.w	r3, r1, r3
 8006166:	4413      	add	r3, r2
 8006168:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	211a      	movs	r1, #26
 8006178:	fb01 f303 	mul.w	r3, r1, r3
 800617c:	4413      	add	r3, r2
 800617e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006182:	881a      	ldrh	r2, [r3, #0]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	211a      	movs	r1, #26
 800618e:	fb01 f303 	mul.w	r3, r1, r3
 8006192:	4413      	add	r3, r2
 8006194:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	b25b      	sxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	da16      	bge.n	80061ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	211a      	movs	r1, #26
 80061a6:	fb01 f303 	mul.w	r3, r1, r3
 80061aa:	4413      	add	r3, r2
 80061ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	211a      	movs	r1, #26
 80061bc:	fb01 f303 	mul.w	r3, r1, r3
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80061c6:	881a      	ldrh	r2, [r3, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	835a      	strh	r2, [r3, #26]
 80061cc:	e015      	b.n	80061fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	211a      	movs	r1, #26
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	4413      	add	r3, r2
 80061da:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061de:	781a      	ldrb	r2, [r3, #0]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	211a      	movs	r1, #26
 80061ea:	fb01 f303 	mul.w	r3, r1, r3
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	7b9b      	ldrb	r3, [r3, #14]
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f001 fd8a 	bl	8007d1a <USBH_AllocPipe>
 8006206:	4603      	mov	r3, r0
 8006208:	461a      	mov	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	7bdb      	ldrb	r3, [r3, #15]
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f001 fd80 	bl	8007d1a <USBH_AllocPipe>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	7b59      	ldrb	r1, [r3, #13]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	7b98      	ldrb	r0, [r3, #14]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	8b12      	ldrh	r2, [r2, #24]
 800623a:	9202      	str	r2, [sp, #8]
 800623c:	2202      	movs	r2, #2
 800623e:	9201      	str	r2, [sp, #4]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	4623      	mov	r3, r4
 8006244:	4602      	mov	r2, r0
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 fd38 	bl	8007cbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	7b19      	ldrb	r1, [r3, #12]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	7bd8      	ldrb	r0, [r3, #15]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	8b52      	ldrh	r2, [r2, #26]
 8006264:	9202      	str	r2, [sp, #8]
 8006266:	2202      	movs	r2, #2
 8006268:	9201      	str	r2, [sp, #4]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	4623      	mov	r3, r4
 800626e:	4602      	mov	r2, r0
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f001 fd23 	bl	8007cbc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	7b5b      	ldrb	r3, [r3, #13]
 8006282:	2200      	movs	r2, #0
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f002 f82e 	bl	80082e8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	7b1b      	ldrb	r3, [r3, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	4619      	mov	r1, r3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f002 f827 	bl	80082e8 <USBH_LL_SetToggle>

  return USBH_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd90      	pop	{r4, r7, pc}

080062a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00e      	beq.n	80062dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f001 fd18 	bl	8007cfa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f001 fd43 	bl	8007d5c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	7b1b      	ldrb	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00e      	beq.n	8006302 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	7b1b      	ldrb	r3, [r3, #12]
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 fd05 	bl	8007cfa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	7b1b      	ldrb	r3, [r3, #12]
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fd30 	bl	8007d5c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	7b5b      	ldrb	r3, [r3, #13]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00e      	beq.n	8006328 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	7b5b      	ldrb	r3, [r3, #13]
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 fcf2 	bl	8007cfa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	7b5b      	ldrb	r3, [r3, #13]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 fd1d 	bl	8007d5c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800633a:	69db      	ldr	r3, [r3, #28]
 800633c:	4618      	mov	r0, r3
 800633e:	f002 f889 	bl	8008454 <free>
    phost->pActiveClass->pData = 0U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006348:	2200      	movs	r2, #0
 800634a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3340      	adds	r3, #64	; 0x40
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f8b1 	bl	80064d6 <GetLineCoding>
 8006374:	4603      	mov	r3, r0
 8006376:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d105      	bne.n	800638a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006384:	2102      	movs	r1, #2
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800638a:	7afb      	ldrb	r3, [r7, #11]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d877      	bhi.n	80064a8 <USBH_CDC_Process+0x114>
 80063b8:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <USBH_CDC_Process+0x2c>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	080063d5 	.word	0x080063d5
 80063c4:	080063db 	.word	0x080063db
 80063c8:	0800640b 	.word	0x0800640b
 80063cc:	0800647f 	.word	0x0800647f
 80063d0:	0800648d 	.word	0x0800648d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]
      break;
 80063d8:	e06d      	b.n	80064b6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f897 	bl	8006514 <SetLineCoding>
 80063e6:	4603      	mov	r3, r0
 80063e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d104      	bne.n	80063fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063f8:	e058      	b.n	80064ac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d055      	beq.n	80064ac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2204      	movs	r2, #4
 8006404:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006408:	e050      	b.n	80064ac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	3340      	adds	r3, #64	; 0x40
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f860 	bl	80064d6 <GetLineCoding>
 8006416:	4603      	mov	r3, r0
 8006418:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800641a:	7bbb      	ldrb	r3, [r7, #14]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d126      	bne.n	800646e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006432:	791b      	ldrb	r3, [r3, #4]
 8006434:	429a      	cmp	r2, r3
 8006436:	d13b      	bne.n	80064b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006442:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006444:	429a      	cmp	r2, r3
 8006446:	d133      	bne.n	80064b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006452:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006454:	429a      	cmp	r2, r3
 8006456:	d12b      	bne.n	80064b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006460:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006462:	429a      	cmp	r2, r3
 8006464:	d124      	bne.n	80064b0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f958 	bl	800671c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800646c:	e020      	b.n	80064b0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800646e:	7bbb      	ldrb	r3, [r7, #14]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d01d      	beq.n	80064b0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2204      	movs	r2, #4
 8006478:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800647c:	e018      	b.n	80064b0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f867 	bl	8006552 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f8da 	bl	800663e <CDC_ProcessReception>
      break;
 800648a:	e014      	b.n	80064b6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800648c:	2100      	movs	r1, #0
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 ffe3 	bl	800745a <USBH_ClrFeature>
 8006494:	4603      	mov	r3, r0
 8006496:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10a      	bne.n	80064b4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80064a6:	e005      	b.n	80064b4 <USBH_CDC_Process+0x120>

    default:
      break;
 80064a8:	bf00      	nop
 80064aa:	e004      	b.n	80064b6 <USBH_CDC_Process+0x122>
      break;
 80064ac:	bf00      	nop
 80064ae:	e002      	b.n	80064b6 <USBH_CDC_Process+0x122>
      break;
 80064b0:	bf00      	nop
 80064b2:	e000      	b.n	80064b6 <USBH_CDC_Process+0x122>
      break;
 80064b4:	bf00      	nop

  }

  return status;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	22a1      	movs	r2, #161	; 0xa1
 80064e4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2221      	movs	r2, #33	; 0x21
 80064ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2207      	movs	r2, #7
 80064fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2207      	movs	r2, #7
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 f988 	bl	800781a <USBH_CtlReq>
 800650a:	4603      	mov	r3, r0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2221      	movs	r2, #33	; 0x21
 8006522:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2207      	movs	r2, #7
 800653a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2207      	movs	r2, #7
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 f969 	bl	800781a <USBH_CtlReq>
 8006548:	4603      	mov	r3, r0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b086      	sub	sp, #24
 8006556:	af02      	add	r7, sp, #8
 8006558:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006564:	2300      	movs	r3, #0
 8006566:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800656e:	2b01      	cmp	r3, #1
 8006570:	d002      	beq.n	8006578 <CDC_ProcessTransmission+0x26>
 8006572:	2b02      	cmp	r3, #2
 8006574:	d023      	beq.n	80065be <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006576:	e05e      	b.n	8006636 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	8b12      	ldrh	r2, [r2, #24]
 8006580:	4293      	cmp	r3, r2
 8006582:	d90b      	bls.n	800659c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	69d9      	ldr	r1, [r3, #28]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8b1a      	ldrh	r2, [r3, #24]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	7b5b      	ldrb	r3, [r3, #13]
 8006590:	2001      	movs	r0, #1
 8006592:	9000      	str	r0, [sp, #0]
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 fb4e 	bl	8007c36 <USBH_BulkSendData>
 800659a:	e00b      	b.n	80065b4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	7b5b      	ldrb	r3, [r3, #13]
 80065aa:	2001      	movs	r0, #1
 80065ac:	9000      	str	r0, [sp, #0]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 fb41 	bl	8007c36 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80065bc:	e03b      	b.n	8006636 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	7b5b      	ldrb	r3, [r3, #13]
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 fe65 	bl	8008294 <USBH_LL_GetURBState>
 80065ca:	4603      	mov	r3, r0
 80065cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80065ce:	7afb      	ldrb	r3, [r7, #11]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d128      	bne.n	8006626 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	8b12      	ldrh	r2, [r2, #24]
 80065dc:	4293      	cmp	r3, r2
 80065de:	d90e      	bls.n	80065fe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	8b12      	ldrh	r2, [r2, #24]
 80065e8:	1a9a      	subs	r2, r3, r2
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	8b12      	ldrh	r2, [r2, #24]
 80065f6:	441a      	add	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	61da      	str	r2, [r3, #28]
 80065fc:	e002      	b.n	8006604 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	2b00      	cmp	r3, #0
 800660a:	d004      	beq.n	8006616 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006614:	e00e      	b.n	8006634 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f868 	bl	80066f4 <USBH_CDC_TransmitCallback>
      break;
 8006624:	e006      	b.n	8006634 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006626:	7afb      	ldrb	r3, [r7, #11]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d103      	bne.n	8006634 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006634:	bf00      	nop
  }
}
 8006636:	bf00      	nop
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b086      	sub	sp, #24
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006650:	2300      	movs	r3, #0
 8006652:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800665a:	2b03      	cmp	r3, #3
 800665c:	d002      	beq.n	8006664 <CDC_ProcessReception+0x26>
 800665e:	2b04      	cmp	r3, #4
 8006660:	d00e      	beq.n	8006680 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006662:	e043      	b.n	80066ec <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	6a19      	ldr	r1, [r3, #32]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	8b5a      	ldrh	r2, [r3, #26]
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	7b1b      	ldrb	r3, [r3, #12]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 fb05 	bl	8007c80 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2204      	movs	r2, #4
 800667a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800667e:	e035      	b.n	80066ec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	7b1b      	ldrb	r3, [r3, #12]
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 fe04 	bl	8008294 <USBH_LL_GetURBState>
 800668c:	4603      	mov	r3, r0
 800668e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006690:	7cfb      	ldrb	r3, [r7, #19]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d129      	bne.n	80066ea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	7b1b      	ldrb	r3, [r3, #12]
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 fd67 	bl	8008170 <USBH_LL_GetLastXferSize>
 80066a2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d016      	beq.n	80066dc <CDC_ProcessReception+0x9e>
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	8b5b      	ldrh	r3, [r3, #26]
 80066b2:	461a      	mov	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d910      	bls.n	80066dc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1ad2      	subs	r2, r2, r3
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	441a      	add	r2, r3
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	2203      	movs	r2, #3
 80066d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80066da:	e006      	b.n	80066ea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f80f 	bl	8006708 <USBH_CDC_ReceiveCallback>
      break;
 80066ea:	bf00      	nop
  }
}
 80066ec:	bf00      	nop
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006744:	2302      	movs	r3, #2
 8006746:	e029      	b.n	800679c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	79fa      	ldrb	r2, [r7, #7]
 800674c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f81f 	bl	80067a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f001 fc37 	bl	8008008 <USBH_LL_Init>

  return USBH_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	e009      	b.n	80067ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	33e0      	adds	r3, #224	; 0xe0
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	2200      	movs	r2, #0
 80067c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b0e      	cmp	r3, #14
 80067ce:	d9f2      	bls.n	80067b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]
 80067d4:	e009      	b.n	80067ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f0:	d3f1      	bcc.n	80067d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2240      	movs	r2, #64	; 0x40
 8006816:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d016      	beq.n	800688e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10e      	bne.n	8006888 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006870:	1c59      	adds	r1, r3, #1
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	33de      	adds	r3, #222	; 0xde
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
 8006886:	e004      	b.n	8006892 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006888:	2302      	movs	r3, #2
 800688a:	73fb      	strb	r3, [r7, #15]
 800688c:	e001      	b.n	8006892 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800688e:	2302      	movs	r3, #2
 8006890:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006892:	7bfb      	ldrb	r3, [r7, #15]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80068ac:	2300      	movs	r3, #0
 80068ae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d204      	bcs.n	80068c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	78fa      	ldrb	r2, [r7, #3]
 80068c0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80068c4:	e001      	b.n	80068ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80068c6:	2302      	movs	r3, #2
 80068c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	461a      	mov	r2, r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	70fb      	strb	r3, [r7, #3]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70bb      	strb	r3, [r7, #2]
 80068ee:	4613      	mov	r3, r2
 80068f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006900:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006902:	e025      	b.n	8006950 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006904:	7dfb      	ldrb	r3, [r7, #23]
 8006906:	221a      	movs	r2, #26
 8006908:	fb02 f303 	mul.w	r3, r2, r3
 800690c:	3308      	adds	r3, #8
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	3302      	adds	r3, #2
 8006914:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	795b      	ldrb	r3, [r3, #5]
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	429a      	cmp	r2, r3
 800691e:	d002      	beq.n	8006926 <USBH_FindInterface+0x4e>
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	2bff      	cmp	r3, #255	; 0xff
 8006924:	d111      	bne.n	800694a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800692a:	78ba      	ldrb	r2, [r7, #2]
 800692c:	429a      	cmp	r2, r3
 800692e:	d002      	beq.n	8006936 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006930:	78bb      	ldrb	r3, [r7, #2]
 8006932:	2bff      	cmp	r3, #255	; 0xff
 8006934:	d109      	bne.n	800694a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800693a:	787a      	ldrb	r2, [r7, #1]
 800693c:	429a      	cmp	r2, r3
 800693e:	d002      	beq.n	8006946 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006940:	787b      	ldrb	r3, [r7, #1]
 8006942:	2bff      	cmp	r3, #255	; 0xff
 8006944:	d101      	bne.n	800694a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	e006      	b.n	8006958 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800694a:	7dfb      	ldrb	r3, [r7, #23]
 800694c:	3301      	adds	r3, #1
 800694e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d9d6      	bls.n	8006904 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006956:	23ff      	movs	r3, #255	; 0xff
}
 8006958:	4618      	mov	r0, r3
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fb87 	bl	8008080 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006972:	2101      	movs	r1, #1
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 fca0 	bl	80082ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b088      	sub	sp, #32
 8006988:	af04      	add	r7, sp, #16
 800698a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800698c:	2302      	movs	r3, #2
 800698e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	d102      	bne.n	80069a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2203      	movs	r2, #3
 80069a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b0b      	cmp	r3, #11
 80069ae:	f200 81b3 	bhi.w	8006d18 <USBH_Process+0x394>
 80069b2:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <USBH_Process+0x34>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069e9 	.word	0x080069e9
 80069bc:	08006a1b 	.word	0x08006a1b
 80069c0:	08006a83 	.word	0x08006a83
 80069c4:	08006cb3 	.word	0x08006cb3
 80069c8:	08006d19 	.word	0x08006d19
 80069cc:	08006b27 	.word	0x08006b27
 80069d0:	08006c59 	.word	0x08006c59
 80069d4:	08006b5d 	.word	0x08006b5d
 80069d8:	08006b7d 	.word	0x08006b7d
 80069dc:	08006b9d 	.word	0x08006b9d
 80069e0:	08006bcb 	.word	0x08006bcb
 80069e4:	08006c9b 	.word	0x08006c9b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 8193 	beq.w	8006d1c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80069fc:	20c8      	movs	r0, #200	; 0xc8
 80069fe:	f001 fca3 	bl	8008348 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fb99 	bl	800813a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a18:	e180      	b.n	8006d1c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d107      	bne.n	8006a34 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a32:	e182      	b.n	8006d3a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a3e:	d914      	bls.n	8006a6a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a46:	3301      	adds	r3, #1
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d903      	bls.n	8006a62 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	220d      	movs	r2, #13
 8006a5e:	701a      	strb	r2, [r3, #0]
      break;
 8006a60:	e16b      	b.n	8006d3a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
      break;
 8006a68:	e167      	b.n	8006d3a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a70:	f103 020a 	add.w	r2, r3, #10
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006a7a:	200a      	movs	r0, #10
 8006a7c:	f001 fc64 	bl	8008348 <USBH_Delay>
      break;
 8006a80:	e15b      	b.n	8006d3a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a92:	2104      	movs	r1, #4
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006a98:	2064      	movs	r0, #100	; 0x64
 8006a9a:	f001 fc55 	bl	8008348 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fb24 	bl	80080ec <USBH_LL_GetSpeed>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 f92f 	bl	8007d1a <USBH_AllocPipe>
 8006abc:	4603      	mov	r3, r0
 8006abe:	461a      	mov	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006ac4:	2180      	movs	r1, #128	; 0x80
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 f927 	bl	8007d1a <USBH_AllocPipe>
 8006acc:	4603      	mov	r3, r0
 8006ace:	461a      	mov	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	7919      	ldrb	r1, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ae8:	b292      	uxth	r2, r2
 8006aea:	9202      	str	r2, [sp, #8]
 8006aec:	2200      	movs	r2, #0
 8006aee:	9201      	str	r2, [sp, #4]
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	4603      	mov	r3, r0
 8006af4:	2280      	movs	r2, #128	; 0x80
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 f8e0 	bl	8007cbc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	7959      	ldrb	r1, [r3, #5]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b10:	b292      	uxth	r2, r2
 8006b12:	9202      	str	r2, [sp, #8]
 8006b14:	2200      	movs	r2, #0
 8006b16:	9201      	str	r2, [sp, #4]
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f001 f8cc 	bl	8007cbc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b24:	e109      	b.n	8006d3a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f90c 	bl	8006d44 <USBH_HandleEnum>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f040 80f3 	bne.w	8006d20 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d103      	bne.n	8006b54 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2208      	movs	r2, #8
 8006b50:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006b52:	e0e5      	b.n	8006d20 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2207      	movs	r2, #7
 8006b58:	701a      	strb	r2, [r3, #0]
      break;
 8006b5a:	e0e1      	b.n	8006d20 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 80de 	beq.w	8006d24 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b6e:	2101      	movs	r1, #1
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2208      	movs	r2, #8
 8006b78:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006b7a:	e0d3      	b.n	8006d24 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fc20 	bl	80073cc <USBH_SetCfg>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f040 80ca 	bne.w	8006d28 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2209      	movs	r2, #9
 8006b98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b9a:	e0c5      	b.n	8006d28 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00b      	beq.n	8006bc2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006baa:	2101      	movs	r1, #1
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fc30 	bl	8007412 <USBH_SetFeature>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 80b9 	bne.w	8006d2c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	220a      	movs	r2, #10
 8006bbe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006bc0:	e0b4      	b.n	8006d2c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	220a      	movs	r2, #10
 8006bc6:	701a      	strb	r2, [r3, #0]
      break;
 8006bc8:	e0b0      	b.n	8006d2c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80ad 	beq.w	8006d30 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
 8006be2:	e016      	b.n	8006c12 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006be4:	7bfa      	ldrb	r2, [r7, #15]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	32de      	adds	r2, #222	; 0xde
 8006bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bee:	791a      	ldrb	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d108      	bne.n	8006c0c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006bfa:	7bfa      	ldrb	r2, [r7, #15]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	32de      	adds	r2, #222	; 0xde
 8006c00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006c0a:	e005      	b.n	8006c18 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	73fb      	strb	r3, [r7, #15]
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0e5      	beq.n	8006be4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d016      	beq.n	8006c50 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	4798      	blx	r3
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d109      	bne.n	8006c48 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2206      	movs	r2, #6
 8006c38:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c40:	2103      	movs	r1, #3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c46:	e073      	b.n	8006d30 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	220d      	movs	r2, #13
 8006c4c:	701a      	strb	r2, [r3, #0]
      break;
 8006c4e:	e06f      	b.n	8006d30 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	220d      	movs	r2, #13
 8006c54:	701a      	strb	r2, [r3, #0]
      break;
 8006c56:	e06b      	b.n	8006d30 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d017      	beq.n	8006c92 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d103      	bne.n	8006c82 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	220b      	movs	r2, #11
 8006c7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c80:	e058      	b.n	8006d34 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d154      	bne.n	8006d34 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	220d      	movs	r2, #13
 8006c8e:	701a      	strb	r2, [r3, #0]
      break;
 8006c90:	e050      	b.n	8006d34 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	220d      	movs	r2, #13
 8006c96:	701a      	strb	r2, [r3, #0]
      break;
 8006c98:	e04c      	b.n	8006d34 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d049      	beq.n	8006d38 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
      }
      break;
 8006cb0:	e042      	b.n	8006d38 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff fd72 	bl	80067a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cee:	2105      	movs	r1, #5
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d107      	bne.n	8006d10 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff fe2b 	bl	8006964 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d0e:	e014      	b.n	8006d3a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f001 f9b5 	bl	8008080 <USBH_LL_Start>
      break;
 8006d16:	e010      	b.n	8006d3a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006d18:	bf00      	nop
 8006d1a:	e00e      	b.n	8006d3a <USBH_Process+0x3b6>
      break;
 8006d1c:	bf00      	nop
 8006d1e:	e00c      	b.n	8006d3a <USBH_Process+0x3b6>
      break;
 8006d20:	bf00      	nop
 8006d22:	e00a      	b.n	8006d3a <USBH_Process+0x3b6>
    break;
 8006d24:	bf00      	nop
 8006d26:	e008      	b.n	8006d3a <USBH_Process+0x3b6>
      break;
 8006d28:	bf00      	nop
 8006d2a:	e006      	b.n	8006d3a <USBH_Process+0x3b6>
      break;
 8006d2c:	bf00      	nop
 8006d2e:	e004      	b.n	8006d3a <USBH_Process+0x3b6>
      break;
 8006d30:	bf00      	nop
 8006d32:	e002      	b.n	8006d3a <USBH_Process+0x3b6>
      break;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <USBH_Process+0x3b6>
      break;
 8006d38:	bf00      	nop
  }
  return USBH_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af04      	add	r7, sp, #16
 8006d4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006d50:	2301      	movs	r3, #1
 8006d52:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	785b      	ldrb	r3, [r3, #1]
 8006d58:	2b07      	cmp	r3, #7
 8006d5a:	f200 81c1 	bhi.w	80070e0 <USBH_HandleEnum+0x39c>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <USBH_HandleEnum+0x20>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d85 	.word	0x08006d85
 8006d68:	08006e43 	.word	0x08006e43
 8006d6c:	08006ead 	.word	0x08006ead
 8006d70:	08006f3b 	.word	0x08006f3b
 8006d74:	08006fa5 	.word	0x08006fa5
 8006d78:	08007015 	.word	0x08007015
 8006d7c:	0800705b 	.word	0x0800705b
 8006d80:	080070a1 	.word	0x080070a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006d84:	2108      	movs	r1, #8
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fa50 	bl	800722c <USBH_Get_DevDesc>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d130      	bne.n	8006df8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	7919      	ldrb	r1, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006dba:	b292      	uxth	r2, r2
 8006dbc:	9202      	str	r2, [sp, #8]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	9201      	str	r2, [sp, #4]
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2280      	movs	r2, #128	; 0x80
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 ff77 	bl	8007cbc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	7959      	ldrb	r1, [r3, #5]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006de2:	b292      	uxth	r2, r2
 8006de4:	9202      	str	r2, [sp, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	9201      	str	r2, [sp, #4]
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	4603      	mov	r3, r0
 8006dee:	2200      	movs	r2, #0
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 ff63 	bl	8007cbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006df6:	e175      	b.n	80070e4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	f040 8172 	bne.w	80070e4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e06:	3301      	adds	r3, #1
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d903      	bls.n	8006e22 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	220d      	movs	r2, #13
 8006e1e:	701a      	strb	r2, [r3, #0]
      break;
 8006e20:	e160      	b.n	80070e4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	795b      	ldrb	r3, [r3, #5]
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 ff97 	bl	8007d5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	791b      	ldrb	r3, [r3, #4]
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 ff91 	bl	8007d5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
      break;
 8006e40:	e150      	b.n	80070e4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006e42:	2112      	movs	r1, #18
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f9f1 	bl	800722c <USBH_Get_DevDesc>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d103      	bne.n	8006e5c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e5a:	e145      	b.n	80070e8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	f040 8142 	bne.w	80070e8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d903      	bls.n	8006e86 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	220d      	movs	r2, #13
 8006e82:	701a      	strb	r2, [r3, #0]
      break;
 8006e84:	e130      	b.n	80070e8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	795b      	ldrb	r3, [r3, #5]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 ff65 	bl	8007d5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	791b      	ldrb	r3, [r3, #4]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 ff5f 	bl	8007d5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	701a      	strb	r2, [r3, #0]
      break;
 8006eaa:	e11d      	b.n	80070e8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006eac:	2101      	movs	r1, #1
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fa68 	bl	8007384 <USBH_SetAddress>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d132      	bne.n	8006f24 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006ebe:	2002      	movs	r0, #2
 8006ec0:	f001 fa42 	bl	8008348 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2203      	movs	r2, #3
 8006ed0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7919      	ldrb	r1, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006ee6:	b292      	uxth	r2, r2
 8006ee8:	9202      	str	r2, [sp, #8]
 8006eea:	2200      	movs	r2, #0
 8006eec:	9201      	str	r2, [sp, #4]
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2280      	movs	r2, #128	; 0x80
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fee1 	bl	8007cbc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	7959      	ldrb	r1, [r3, #5]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f0e:	b292      	uxth	r2, r2
 8006f10:	9202      	str	r2, [sp, #8]
 8006f12:	2200      	movs	r2, #0
 8006f14:	9201      	str	r2, [sp, #4]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fecd 	bl	8007cbc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f22:	e0e3      	b.n	80070ec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	f040 80e0 	bne.w	80070ec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	220d      	movs	r2, #13
 8006f30:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	705a      	strb	r2, [r3, #1]
      break;
 8006f38:	e0d8      	b.n	80070ec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006f3a:	2109      	movs	r1, #9
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f99d 	bl	800727c <USBH_Get_CfgDesc>
 8006f42:	4603      	mov	r3, r0
 8006f44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d103      	bne.n	8006f54 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006f52:	e0cd      	b.n	80070f0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	f040 80ca 	bne.w	80070f0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f62:	3301      	adds	r3, #1
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d903      	bls.n	8006f7e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	220d      	movs	r2, #13
 8006f7a:	701a      	strb	r2, [r3, #0]
      break;
 8006f7c:	e0b8      	b.n	80070f0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	795b      	ldrb	r3, [r3, #5]
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fee9 	bl	8007d5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	791b      	ldrb	r3, [r3, #4]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fee3 	bl	8007d5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	701a      	strb	r2, [r3, #0]
      break;
 8006fa2:	e0a5      	b.n	80070f0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f965 	bl	800727c <USBH_Get_CfgDesc>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2205      	movs	r2, #5
 8006fc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fc2:	e097      	b.n	80070f4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	f040 8094 	bne.w	80070f4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d903      	bls.n	8006fee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	220d      	movs	r2, #13
 8006fea:	701a      	strb	r2, [r3, #0]
      break;
 8006fec:	e082      	b.n	80070f4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	795b      	ldrb	r3, [r3, #5]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 feb1 	bl	8007d5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	791b      	ldrb	r3, [r3, #4]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 feab 	bl	8007d5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]
      break;
 8007012:	e06f      	b.n	80070f4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800701a:	2b00      	cmp	r3, #0
 800701c:	d019      	beq.n	8007052 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800702a:	23ff      	movs	r3, #255	; 0xff
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f949 	bl	80072c4 <USBH_Get_StringDesc>
 8007032:	4603      	mov	r3, r0
 8007034:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2206      	movs	r2, #6
 8007040:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007042:	e059      	b.n	80070f8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d156      	bne.n	80070f8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2206      	movs	r2, #6
 800704e:	705a      	strb	r2, [r3, #1]
      break;
 8007050:	e052      	b.n	80070f8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2206      	movs	r2, #6
 8007056:	705a      	strb	r2, [r3, #1]
      break;
 8007058:	e04e      	b.n	80070f8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007060:	2b00      	cmp	r3, #0
 8007062:	d019      	beq.n	8007098 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007070:	23ff      	movs	r3, #255	; 0xff
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f926 	bl	80072c4 <USBH_Get_StringDesc>
 8007078:	4603      	mov	r3, r0
 800707a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d103      	bne.n	800708a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2207      	movs	r2, #7
 8007086:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007088:	e038      	b.n	80070fc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	2b03      	cmp	r3, #3
 800708e:	d135      	bne.n	80070fc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2207      	movs	r2, #7
 8007094:	705a      	strb	r2, [r3, #1]
      break;
 8007096:	e031      	b.n	80070fc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2207      	movs	r2, #7
 800709c:	705a      	strb	r2, [r3, #1]
      break;
 800709e:	e02d      	b.n	80070fc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d017      	beq.n	80070da <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80070b6:	23ff      	movs	r3, #255	; 0xff
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f903 	bl	80072c4 <USBH_Get_StringDesc>
 80070be:	4603      	mov	r3, r0
 80070c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d102      	bne.n	80070ce <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80070cc:	e018      	b.n	8007100 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070ce:	7bbb      	ldrb	r3, [r7, #14]
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d115      	bne.n	8007100 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	73fb      	strb	r3, [r7, #15]
      break;
 80070d8:	e012      	b.n	8007100 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
      break;
 80070de:	e00f      	b.n	8007100 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80070e0:	bf00      	nop
 80070e2:	e00e      	b.n	8007102 <USBH_HandleEnum+0x3be>
      break;
 80070e4:	bf00      	nop
 80070e6:	e00c      	b.n	8007102 <USBH_HandleEnum+0x3be>
      break;
 80070e8:	bf00      	nop
 80070ea:	e00a      	b.n	8007102 <USBH_HandleEnum+0x3be>
      break;
 80070ec:	bf00      	nop
 80070ee:	e008      	b.n	8007102 <USBH_HandleEnum+0x3be>
      break;
 80070f0:	bf00      	nop
 80070f2:	e006      	b.n	8007102 <USBH_HandleEnum+0x3be>
      break;
 80070f4:	bf00      	nop
 80070f6:	e004      	b.n	8007102 <USBH_HandleEnum+0x3be>
      break;
 80070f8:	bf00      	nop
 80070fa:	e002      	b.n	8007102 <USBH_HandleEnum+0x3be>
      break;
 80070fc:	bf00      	nop
 80070fe:	e000      	b.n	8007102 <USBH_HandleEnum+0x3be>
      break;
 8007100:	bf00      	nop
  }
  return Status;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b082      	sub	sp, #8
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007138:	1c5a      	adds	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f804 	bl	800714e <USBH_HandleSof>
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	2b0b      	cmp	r3, #11
 800715e:	d10a      	bne.n	8007176 <USBH_HandleSof+0x28>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
  }
}
 8007176:	bf00      	nop
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800718e:	bf00      	nop
}
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800719a:	b480      	push	{r7}
 800719c:	b083      	sub	sp, #12
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80071aa:	bf00      	nop
}
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 ff56 	bl	80080b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	791b      	ldrb	r3, [r3, #4]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fda3 	bl	8007d5c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	795b      	ldrb	r3, [r3, #5]
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fd9d 	bl	8007d5c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af02      	add	r7, sp, #8
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800723e:	78fb      	ldrb	r3, [r7, #3]
 8007240:	b29b      	uxth	r3, r3
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	4613      	mov	r3, r2
 8007246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800724a:	2100      	movs	r1, #0
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f864 	bl	800731a <USBH_GetDescriptor>
 8007252:	4603      	mov	r3, r0
 8007254:	73fb      	strb	r3, [r7, #15]
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10a      	bne.n	8007272 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007268:	78fa      	ldrb	r2, [r7, #3]
 800726a:	b292      	uxth	r2, r2
 800726c:	4619      	mov	r1, r3
 800726e:	f000 f918 	bl	80074a2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af02      	add	r7, sp, #8
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	331c      	adds	r3, #28
 800728c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800728e:	887b      	ldrh	r3, [r7, #2]
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007298:	2100      	movs	r1, #0
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f83d 	bl	800731a <USBH_GetDescriptor>
 80072a0:	4603      	mov	r3, r0
 80072a2:	72fb      	strb	r3, [r7, #11]
 80072a4:	7afb      	ldrb	r3, [r7, #11]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d107      	bne.n	80072ba <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80072b0:	887a      	ldrh	r2, [r7, #2]
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 f964 	bl	8007582 <USBH_ParseCfgDesc>
  }

  return status;
 80072ba:	7afb      	ldrb	r3, [r7, #11]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b088      	sub	sp, #32
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	607a      	str	r2, [r7, #4]
 80072ce:	461a      	mov	r2, r3
 80072d0:	460b      	mov	r3, r1
 80072d2:	72fb      	strb	r3, [r7, #11]
 80072d4:	4613      	mov	r3, r2
 80072d6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80072d8:	7afb      	ldrb	r3, [r7, #11]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80072e0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80072e8:	893b      	ldrh	r3, [r7, #8]
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	460b      	mov	r3, r1
 80072ee:	2100      	movs	r1, #0
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f812 	bl	800731a <USBH_GetDescriptor>
 80072f6:	4603      	mov	r3, r0
 80072f8:	75fb      	strb	r3, [r7, #23]
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d107      	bne.n	8007310 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007306:	893a      	ldrh	r2, [r7, #8]
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fa37 	bl	800777e <USBH_ParseStringDesc>
  }

  return status;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	607b      	str	r3, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	72fb      	strb	r3, [r7, #11]
 8007328:	4613      	mov	r3, r2
 800732a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	789b      	ldrb	r3, [r3, #2]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d11c      	bne.n	800736e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007334:	7afb      	ldrb	r3, [r7, #11]
 8007336:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800733a:	b2da      	uxtb	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2206      	movs	r2, #6
 8007344:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	893a      	ldrh	r2, [r7, #8]
 800734a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800734c:	893b      	ldrh	r3, [r7, #8]
 800734e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007356:	d104      	bne.n	8007362 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f240 4209 	movw	r2, #1033	; 0x409
 800735e:	829a      	strh	r2, [r3, #20]
 8007360:	e002      	b.n	8007368 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	8b3a      	ldrh	r2, [r7, #24]
 800736c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800736e:	8b3b      	ldrh	r3, [r7, #24]
 8007370:	461a      	mov	r2, r3
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 fa50 	bl	800781a <USBH_CtlReq>
 800737a:	4603      	mov	r3, r0
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	789b      	ldrb	r3, [r3, #2]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d10f      	bne.n	80073b8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2205      	movs	r2, #5
 80073a2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80073b8:	2200      	movs	r2, #0
 80073ba:	2100      	movs	r1, #0
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fa2c 	bl	800781a <USBH_CtlReq>
 80073c2:	4603      	mov	r3, r0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	789b      	ldrb	r3, [r3, #2]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d10e      	bne.n	80073fe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2209      	movs	r2, #9
 80073ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	887a      	ldrh	r2, [r7, #2]
 80073f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80073fe:	2200      	movs	r2, #0
 8007400:	2100      	movs	r1, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa09 	bl	800781a <USBH_CtlReq>
 8007408:	4603      	mov	r3, r0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	789b      	ldrb	r3, [r3, #2]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d10f      	bne.n	8007446 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2203      	movs	r2, #3
 8007430:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007432:	78fb      	ldrb	r3, [r7, #3]
 8007434:	b29a      	uxth	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007446:	2200      	movs	r2, #0
 8007448:	2100      	movs	r1, #0
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f9e5 	bl	800781a <USBH_CtlReq>
 8007450:	4603      	mov	r3, r0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	460b      	mov	r3, r1
 8007464:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	789b      	ldrb	r3, [r3, #2]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d10f      	bne.n	800748e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2202      	movs	r2, #2
 8007472:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	b29a      	uxth	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800748e:	2200      	movs	r2, #0
 8007490:	2100      	movs	r1, #0
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f9c1 	bl	800781a <USBH_CtlReq>
 8007498:	4603      	mov	r3, r0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	4613      	mov	r3, r2
 80074ae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	781a      	ldrb	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	785a      	ldrb	r2, [r3, #1]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	3302      	adds	r3, #2
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	3303      	adds	r3, #3
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	021b      	lsls	r3, r3, #8
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	4313      	orrs	r3, r2
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	791a      	ldrb	r2, [r3, #4]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	795a      	ldrb	r2, [r3, #5]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	799a      	ldrb	r2, [r3, #6]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	79da      	ldrb	r2, [r3, #7]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d939      	bls.n	8007576 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	3308      	adds	r3, #8
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	b29a      	uxth	r2, r3
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	3309      	adds	r3, #9
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	b29b      	uxth	r3, r3
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	b29b      	uxth	r3, r3
 8007516:	4313      	orrs	r3, r2
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	330a      	adds	r3, #10
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	b29a      	uxth	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	330b      	adds	r3, #11
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	b29b      	uxth	r3, r3
 800752e:	021b      	lsls	r3, r3, #8
 8007530:	b29b      	uxth	r3, r3
 8007532:	4313      	orrs	r3, r2
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	330c      	adds	r3, #12
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	b29a      	uxth	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	330d      	adds	r3, #13
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	b29b      	uxth	r3, r3
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	b29b      	uxth	r3, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	7b9a      	ldrb	r2, [r3, #14]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	7bda      	ldrb	r2, [r3, #15]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	7c1a      	ldrb	r2, [r3, #16]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	7c5a      	ldrb	r2, [r3, #17]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	745a      	strb	r2, [r3, #17]
  }
}
 8007576:	bf00      	nop
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b08a      	sub	sp, #40	; 0x28
 8007586:	af00      	add	r7, sp, #0
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	4613      	mov	r3, r2
 800758e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	781a      	ldrb	r2, [r3, #0]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	785a      	ldrb	r2, [r3, #1]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	3302      	adds	r3, #2
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	3303      	adds	r3, #3
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	021b      	lsls	r3, r3, #8
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	4313      	orrs	r3, r2
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	791a      	ldrb	r2, [r3, #4]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	795a      	ldrb	r2, [r3, #5]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	799a      	ldrb	r2, [r3, #6]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	79da      	ldrb	r2, [r3, #7]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	7a1a      	ldrb	r2, [r3, #8]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80075f8:	88fb      	ldrh	r3, [r7, #6]
 80075fa:	2b09      	cmp	r3, #9
 80075fc:	d95f      	bls.n	80076be <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80075fe:	2309      	movs	r3, #9
 8007600:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007606:	e051      	b.n	80076ac <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007608:	f107 0316 	add.w	r3, r7, #22
 800760c:	4619      	mov	r1, r3
 800760e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007610:	f000 f8e8 	bl	80077e4 <USBH_GetNextDesc>
 8007614:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	2b04      	cmp	r3, #4
 800761c:	d146      	bne.n	80076ac <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800761e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007622:	221a      	movs	r2, #26
 8007624:	fb02 f303 	mul.w	r3, r2, r3
 8007628:	3308      	adds	r3, #8
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	3302      	adds	r3, #2
 8007630:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007634:	69f8      	ldr	r0, [r7, #28]
 8007636:	f000 f846 	bl	80076c6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007640:	2300      	movs	r3, #0
 8007642:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007644:	e022      	b.n	800768c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007646:	f107 0316 	add.w	r3, r7, #22
 800764a:	4619      	mov	r1, r3
 800764c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800764e:	f000 f8c9 	bl	80077e4 <USBH_GetNextDesc>
 8007652:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	785b      	ldrb	r3, [r3, #1]
 8007658:	2b05      	cmp	r3, #5
 800765a:	d117      	bne.n	800768c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800765c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007660:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007664:	3201      	adds	r2, #1
 8007666:	00d2      	lsls	r2, r2, #3
 8007668:	211a      	movs	r1, #26
 800766a:	fb01 f303 	mul.w	r3, r1, r3
 800766e:	4413      	add	r3, r2
 8007670:	3308      	adds	r3, #8
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	4413      	add	r3, r2
 8007676:	3304      	adds	r3, #4
 8007678:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800767a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800767c:	69b8      	ldr	r0, [r7, #24]
 800767e:	f000 f851 	bl	8007724 <USBH_ParseEPDesc>
            ep_ix++;
 8007682:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007686:	3301      	adds	r3, #1
 8007688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	791b      	ldrb	r3, [r3, #4]
 8007690:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007694:	429a      	cmp	r2, r3
 8007696:	d204      	bcs.n	80076a2 <USBH_ParseCfgDesc+0x120>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	885a      	ldrh	r2, [r3, #2]
 800769c:	8afb      	ldrh	r3, [r7, #22]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d8d1      	bhi.n	8007646 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80076a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076a6:	3301      	adds	r3, #1
 80076a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d804      	bhi.n	80076be <USBH_ParseCfgDesc+0x13c>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	885a      	ldrh	r2, [r3, #2]
 80076b8:	8afb      	ldrh	r3, [r7, #22]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d8a4      	bhi.n	8007608 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80076be:	bf00      	nop
 80076c0:	3728      	adds	r7, #40	; 0x28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781a      	ldrb	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	785a      	ldrb	r2, [r3, #1]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	789a      	ldrb	r2, [r3, #2]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	78da      	ldrb	r2, [r3, #3]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	791a      	ldrb	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	795a      	ldrb	r2, [r3, #5]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	799a      	ldrb	r2, [r3, #6]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	79da      	ldrb	r2, [r3, #7]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	7a1a      	ldrb	r2, [r3, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	721a      	strb	r2, [r3, #8]
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781a      	ldrb	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	785a      	ldrb	r2, [r3, #1]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	789a      	ldrb	r2, [r3, #2]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	78da      	ldrb	r2, [r3, #3]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	3304      	adds	r3, #4
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	b29a      	uxth	r2, r3
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	3305      	adds	r3, #5
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	021b      	lsls	r3, r3, #8
 8007760:	b29b      	uxth	r3, r3
 8007762:	4313      	orrs	r3, r2
 8007764:	b29a      	uxth	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	799a      	ldrb	r2, [r3, #6]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	719a      	strb	r2, [r3, #6]
}
 8007772:	bf00      	nop
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800777e:	b480      	push	{r7}
 8007780:	b087      	sub	sp, #28
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	4613      	mov	r3, r2
 800778a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3301      	adds	r3, #1
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b03      	cmp	r3, #3
 8007794:	d120      	bne.n	80077d8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	1e9a      	subs	r2, r3, #2
 800779c:	88fb      	ldrh	r3, [r7, #6]
 800779e:	4293      	cmp	r3, r2
 80077a0:	bf28      	it	cs
 80077a2:	4613      	movcs	r3, r2
 80077a4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3302      	adds	r3, #2
 80077aa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077ac:	2300      	movs	r3, #0
 80077ae:	82fb      	strh	r3, [r7, #22]
 80077b0:	e00b      	b.n	80077ca <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077b2:	8afb      	ldrh	r3, [r7, #22]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	781a      	ldrb	r2, [r3, #0]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	3301      	adds	r3, #1
 80077c2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077c4:	8afb      	ldrh	r3, [r7, #22]
 80077c6:	3302      	adds	r3, #2
 80077c8:	82fb      	strh	r3, [r7, #22]
 80077ca:	8afa      	ldrh	r2, [r7, #22]
 80077cc:	8abb      	ldrh	r3, [r7, #20]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3ef      	bcc.n	80077b2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
  }
}
 80077d8:	bf00      	nop
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	881a      	ldrh	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4413      	add	r3, r2
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4413      	add	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800780c:	68fb      	ldr	r3, [r7, #12]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b086      	sub	sp, #24
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	4613      	mov	r3, r2
 8007826:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007828:	2301      	movs	r3, #1
 800782a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	789b      	ldrb	r3, [r3, #2]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d002      	beq.n	800783a <USBH_CtlReq+0x20>
 8007834:	2b02      	cmp	r3, #2
 8007836:	d00f      	beq.n	8007858 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007838:	e027      	b.n	800788a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	88fa      	ldrh	r2, [r7, #6]
 8007844:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2202      	movs	r2, #2
 8007850:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007852:	2301      	movs	r3, #1
 8007854:	75fb      	strb	r3, [r7, #23]
      break;
 8007856:	e018      	b.n	800788a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 f81b 	bl	8007894 <USBH_HandleControl>
 800785e:	4603      	mov	r3, r0
 8007860:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007862:	7dfb      	ldrb	r3, [r7, #23]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <USBH_CtlReq+0x54>
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	2b03      	cmp	r3, #3
 800786c:	d106      	bne.n	800787c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	761a      	strb	r2, [r3, #24]
      break;
 800787a:	e005      	b.n	8007888 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d102      	bne.n	8007888 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	709a      	strb	r2, [r3, #2]
      break;
 8007888:	bf00      	nop
  }
  return status;
 800788a:	7dfb      	ldrb	r3, [r7, #23]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af02      	add	r7, sp, #8
 800789a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800789c:	2301      	movs	r3, #1
 800789e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7e1b      	ldrb	r3, [r3, #24]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	2b0a      	cmp	r3, #10
 80078ac:	f200 8156 	bhi.w	8007b5c <USBH_HandleControl+0x2c8>
 80078b0:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <USBH_HandleControl+0x24>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078e5 	.word	0x080078e5
 80078bc:	080078ff 	.word	0x080078ff
 80078c0:	08007969 	.word	0x08007969
 80078c4:	0800798f 	.word	0x0800798f
 80078c8:	080079c7 	.word	0x080079c7
 80078cc:	080079f1 	.word	0x080079f1
 80078d0:	08007a43 	.word	0x08007a43
 80078d4:	08007a65 	.word	0x08007a65
 80078d8:	08007aa1 	.word	0x08007aa1
 80078dc:	08007ac7 	.word	0x08007ac7
 80078e0:	08007b05 	.word	0x08007b05
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f103 0110 	add.w	r1, r3, #16
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	795b      	ldrb	r3, [r3, #5]
 80078ee:	461a      	mov	r2, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f943 	bl	8007b7c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	761a      	strb	r2, [r3, #24]
      break;
 80078fc:	e139      	b.n	8007b72 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	795b      	ldrb	r3, [r3, #5]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fcc5 	bl	8008294 <USBH_LL_GetURBState>
 800790a:	4603      	mov	r3, r0
 800790c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d11e      	bne.n	8007952 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	7c1b      	ldrb	r3, [r3, #16]
 8007918:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800791c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	8adb      	ldrh	r3, [r3, #22]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007926:	7b7b      	ldrb	r3, [r7, #13]
 8007928:	2b80      	cmp	r3, #128	; 0x80
 800792a:	d103      	bne.n	8007934 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2203      	movs	r2, #3
 8007930:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007932:	e115      	b.n	8007b60 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2205      	movs	r2, #5
 8007938:	761a      	strb	r2, [r3, #24]
      break;
 800793a:	e111      	b.n	8007b60 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800793c:	7b7b      	ldrb	r3, [r7, #13]
 800793e:	2b80      	cmp	r3, #128	; 0x80
 8007940:	d103      	bne.n	800794a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2209      	movs	r2, #9
 8007946:	761a      	strb	r2, [r3, #24]
      break;
 8007948:	e10a      	b.n	8007b60 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2207      	movs	r2, #7
 800794e:	761a      	strb	r2, [r3, #24]
      break;
 8007950:	e106      	b.n	8007b60 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	2b04      	cmp	r3, #4
 8007956:	d003      	beq.n	8007960 <USBH_HandleControl+0xcc>
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	2b02      	cmp	r3, #2
 800795c:	f040 8100 	bne.w	8007b60 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	220b      	movs	r2, #11
 8007964:	761a      	strb	r2, [r3, #24]
      break;
 8007966:	e0fb      	b.n	8007b60 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800796e:	b29a      	uxth	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6899      	ldr	r1, [r3, #8]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	899a      	ldrh	r2, [r3, #12]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	791b      	ldrb	r3, [r3, #4]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f93a 	bl	8007bfa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2204      	movs	r2, #4
 800798a:	761a      	strb	r2, [r3, #24]
      break;
 800798c:	e0f1      	b.n	8007b72 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	791b      	ldrb	r3, [r3, #4]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fc7d 	bl	8008294 <USBH_LL_GetURBState>
 800799a:	4603      	mov	r3, r0
 800799c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d102      	bne.n	80079aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2209      	movs	r2, #9
 80079a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b05      	cmp	r3, #5
 80079ae:	d102      	bne.n	80079b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079b0:	2303      	movs	r3, #3
 80079b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079b4:	e0d6      	b.n	8007b64 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b04      	cmp	r3, #4
 80079ba:	f040 80d3 	bne.w	8007b64 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	220b      	movs	r2, #11
 80079c2:	761a      	strb	r2, [r3, #24]
      break;
 80079c4:	e0ce      	b.n	8007b64 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6899      	ldr	r1, [r3, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	899a      	ldrh	r2, [r3, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	795b      	ldrb	r3, [r3, #5]
 80079d2:	2001      	movs	r0, #1
 80079d4:	9000      	str	r0, [sp, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f8ea 	bl	8007bb0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2206      	movs	r2, #6
 80079ec:	761a      	strb	r2, [r3, #24]
      break;
 80079ee:	e0c0      	b.n	8007b72 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	795b      	ldrb	r3, [r3, #5]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fc4c 	bl	8008294 <USBH_LL_GetURBState>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d103      	bne.n	8007a0e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2207      	movs	r2, #7
 8007a0a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a0c:	e0ac      	b.n	8007b68 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b05      	cmp	r3, #5
 8007a12:	d105      	bne.n	8007a20 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	220c      	movs	r2, #12
 8007a18:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a1e:	e0a3      	b.n	8007b68 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d103      	bne.n	8007a2e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2205      	movs	r2, #5
 8007a2a:	761a      	strb	r2, [r3, #24]
      break;
 8007a2c:	e09c      	b.n	8007b68 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	f040 8099 	bne.w	8007b68 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	220b      	movs	r2, #11
 8007a3a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a40:	e092      	b.n	8007b68 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	791b      	ldrb	r3, [r3, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	2100      	movs	r1, #0
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f8d5 	bl	8007bfa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2208      	movs	r2, #8
 8007a60:	761a      	strb	r2, [r3, #24]

      break;
 8007a62:	e086      	b.n	8007b72 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	791b      	ldrb	r3, [r3, #4]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fc12 	bl	8008294 <USBH_LL_GetURBState>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d105      	bne.n	8007a86 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	220d      	movs	r2, #13
 8007a7e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a84:	e072      	b.n	8007b6c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d103      	bne.n	8007a94 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	220b      	movs	r2, #11
 8007a90:	761a      	strb	r2, [r3, #24]
      break;
 8007a92:	e06b      	b.n	8007b6c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b05      	cmp	r3, #5
 8007a98:	d168      	bne.n	8007b6c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a9e:	e065      	b.n	8007b6c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	795b      	ldrb	r3, [r3, #5]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	9200      	str	r2, [sp, #0]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f87f 	bl	8007bb0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	220a      	movs	r2, #10
 8007ac2:	761a      	strb	r2, [r3, #24]
      break;
 8007ac4:	e055      	b.n	8007b72 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	795b      	ldrb	r3, [r3, #5]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fbe1 	bl	8008294 <USBH_LL_GetURBState>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d105      	bne.n	8007ae8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	220d      	movs	r2, #13
 8007ae4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ae6:	e043      	b.n	8007b70 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d103      	bne.n	8007af6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2209      	movs	r2, #9
 8007af2:	761a      	strb	r2, [r3, #24]
      break;
 8007af4:	e03c      	b.n	8007b70 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007af6:	7bbb      	ldrb	r3, [r7, #14]
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d139      	bne.n	8007b70 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	220b      	movs	r2, #11
 8007b00:	761a      	strb	r2, [r3, #24]
      break;
 8007b02:	e035      	b.n	8007b70 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	7e5b      	ldrb	r3, [r3, #25]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	b2da      	uxtb	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	765a      	strb	r2, [r3, #25]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	7e5b      	ldrb	r3, [r3, #25]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d806      	bhi.n	8007b26 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b24:	e025      	b.n	8007b72 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b2c:	2106      	movs	r1, #6
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	795b      	ldrb	r3, [r3, #5]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f90c 	bl	8007d5c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	791b      	ldrb	r3, [r3, #4]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f906 	bl	8007d5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b56:	2302      	movs	r3, #2
 8007b58:	73fb      	strb	r3, [r7, #15]
      break;
 8007b5a:	e00a      	b.n	8007b72 <USBH_HandleControl+0x2de>

    default:
      break;
 8007b5c:	bf00      	nop
 8007b5e:	e008      	b.n	8007b72 <USBH_HandleControl+0x2de>
      break;
 8007b60:	bf00      	nop
 8007b62:	e006      	b.n	8007b72 <USBH_HandleControl+0x2de>
      break;
 8007b64:	bf00      	nop
 8007b66:	e004      	b.n	8007b72 <USBH_HandleControl+0x2de>
      break;
 8007b68:	bf00      	nop
 8007b6a:	e002      	b.n	8007b72 <USBH_HandleControl+0x2de>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e000      	b.n	8007b72 <USBH_HandleControl+0x2de>
      break;
 8007b70:	bf00      	nop
  }

  return status;
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af04      	add	r7, sp, #16
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4613      	mov	r3, r2
 8007b88:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b8a:	79f9      	ldrb	r1, [r7, #7]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9303      	str	r3, [sp, #12]
 8007b90:	2308      	movs	r3, #8
 8007b92:	9302      	str	r3, [sp, #8]
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 fb46 	bl	8008232 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b088      	sub	sp, #32
 8007bb4:	af04      	add	r7, sp, #16
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	4611      	mov	r1, r2
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	80fb      	strh	r3, [r7, #6]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bd4:	7979      	ldrb	r1, [r7, #5]
 8007bd6:	7e3b      	ldrb	r3, [r7, #24]
 8007bd8:	9303      	str	r3, [sp, #12]
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	9302      	str	r3, [sp, #8]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	2301      	movs	r3, #1
 8007be4:	9300      	str	r3, [sp, #0]
 8007be6:	2300      	movs	r3, #0
 8007be8:	2200      	movs	r2, #0
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fb21 	bl	8008232 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b088      	sub	sp, #32
 8007bfe:	af04      	add	r7, sp, #16
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	4611      	mov	r1, r2
 8007c06:	461a      	mov	r2, r3
 8007c08:	460b      	mov	r3, r1
 8007c0a:	80fb      	strh	r3, [r7, #6]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c10:	7979      	ldrb	r1, [r7, #5]
 8007c12:	2300      	movs	r3, #0
 8007c14:	9303      	str	r3, [sp, #12]
 8007c16:	88fb      	ldrh	r3, [r7, #6]
 8007c18:	9302      	str	r3, [sp, #8]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	2301      	movs	r3, #1
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	2300      	movs	r3, #0
 8007c24:	2201      	movs	r2, #1
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 fb03 	bl	8008232 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007c2c:	2300      	movs	r3, #0

}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b088      	sub	sp, #32
 8007c3a:	af04      	add	r7, sp, #16
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	4611      	mov	r1, r2
 8007c42:	461a      	mov	r2, r3
 8007c44:	460b      	mov	r3, r1
 8007c46:	80fb      	strh	r3, [r7, #6]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c5a:	7979      	ldrb	r1, [r7, #5]
 8007c5c:	7e3b      	ldrb	r3, [r7, #24]
 8007c5e:	9303      	str	r3, [sp, #12]
 8007c60:	88fb      	ldrh	r3, [r7, #6]
 8007c62:	9302      	str	r3, [sp, #8]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	2301      	movs	r3, #1
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	2200      	movs	r2, #0
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fade 	bl	8008232 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af04      	add	r7, sp, #16
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	460b      	mov	r3, r1
 8007c90:	80fb      	strh	r3, [r7, #6]
 8007c92:	4613      	mov	r3, r2
 8007c94:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c96:	7979      	ldrb	r1, [r7, #5]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9303      	str	r3, [sp, #12]
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	9302      	str	r3, [sp, #8]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	2302      	movs	r3, #2
 8007caa:	2201      	movs	r2, #1
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fac0 	bl	8008232 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af04      	add	r7, sp, #16
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4603      	mov	r3, r0
 8007ccc:	70fb      	strb	r3, [r7, #3]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70bb      	strb	r3, [r7, #2]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007cd6:	7878      	ldrb	r0, [r7, #1]
 8007cd8:	78ba      	ldrb	r2, [r7, #2]
 8007cda:	78f9      	ldrb	r1, [r7, #3]
 8007cdc:	8b3b      	ldrh	r3, [r7, #24]
 8007cde:	9302      	str	r3, [sp, #8]
 8007ce0:	7d3b      	ldrb	r3, [r7, #20]
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	7c3b      	ldrb	r3, [r7, #16]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4603      	mov	r3, r0
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa53 	bl	8008196 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007d06:	78fb      	ldrb	r3, [r7, #3]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa72 	bl	80081f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f836 	bl	8007d98 <USBH_GetFreePipe>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d30:	89fb      	ldrh	r3, [r7, #14]
 8007d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d00a      	beq.n	8007d50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	89fb      	ldrh	r3, [r7, #14]
 8007d3e:	f003 030f 	and.w	r3, r3, #15
 8007d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	33e0      	adds	r3, #224	; 0xe0
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	440b      	add	r3, r1
 8007d4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d50:	89fb      	ldrh	r3, [r7, #14]
 8007d52:	b2db      	uxtb	r3, r3
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	460b      	mov	r3, r1
 8007d66:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007d68:	78fb      	ldrb	r3, [r7, #3]
 8007d6a:	2b0a      	cmp	r3, #10
 8007d6c:	d80d      	bhi.n	8007d8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	33e0      	adds	r3, #224	; 0xe0
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	33e0      	adds	r3, #224	; 0xe0
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
 8007da8:	e00f      	b.n	8007dca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	33e0      	adds	r3, #224	; 0xe0
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d102      	bne.n	8007dc4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	e007      	b.n	8007dd4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	73fb      	strb	r3, [r7, #15]
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	2b0a      	cmp	r3, #10
 8007dce:	d9ec      	bls.n	8007daa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007de4:	2201      	movs	r2, #1
 8007de6:	490e      	ldr	r1, [pc, #56]	; (8007e20 <MX_USB_HOST_Init+0x40>)
 8007de8:	480e      	ldr	r0, [pc, #56]	; (8007e24 <MX_USB_HOST_Init+0x44>)
 8007dea:	f7fe fca1 	bl	8006730 <USBH_Init>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007df4:	f7f8 ff00 	bl	8000bf8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007df8:	490b      	ldr	r1, [pc, #44]	; (8007e28 <MX_USB_HOST_Init+0x48>)
 8007dfa:	480a      	ldr	r0, [pc, #40]	; (8007e24 <MX_USB_HOST_Init+0x44>)
 8007dfc:	f7fe fd26 	bl	800684c <USBH_RegisterClass>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e06:	f7f8 fef7 	bl	8000bf8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e0a:	4806      	ldr	r0, [pc, #24]	; (8007e24 <MX_USB_HOST_Init+0x44>)
 8007e0c:	f7fe fdaa 	bl	8006964 <USBH_Start>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e16:	f7f8 feef 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e1a:	bf00      	nop
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	08007e41 	.word	0x08007e41
 8007e24:	200001f8 	.word	0x200001f8
 8007e28:	2000000c 	.word	0x2000000c

08007e2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e30:	4802      	ldr	r0, [pc, #8]	; (8007e3c <MX_USB_HOST_Process+0x10>)
 8007e32:	f7fe fda7 	bl	8006984 <USBH_Process>
}
 8007e36:	bf00      	nop
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	200001f8 	.word	0x200001f8

08007e40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d819      	bhi.n	8007e88 <USBH_UserProcess+0x48>
 8007e54:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <USBH_UserProcess+0x1c>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e89 	.word	0x08007e89
 8007e60:	08007e79 	.word	0x08007e79
 8007e64:	08007e89 	.word	0x08007e89
 8007e68:	08007e81 	.word	0x08007e81
 8007e6c:	08007e71 	.word	0x08007e71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e70:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <USBH_UserProcess+0x58>)
 8007e72:	2203      	movs	r2, #3
 8007e74:	701a      	strb	r2, [r3, #0]
  break;
 8007e76:	e008      	b.n	8007e8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e78:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <USBH_UserProcess+0x58>)
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	701a      	strb	r2, [r3, #0]
  break;
 8007e7e:	e004      	b.n	8007e8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e80:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <USBH_UserProcess+0x58>)
 8007e82:	2201      	movs	r2, #1
 8007e84:	701a      	strb	r2, [r3, #0]
  break;
 8007e86:	e000      	b.n	8007e8a <USBH_UserProcess+0x4a>

  default:
  break;
 8007e88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	200000b0 	.word	0x200000b0

08007e9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ea4:	f107 0314 	add.w	r3, r7, #20
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	605a      	str	r2, [r3, #4]
 8007eae:	609a      	str	r2, [r3, #8]
 8007eb0:	60da      	str	r2, [r3, #12]
 8007eb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ebc:	d147      	bne.n	8007f4e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
 8007ec2:	4b25      	ldr	r3, [pc, #148]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec6:	4a24      	ldr	r2, [pc, #144]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007ec8:	f043 0301 	orr.w	r3, r3, #1
 8007ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ece:	4b22      	ldr	r3, [pc, #136]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ee8:	f107 0314 	add.w	r3, r7, #20
 8007eec:	4619      	mov	r1, r3
 8007eee:	481b      	ldr	r0, [pc, #108]	; (8007f5c <HAL_HCD_MspInit+0xc0>)
 8007ef0:	f7f9 fa56 	bl	80013a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ef4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007efa:	2302      	movs	r3, #2
 8007efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f02:	2300      	movs	r3, #0
 8007f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f06:	230a      	movs	r3, #10
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f0a:	f107 0314 	add.w	r3, r7, #20
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4812      	ldr	r0, [pc, #72]	; (8007f5c <HAL_HCD_MspInit+0xc0>)
 8007f12:	f7f9 fa45 	bl	80013a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f16:	4b10      	ldr	r3, [pc, #64]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1a:	4a0f      	ldr	r2, [pc, #60]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f20:	6353      	str	r3, [r2, #52]	; 0x34
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]
 8007f26:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2a:	4a0b      	ldr	r2, [pc, #44]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f30:	6453      	str	r3, [r2, #68]	; 0x44
 8007f32:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2100      	movs	r1, #0
 8007f42:	2043      	movs	r0, #67	; 0x43
 8007f44:	f7f9 f9f5 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f48:	2043      	movs	r0, #67	; 0x43
 8007f4a:	f7f9 fa0e 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f4e:	bf00      	nop
 8007f50:	3728      	adds	r7, #40	; 0x28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	40023800 	.word	0x40023800
 8007f5c:	40020000 	.word	0x40020000

08007f60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff f8db 	bl	800712a <USBH_LL_IncTimer>
}
 8007f74:	bf00      	nop
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7ff f913 	bl	80071b6 <USBH_LL_Connect>
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff f91c 	bl	80071e4 <USBH_LL_Disconnect>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff f8cd 	bl	800717e <USBH_LL_PortEnabled>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7ff f8cd 	bl	800719a <USBH_LL_PortDisabled>
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008016:	2b01      	cmp	r3, #1
 8008018:	d12a      	bne.n	8008070 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800801a:	4a18      	ldr	r2, [pc, #96]	; (800807c <USBH_LL_Init+0x74>)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a15      	ldr	r2, [pc, #84]	; (800807c <USBH_LL_Init+0x74>)
 8008026:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800802a:	4b14      	ldr	r3, [pc, #80]	; (800807c <USBH_LL_Init+0x74>)
 800802c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008030:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008032:	4b12      	ldr	r3, [pc, #72]	; (800807c <USBH_LL_Init+0x74>)
 8008034:	2208      	movs	r2, #8
 8008036:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008038:	4b10      	ldr	r3, [pc, #64]	; (800807c <USBH_LL_Init+0x74>)
 800803a:	2201      	movs	r2, #1
 800803c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800803e:	4b0f      	ldr	r3, [pc, #60]	; (800807c <USBH_LL_Init+0x74>)
 8008040:	2200      	movs	r2, #0
 8008042:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008044:	4b0d      	ldr	r3, [pc, #52]	; (800807c <USBH_LL_Init+0x74>)
 8008046:	2202      	movs	r2, #2
 8008048:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800804a:	4b0c      	ldr	r3, [pc, #48]	; (800807c <USBH_LL_Init+0x74>)
 800804c:	2200      	movs	r2, #0
 800804e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008050:	480a      	ldr	r0, [pc, #40]	; (800807c <USBH_LL_Init+0x74>)
 8008052:	f7f9 fb72 	bl	800173a <HAL_HCD_Init>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800805c:	f7f8 fdcc 	bl	8000bf8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008060:	4806      	ldr	r0, [pc, #24]	; (800807c <USBH_LL_Init+0x74>)
 8008062:	f7f9 ff56 	bl	8001f12 <HAL_HCD_GetCurrentFrame>
 8008066:	4603      	mov	r3, r0
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff f84e 	bl	800710c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	200005d0 	.word	0x200005d0

08008080 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008096:	4618      	mov	r0, r3
 8008098:	f7f9 fec5 	bl	8001e26 <HAL_HCD_Start>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f95c 	bl	8008360 <USBH_Get_USB_Status>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7f9 fecd 	bl	8001e6c <HAL_HCD_Stop>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 f941 	bl	8008360 <USBH_Get_USB_Status>
 80080de:	4603      	mov	r3, r0
 80080e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080fe:	4618      	mov	r0, r3
 8008100:	f7f9 ff15 	bl	8001f2e <HAL_HCD_GetCurrentSpeed>
 8008104:	4603      	mov	r3, r0
 8008106:	2b02      	cmp	r3, #2
 8008108:	d00c      	beq.n	8008124 <USBH_LL_GetSpeed+0x38>
 800810a:	2b02      	cmp	r3, #2
 800810c:	d80d      	bhi.n	800812a <USBH_LL_GetSpeed+0x3e>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <USBH_LL_GetSpeed+0x2c>
 8008112:	2b01      	cmp	r3, #1
 8008114:	d003      	beq.n	800811e <USBH_LL_GetSpeed+0x32>
 8008116:	e008      	b.n	800812a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]
    break;
 800811c:	e008      	b.n	8008130 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800811e:	2301      	movs	r3, #1
 8008120:	73fb      	strb	r3, [r7, #15]
    break;
 8008122:	e005      	b.n	8008130 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008124:	2302      	movs	r3, #2
 8008126:	73fb      	strb	r3, [r7, #15]
    break;
 8008128:	e002      	b.n	8008130 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800812a:	2301      	movs	r3, #1
 800812c:	73fb      	strb	r3, [r7, #15]
    break;
 800812e:	bf00      	nop
  }
  return  speed;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b084      	sub	sp, #16
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008150:	4618      	mov	r0, r3
 8008152:	f7f9 fea8 	bl	8001ea6 <HAL_HCD_ResetPort>
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800815a:	7bfb      	ldrb	r3, [r7, #15]
 800815c:	4618      	mov	r0, r3
 800815e:	f000 f8ff 	bl	8008360 <USBH_Get_USB_Status>
 8008162:	4603      	mov	r3, r0
 8008164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008166:	7bbb      	ldrb	r3, [r7, #14]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008182:	78fa      	ldrb	r2, [r7, #3]
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7f9 feaf 	bl	8001eea <HAL_HCD_HC_GetXferCount>
 800818c:	4603      	mov	r3, r0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008196:	b590      	push	{r4, r7, lr}
 8008198:	b089      	sub	sp, #36	; 0x24
 800819a:	af04      	add	r7, sp, #16
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	4608      	mov	r0, r1
 80081a0:	4611      	mov	r1, r2
 80081a2:	461a      	mov	r2, r3
 80081a4:	4603      	mov	r3, r0
 80081a6:	70fb      	strb	r3, [r7, #3]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70bb      	strb	r3, [r7, #2]
 80081ac:	4613      	mov	r3, r2
 80081ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081be:	787c      	ldrb	r4, [r7, #1]
 80081c0:	78ba      	ldrb	r2, [r7, #2]
 80081c2:	78f9      	ldrb	r1, [r7, #3]
 80081c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081c6:	9302      	str	r3, [sp, #8]
 80081c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081cc:	9301      	str	r3, [sp, #4]
 80081ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	4623      	mov	r3, r4
 80081d6:	f7f9 fb12 	bl	80017fe <HAL_HCD_HC_Init>
 80081da:	4603      	mov	r3, r0
 80081dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 f8bd 	bl	8008360 <USBH_Get_USB_Status>
 80081e6:	4603      	mov	r3, r0
 80081e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd90      	pop	{r4, r7, pc}

080081f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7f9 fb82 	bl	800191c <HAL_HCD_HC_Halt>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	4618      	mov	r0, r3
 8008220:	f000 f89e 	bl	8008360 <USBH_Get_USB_Status>
 8008224:	4603      	mov	r3, r0
 8008226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008228:	7bbb      	ldrb	r3, [r7, #14]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008232:	b590      	push	{r4, r7, lr}
 8008234:	b089      	sub	sp, #36	; 0x24
 8008236:	af04      	add	r7, sp, #16
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	4608      	mov	r0, r1
 800823c:	4611      	mov	r1, r2
 800823e:	461a      	mov	r2, r3
 8008240:	4603      	mov	r3, r0
 8008242:	70fb      	strb	r3, [r7, #3]
 8008244:	460b      	mov	r3, r1
 8008246:	70bb      	strb	r3, [r7, #2]
 8008248:	4613      	mov	r3, r2
 800824a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800825a:	787c      	ldrb	r4, [r7, #1]
 800825c:	78ba      	ldrb	r2, [r7, #2]
 800825e:	78f9      	ldrb	r1, [r7, #3]
 8008260:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008264:	9303      	str	r3, [sp, #12]
 8008266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008268:	9302      	str	r3, [sp, #8]
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	4623      	mov	r3, r4
 8008276:	f7f9 fb75 	bl	8001964 <HAL_HCD_HC_SubmitRequest>
 800827a:	4603      	mov	r3, r0
 800827c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	4618      	mov	r0, r3
 8008282:	f000 f86d 	bl	8008360 <USBH_Get_USB_Status>
 8008286:	4603      	mov	r3, r0
 8008288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800828a:	7bbb      	ldrb	r3, [r7, #14]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	bd90      	pop	{r4, r7, pc}

08008294 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082a6:	78fa      	ldrb	r2, [r7, #3]
 80082a8:	4611      	mov	r1, r2
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f9 fe09 	bl	8001ec2 <HAL_HCD_HC_GetURBState>
 80082b0:	4603      	mov	r3, r0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d103      	bne.n	80082d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80082d0:	78fb      	ldrb	r3, [r7, #3]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 f870 	bl	80083b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80082d8:	20c8      	movs	r0, #200	; 0xc8
 80082da:	f7f8 ff2b 	bl	8001134 <HAL_Delay>
  return USBH_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
 80082f4:	4613      	mov	r3, r2
 80082f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	212c      	movs	r1, #44	; 0x2c
 8008306:	fb01 f303 	mul.w	r3, r1, r3
 800830a:	4413      	add	r3, r2
 800830c:	333b      	adds	r3, #59	; 0x3b
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d009      	beq.n	8008328 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	212c      	movs	r1, #44	; 0x2c
 800831a:	fb01 f303 	mul.w	r3, r1, r3
 800831e:	4413      	add	r3, r2
 8008320:	3354      	adds	r3, #84	; 0x54
 8008322:	78ba      	ldrb	r2, [r7, #2]
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	e008      	b.n	800833a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	212c      	movs	r1, #44	; 0x2c
 800832e:	fb01 f303 	mul.w	r3, r1, r3
 8008332:	4413      	add	r3, r2
 8008334:	3355      	adds	r3, #85	; 0x55
 8008336:	78ba      	ldrb	r2, [r7, #2]
 8008338:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7f8 feef 	bl	8001134 <HAL_Delay>
}
 8008356:	bf00      	nop
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	2b03      	cmp	r3, #3
 8008372:	d817      	bhi.n	80083a4 <USBH_Get_USB_Status+0x44>
 8008374:	a201      	add	r2, pc, #4	; (adr r2, 800837c <USBH_Get_USB_Status+0x1c>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	0800838d 	.word	0x0800838d
 8008380:	08008393 	.word	0x08008393
 8008384:	08008399 	.word	0x08008399
 8008388:	0800839f 	.word	0x0800839f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
    break;
 8008390:	e00b      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008392:	2302      	movs	r3, #2
 8008394:	73fb      	strb	r3, [r7, #15]
    break;
 8008396:	e008      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008398:	2301      	movs	r3, #1
 800839a:	73fb      	strb	r3, [r7, #15]
    break;
 800839c:	e005      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	73fb      	strb	r3, [r7, #15]
    break;
 80083a2:	e002      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083a4:	2302      	movs	r3, #2
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	bf00      	nop
  }
  return usb_status;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d102      	bne.n	80083d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
 80083d0:	e001      	b.n	80083d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80083d2:	2301      	movs	r3, #1
 80083d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	461a      	mov	r2, r3
 80083da:	2101      	movs	r1, #1
 80083dc:	4803      	ldr	r0, [pc, #12]	; (80083ec <MX_DriverVbusFS+0x34>)
 80083de:	f7f9 f993 	bl	8001708 <HAL_GPIO_WritePin>
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40020800 	.word	0x40020800

080083f0 <__errno>:
 80083f0:	4b01      	ldr	r3, [pc, #4]	; (80083f8 <__errno+0x8>)
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	2000002c 	.word	0x2000002c

080083fc <__libc_init_array>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	4d0d      	ldr	r5, [pc, #52]	; (8008434 <__libc_init_array+0x38>)
 8008400:	4c0d      	ldr	r4, [pc, #52]	; (8008438 <__libc_init_array+0x3c>)
 8008402:	1b64      	subs	r4, r4, r5
 8008404:	10a4      	asrs	r4, r4, #2
 8008406:	2600      	movs	r6, #0
 8008408:	42a6      	cmp	r6, r4
 800840a:	d109      	bne.n	8008420 <__libc_init_array+0x24>
 800840c:	4d0b      	ldr	r5, [pc, #44]	; (800843c <__libc_init_array+0x40>)
 800840e:	4c0c      	ldr	r4, [pc, #48]	; (8008440 <__libc_init_array+0x44>)
 8008410:	f000 fc5e 	bl	8008cd0 <_init>
 8008414:	1b64      	subs	r4, r4, r5
 8008416:	10a4      	asrs	r4, r4, #2
 8008418:	2600      	movs	r6, #0
 800841a:	42a6      	cmp	r6, r4
 800841c:	d105      	bne.n	800842a <__libc_init_array+0x2e>
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	f855 3b04 	ldr.w	r3, [r5], #4
 8008424:	4798      	blx	r3
 8008426:	3601      	adds	r6, #1
 8008428:	e7ee      	b.n	8008408 <__libc_init_array+0xc>
 800842a:	f855 3b04 	ldr.w	r3, [r5], #4
 800842e:	4798      	blx	r3
 8008430:	3601      	adds	r6, #1
 8008432:	e7f2      	b.n	800841a <__libc_init_array+0x1e>
 8008434:	08008d50 	.word	0x08008d50
 8008438:	08008d50 	.word	0x08008d50
 800843c:	08008d50 	.word	0x08008d50
 8008440:	08008d54 	.word	0x08008d54

08008444 <malloc>:
 8008444:	4b02      	ldr	r3, [pc, #8]	; (8008450 <malloc+0xc>)
 8008446:	4601      	mov	r1, r0
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	f000 b863 	b.w	8008514 <_malloc_r>
 800844e:	bf00      	nop
 8008450:	2000002c 	.word	0x2000002c

08008454 <free>:
 8008454:	4b02      	ldr	r3, [pc, #8]	; (8008460 <free+0xc>)
 8008456:	4601      	mov	r1, r0
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	f000 b80b 	b.w	8008474 <_free_r>
 800845e:	bf00      	nop
 8008460:	2000002c 	.word	0x2000002c

08008464 <memset>:
 8008464:	4402      	add	r2, r0
 8008466:	4603      	mov	r3, r0
 8008468:	4293      	cmp	r3, r2
 800846a:	d100      	bne.n	800846e <memset+0xa>
 800846c:	4770      	bx	lr
 800846e:	f803 1b01 	strb.w	r1, [r3], #1
 8008472:	e7f9      	b.n	8008468 <memset+0x4>

08008474 <_free_r>:
 8008474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008476:	2900      	cmp	r1, #0
 8008478:	d048      	beq.n	800850c <_free_r+0x98>
 800847a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800847e:	9001      	str	r0, [sp, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	f1a1 0404 	sub.w	r4, r1, #4
 8008486:	bfb8      	it	lt
 8008488:	18e4      	addlt	r4, r4, r3
 800848a:	f000 f8cd 	bl	8008628 <__malloc_lock>
 800848e:	4a20      	ldr	r2, [pc, #128]	; (8008510 <_free_r+0x9c>)
 8008490:	9801      	ldr	r0, [sp, #4]
 8008492:	6813      	ldr	r3, [r2, #0]
 8008494:	4615      	mov	r5, r2
 8008496:	b933      	cbnz	r3, 80084a6 <_free_r+0x32>
 8008498:	6063      	str	r3, [r4, #4]
 800849a:	6014      	str	r4, [r2, #0]
 800849c:	b003      	add	sp, #12
 800849e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084a2:	f000 b8c7 	b.w	8008634 <__malloc_unlock>
 80084a6:	42a3      	cmp	r3, r4
 80084a8:	d90b      	bls.n	80084c2 <_free_r+0x4e>
 80084aa:	6821      	ldr	r1, [r4, #0]
 80084ac:	1862      	adds	r2, r4, r1
 80084ae:	4293      	cmp	r3, r2
 80084b0:	bf04      	itt	eq
 80084b2:	681a      	ldreq	r2, [r3, #0]
 80084b4:	685b      	ldreq	r3, [r3, #4]
 80084b6:	6063      	str	r3, [r4, #4]
 80084b8:	bf04      	itt	eq
 80084ba:	1852      	addeq	r2, r2, r1
 80084bc:	6022      	streq	r2, [r4, #0]
 80084be:	602c      	str	r4, [r5, #0]
 80084c0:	e7ec      	b.n	800849c <_free_r+0x28>
 80084c2:	461a      	mov	r2, r3
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	b10b      	cbz	r3, 80084cc <_free_r+0x58>
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d9fa      	bls.n	80084c2 <_free_r+0x4e>
 80084cc:	6811      	ldr	r1, [r2, #0]
 80084ce:	1855      	adds	r5, r2, r1
 80084d0:	42a5      	cmp	r5, r4
 80084d2:	d10b      	bne.n	80084ec <_free_r+0x78>
 80084d4:	6824      	ldr	r4, [r4, #0]
 80084d6:	4421      	add	r1, r4
 80084d8:	1854      	adds	r4, r2, r1
 80084da:	42a3      	cmp	r3, r4
 80084dc:	6011      	str	r1, [r2, #0]
 80084de:	d1dd      	bne.n	800849c <_free_r+0x28>
 80084e0:	681c      	ldr	r4, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	6053      	str	r3, [r2, #4]
 80084e6:	4421      	add	r1, r4
 80084e8:	6011      	str	r1, [r2, #0]
 80084ea:	e7d7      	b.n	800849c <_free_r+0x28>
 80084ec:	d902      	bls.n	80084f4 <_free_r+0x80>
 80084ee:	230c      	movs	r3, #12
 80084f0:	6003      	str	r3, [r0, #0]
 80084f2:	e7d3      	b.n	800849c <_free_r+0x28>
 80084f4:	6825      	ldr	r5, [r4, #0]
 80084f6:	1961      	adds	r1, r4, r5
 80084f8:	428b      	cmp	r3, r1
 80084fa:	bf04      	itt	eq
 80084fc:	6819      	ldreq	r1, [r3, #0]
 80084fe:	685b      	ldreq	r3, [r3, #4]
 8008500:	6063      	str	r3, [r4, #4]
 8008502:	bf04      	itt	eq
 8008504:	1949      	addeq	r1, r1, r5
 8008506:	6021      	streq	r1, [r4, #0]
 8008508:	6054      	str	r4, [r2, #4]
 800850a:	e7c7      	b.n	800849c <_free_r+0x28>
 800850c:	b003      	add	sp, #12
 800850e:	bd30      	pop	{r4, r5, pc}
 8008510:	200000b4 	.word	0x200000b4

08008514 <_malloc_r>:
 8008514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008516:	1ccd      	adds	r5, r1, #3
 8008518:	f025 0503 	bic.w	r5, r5, #3
 800851c:	3508      	adds	r5, #8
 800851e:	2d0c      	cmp	r5, #12
 8008520:	bf38      	it	cc
 8008522:	250c      	movcc	r5, #12
 8008524:	2d00      	cmp	r5, #0
 8008526:	4606      	mov	r6, r0
 8008528:	db01      	blt.n	800852e <_malloc_r+0x1a>
 800852a:	42a9      	cmp	r1, r5
 800852c:	d903      	bls.n	8008536 <_malloc_r+0x22>
 800852e:	230c      	movs	r3, #12
 8008530:	6033      	str	r3, [r6, #0]
 8008532:	2000      	movs	r0, #0
 8008534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008536:	f000 f877 	bl	8008628 <__malloc_lock>
 800853a:	4921      	ldr	r1, [pc, #132]	; (80085c0 <_malloc_r+0xac>)
 800853c:	680a      	ldr	r2, [r1, #0]
 800853e:	4614      	mov	r4, r2
 8008540:	b99c      	cbnz	r4, 800856a <_malloc_r+0x56>
 8008542:	4f20      	ldr	r7, [pc, #128]	; (80085c4 <_malloc_r+0xb0>)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	b923      	cbnz	r3, 8008552 <_malloc_r+0x3e>
 8008548:	4621      	mov	r1, r4
 800854a:	4630      	mov	r0, r6
 800854c:	f000 f83c 	bl	80085c8 <_sbrk_r>
 8008550:	6038      	str	r0, [r7, #0]
 8008552:	4629      	mov	r1, r5
 8008554:	4630      	mov	r0, r6
 8008556:	f000 f837 	bl	80085c8 <_sbrk_r>
 800855a:	1c43      	adds	r3, r0, #1
 800855c:	d123      	bne.n	80085a6 <_malloc_r+0x92>
 800855e:	230c      	movs	r3, #12
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	4630      	mov	r0, r6
 8008564:	f000 f866 	bl	8008634 <__malloc_unlock>
 8008568:	e7e3      	b.n	8008532 <_malloc_r+0x1e>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	1b5b      	subs	r3, r3, r5
 800856e:	d417      	bmi.n	80085a0 <_malloc_r+0x8c>
 8008570:	2b0b      	cmp	r3, #11
 8008572:	d903      	bls.n	800857c <_malloc_r+0x68>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	441c      	add	r4, r3
 8008578:	6025      	str	r5, [r4, #0]
 800857a:	e004      	b.n	8008586 <_malloc_r+0x72>
 800857c:	6863      	ldr	r3, [r4, #4]
 800857e:	42a2      	cmp	r2, r4
 8008580:	bf0c      	ite	eq
 8008582:	600b      	streq	r3, [r1, #0]
 8008584:	6053      	strne	r3, [r2, #4]
 8008586:	4630      	mov	r0, r6
 8008588:	f000 f854 	bl	8008634 <__malloc_unlock>
 800858c:	f104 000b 	add.w	r0, r4, #11
 8008590:	1d23      	adds	r3, r4, #4
 8008592:	f020 0007 	bic.w	r0, r0, #7
 8008596:	1ac2      	subs	r2, r0, r3
 8008598:	d0cc      	beq.n	8008534 <_malloc_r+0x20>
 800859a:	1a1b      	subs	r3, r3, r0
 800859c:	50a3      	str	r3, [r4, r2]
 800859e:	e7c9      	b.n	8008534 <_malloc_r+0x20>
 80085a0:	4622      	mov	r2, r4
 80085a2:	6864      	ldr	r4, [r4, #4]
 80085a4:	e7cc      	b.n	8008540 <_malloc_r+0x2c>
 80085a6:	1cc4      	adds	r4, r0, #3
 80085a8:	f024 0403 	bic.w	r4, r4, #3
 80085ac:	42a0      	cmp	r0, r4
 80085ae:	d0e3      	beq.n	8008578 <_malloc_r+0x64>
 80085b0:	1a21      	subs	r1, r4, r0
 80085b2:	4630      	mov	r0, r6
 80085b4:	f000 f808 	bl	80085c8 <_sbrk_r>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d1dd      	bne.n	8008578 <_malloc_r+0x64>
 80085bc:	e7cf      	b.n	800855e <_malloc_r+0x4a>
 80085be:	bf00      	nop
 80085c0:	200000b4 	.word	0x200000b4
 80085c4:	200000b8 	.word	0x200000b8

080085c8 <_sbrk_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d06      	ldr	r5, [pc, #24]	; (80085e4 <_sbrk_r+0x1c>)
 80085cc:	2300      	movs	r3, #0
 80085ce:	4604      	mov	r4, r0
 80085d0:	4608      	mov	r0, r1
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	f7f8 fcca 	bl	8000f6c <_sbrk>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	d102      	bne.n	80085e2 <_sbrk_r+0x1a>
 80085dc:	682b      	ldr	r3, [r5, #0]
 80085de:	b103      	cbz	r3, 80085e2 <_sbrk_r+0x1a>
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	bd38      	pop	{r3, r4, r5, pc}
 80085e4:	200008d4 	.word	0x200008d4

080085e8 <siprintf>:
 80085e8:	b40e      	push	{r1, r2, r3}
 80085ea:	b500      	push	{lr}
 80085ec:	b09c      	sub	sp, #112	; 0x70
 80085ee:	ab1d      	add	r3, sp, #116	; 0x74
 80085f0:	9002      	str	r0, [sp, #8]
 80085f2:	9006      	str	r0, [sp, #24]
 80085f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085f8:	4809      	ldr	r0, [pc, #36]	; (8008620 <siprintf+0x38>)
 80085fa:	9107      	str	r1, [sp, #28]
 80085fc:	9104      	str	r1, [sp, #16]
 80085fe:	4909      	ldr	r1, [pc, #36]	; (8008624 <siprintf+0x3c>)
 8008600:	f853 2b04 	ldr.w	r2, [r3], #4
 8008604:	9105      	str	r1, [sp, #20]
 8008606:	6800      	ldr	r0, [r0, #0]
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	a902      	add	r1, sp, #8
 800860c:	f000 f874 	bl	80086f8 <_svfiprintf_r>
 8008610:	9b02      	ldr	r3, [sp, #8]
 8008612:	2200      	movs	r2, #0
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	b01c      	add	sp, #112	; 0x70
 8008618:	f85d eb04 	ldr.w	lr, [sp], #4
 800861c:	b003      	add	sp, #12
 800861e:	4770      	bx	lr
 8008620:	2000002c 	.word	0x2000002c
 8008624:	ffff0208 	.word	0xffff0208

08008628 <__malloc_lock>:
 8008628:	4801      	ldr	r0, [pc, #4]	; (8008630 <__malloc_lock+0x8>)
 800862a:	f000 baf9 	b.w	8008c20 <__retarget_lock_acquire_recursive>
 800862e:	bf00      	nop
 8008630:	200008dc 	.word	0x200008dc

08008634 <__malloc_unlock>:
 8008634:	4801      	ldr	r0, [pc, #4]	; (800863c <__malloc_unlock+0x8>)
 8008636:	f000 baf4 	b.w	8008c22 <__retarget_lock_release_recursive>
 800863a:	bf00      	nop
 800863c:	200008dc 	.word	0x200008dc

08008640 <__ssputs_r>:
 8008640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	688e      	ldr	r6, [r1, #8]
 8008646:	429e      	cmp	r6, r3
 8008648:	4682      	mov	sl, r0
 800864a:	460c      	mov	r4, r1
 800864c:	4690      	mov	r8, r2
 800864e:	461f      	mov	r7, r3
 8008650:	d838      	bhi.n	80086c4 <__ssputs_r+0x84>
 8008652:	898a      	ldrh	r2, [r1, #12]
 8008654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008658:	d032      	beq.n	80086c0 <__ssputs_r+0x80>
 800865a:	6825      	ldr	r5, [r4, #0]
 800865c:	6909      	ldr	r1, [r1, #16]
 800865e:	eba5 0901 	sub.w	r9, r5, r1
 8008662:	6965      	ldr	r5, [r4, #20]
 8008664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800866c:	3301      	adds	r3, #1
 800866e:	444b      	add	r3, r9
 8008670:	106d      	asrs	r5, r5, #1
 8008672:	429d      	cmp	r5, r3
 8008674:	bf38      	it	cc
 8008676:	461d      	movcc	r5, r3
 8008678:	0553      	lsls	r3, r2, #21
 800867a:	d531      	bpl.n	80086e0 <__ssputs_r+0xa0>
 800867c:	4629      	mov	r1, r5
 800867e:	f7ff ff49 	bl	8008514 <_malloc_r>
 8008682:	4606      	mov	r6, r0
 8008684:	b950      	cbnz	r0, 800869c <__ssputs_r+0x5c>
 8008686:	230c      	movs	r3, #12
 8008688:	f8ca 3000 	str.w	r3, [sl]
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008692:	81a3      	strh	r3, [r4, #12]
 8008694:	f04f 30ff 	mov.w	r0, #4294967295
 8008698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869c:	6921      	ldr	r1, [r4, #16]
 800869e:	464a      	mov	r2, r9
 80086a0:	f000 fac0 	bl	8008c24 <memcpy>
 80086a4:	89a3      	ldrh	r3, [r4, #12]
 80086a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ae:	81a3      	strh	r3, [r4, #12]
 80086b0:	6126      	str	r6, [r4, #16]
 80086b2:	6165      	str	r5, [r4, #20]
 80086b4:	444e      	add	r6, r9
 80086b6:	eba5 0509 	sub.w	r5, r5, r9
 80086ba:	6026      	str	r6, [r4, #0]
 80086bc:	60a5      	str	r5, [r4, #8]
 80086be:	463e      	mov	r6, r7
 80086c0:	42be      	cmp	r6, r7
 80086c2:	d900      	bls.n	80086c6 <__ssputs_r+0x86>
 80086c4:	463e      	mov	r6, r7
 80086c6:	4632      	mov	r2, r6
 80086c8:	6820      	ldr	r0, [r4, #0]
 80086ca:	4641      	mov	r1, r8
 80086cc:	f000 fab8 	bl	8008c40 <memmove>
 80086d0:	68a3      	ldr	r3, [r4, #8]
 80086d2:	6822      	ldr	r2, [r4, #0]
 80086d4:	1b9b      	subs	r3, r3, r6
 80086d6:	4432      	add	r2, r6
 80086d8:	60a3      	str	r3, [r4, #8]
 80086da:	6022      	str	r2, [r4, #0]
 80086dc:	2000      	movs	r0, #0
 80086de:	e7db      	b.n	8008698 <__ssputs_r+0x58>
 80086e0:	462a      	mov	r2, r5
 80086e2:	f000 fac7 	bl	8008c74 <_realloc_r>
 80086e6:	4606      	mov	r6, r0
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d1e1      	bne.n	80086b0 <__ssputs_r+0x70>
 80086ec:	6921      	ldr	r1, [r4, #16]
 80086ee:	4650      	mov	r0, sl
 80086f0:	f7ff fec0 	bl	8008474 <_free_r>
 80086f4:	e7c7      	b.n	8008686 <__ssputs_r+0x46>
	...

080086f8 <_svfiprintf_r>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	4698      	mov	r8, r3
 80086fe:	898b      	ldrh	r3, [r1, #12]
 8008700:	061b      	lsls	r3, r3, #24
 8008702:	b09d      	sub	sp, #116	; 0x74
 8008704:	4607      	mov	r7, r0
 8008706:	460d      	mov	r5, r1
 8008708:	4614      	mov	r4, r2
 800870a:	d50e      	bpl.n	800872a <_svfiprintf_r+0x32>
 800870c:	690b      	ldr	r3, [r1, #16]
 800870e:	b963      	cbnz	r3, 800872a <_svfiprintf_r+0x32>
 8008710:	2140      	movs	r1, #64	; 0x40
 8008712:	f7ff feff 	bl	8008514 <_malloc_r>
 8008716:	6028      	str	r0, [r5, #0]
 8008718:	6128      	str	r0, [r5, #16]
 800871a:	b920      	cbnz	r0, 8008726 <_svfiprintf_r+0x2e>
 800871c:	230c      	movs	r3, #12
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	e0d1      	b.n	80088ca <_svfiprintf_r+0x1d2>
 8008726:	2340      	movs	r3, #64	; 0x40
 8008728:	616b      	str	r3, [r5, #20]
 800872a:	2300      	movs	r3, #0
 800872c:	9309      	str	r3, [sp, #36]	; 0x24
 800872e:	2320      	movs	r3, #32
 8008730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008734:	f8cd 800c 	str.w	r8, [sp, #12]
 8008738:	2330      	movs	r3, #48	; 0x30
 800873a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80088e4 <_svfiprintf_r+0x1ec>
 800873e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008742:	f04f 0901 	mov.w	r9, #1
 8008746:	4623      	mov	r3, r4
 8008748:	469a      	mov	sl, r3
 800874a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800874e:	b10a      	cbz	r2, 8008754 <_svfiprintf_r+0x5c>
 8008750:	2a25      	cmp	r2, #37	; 0x25
 8008752:	d1f9      	bne.n	8008748 <_svfiprintf_r+0x50>
 8008754:	ebba 0b04 	subs.w	fp, sl, r4
 8008758:	d00b      	beq.n	8008772 <_svfiprintf_r+0x7a>
 800875a:	465b      	mov	r3, fp
 800875c:	4622      	mov	r2, r4
 800875e:	4629      	mov	r1, r5
 8008760:	4638      	mov	r0, r7
 8008762:	f7ff ff6d 	bl	8008640 <__ssputs_r>
 8008766:	3001      	adds	r0, #1
 8008768:	f000 80aa 	beq.w	80088c0 <_svfiprintf_r+0x1c8>
 800876c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800876e:	445a      	add	r2, fp
 8008770:	9209      	str	r2, [sp, #36]	; 0x24
 8008772:	f89a 3000 	ldrb.w	r3, [sl]
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 80a2 	beq.w	80088c0 <_svfiprintf_r+0x1c8>
 800877c:	2300      	movs	r3, #0
 800877e:	f04f 32ff 	mov.w	r2, #4294967295
 8008782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008786:	f10a 0a01 	add.w	sl, sl, #1
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	9307      	str	r3, [sp, #28]
 800878e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008792:	931a      	str	r3, [sp, #104]	; 0x68
 8008794:	4654      	mov	r4, sl
 8008796:	2205      	movs	r2, #5
 8008798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800879c:	4851      	ldr	r0, [pc, #324]	; (80088e4 <_svfiprintf_r+0x1ec>)
 800879e:	f7f7 fd1f 	bl	80001e0 <memchr>
 80087a2:	9a04      	ldr	r2, [sp, #16]
 80087a4:	b9d8      	cbnz	r0, 80087de <_svfiprintf_r+0xe6>
 80087a6:	06d0      	lsls	r0, r2, #27
 80087a8:	bf44      	itt	mi
 80087aa:	2320      	movmi	r3, #32
 80087ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087b0:	0711      	lsls	r1, r2, #28
 80087b2:	bf44      	itt	mi
 80087b4:	232b      	movmi	r3, #43	; 0x2b
 80087b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087ba:	f89a 3000 	ldrb.w	r3, [sl]
 80087be:	2b2a      	cmp	r3, #42	; 0x2a
 80087c0:	d015      	beq.n	80087ee <_svfiprintf_r+0xf6>
 80087c2:	9a07      	ldr	r2, [sp, #28]
 80087c4:	4654      	mov	r4, sl
 80087c6:	2000      	movs	r0, #0
 80087c8:	f04f 0c0a 	mov.w	ip, #10
 80087cc:	4621      	mov	r1, r4
 80087ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087d2:	3b30      	subs	r3, #48	; 0x30
 80087d4:	2b09      	cmp	r3, #9
 80087d6:	d94e      	bls.n	8008876 <_svfiprintf_r+0x17e>
 80087d8:	b1b0      	cbz	r0, 8008808 <_svfiprintf_r+0x110>
 80087da:	9207      	str	r2, [sp, #28]
 80087dc:	e014      	b.n	8008808 <_svfiprintf_r+0x110>
 80087de:	eba0 0308 	sub.w	r3, r0, r8
 80087e2:	fa09 f303 	lsl.w	r3, r9, r3
 80087e6:	4313      	orrs	r3, r2
 80087e8:	9304      	str	r3, [sp, #16]
 80087ea:	46a2      	mov	sl, r4
 80087ec:	e7d2      	b.n	8008794 <_svfiprintf_r+0x9c>
 80087ee:	9b03      	ldr	r3, [sp, #12]
 80087f0:	1d19      	adds	r1, r3, #4
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	9103      	str	r1, [sp, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bfbb      	ittet	lt
 80087fa:	425b      	neglt	r3, r3
 80087fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008800:	9307      	strge	r3, [sp, #28]
 8008802:	9307      	strlt	r3, [sp, #28]
 8008804:	bfb8      	it	lt
 8008806:	9204      	strlt	r2, [sp, #16]
 8008808:	7823      	ldrb	r3, [r4, #0]
 800880a:	2b2e      	cmp	r3, #46	; 0x2e
 800880c:	d10c      	bne.n	8008828 <_svfiprintf_r+0x130>
 800880e:	7863      	ldrb	r3, [r4, #1]
 8008810:	2b2a      	cmp	r3, #42	; 0x2a
 8008812:	d135      	bne.n	8008880 <_svfiprintf_r+0x188>
 8008814:	9b03      	ldr	r3, [sp, #12]
 8008816:	1d1a      	adds	r2, r3, #4
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	9203      	str	r2, [sp, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	bfb8      	it	lt
 8008820:	f04f 33ff 	movlt.w	r3, #4294967295
 8008824:	3402      	adds	r4, #2
 8008826:	9305      	str	r3, [sp, #20]
 8008828:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088f4 <_svfiprintf_r+0x1fc>
 800882c:	7821      	ldrb	r1, [r4, #0]
 800882e:	2203      	movs	r2, #3
 8008830:	4650      	mov	r0, sl
 8008832:	f7f7 fcd5 	bl	80001e0 <memchr>
 8008836:	b140      	cbz	r0, 800884a <_svfiprintf_r+0x152>
 8008838:	2340      	movs	r3, #64	; 0x40
 800883a:	eba0 000a 	sub.w	r0, r0, sl
 800883e:	fa03 f000 	lsl.w	r0, r3, r0
 8008842:	9b04      	ldr	r3, [sp, #16]
 8008844:	4303      	orrs	r3, r0
 8008846:	3401      	adds	r4, #1
 8008848:	9304      	str	r3, [sp, #16]
 800884a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884e:	4826      	ldr	r0, [pc, #152]	; (80088e8 <_svfiprintf_r+0x1f0>)
 8008850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008854:	2206      	movs	r2, #6
 8008856:	f7f7 fcc3 	bl	80001e0 <memchr>
 800885a:	2800      	cmp	r0, #0
 800885c:	d038      	beq.n	80088d0 <_svfiprintf_r+0x1d8>
 800885e:	4b23      	ldr	r3, [pc, #140]	; (80088ec <_svfiprintf_r+0x1f4>)
 8008860:	bb1b      	cbnz	r3, 80088aa <_svfiprintf_r+0x1b2>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	3307      	adds	r3, #7
 8008866:	f023 0307 	bic.w	r3, r3, #7
 800886a:	3308      	adds	r3, #8
 800886c:	9303      	str	r3, [sp, #12]
 800886e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008870:	4433      	add	r3, r6
 8008872:	9309      	str	r3, [sp, #36]	; 0x24
 8008874:	e767      	b.n	8008746 <_svfiprintf_r+0x4e>
 8008876:	fb0c 3202 	mla	r2, ip, r2, r3
 800887a:	460c      	mov	r4, r1
 800887c:	2001      	movs	r0, #1
 800887e:	e7a5      	b.n	80087cc <_svfiprintf_r+0xd4>
 8008880:	2300      	movs	r3, #0
 8008882:	3401      	adds	r4, #1
 8008884:	9305      	str	r3, [sp, #20]
 8008886:	4619      	mov	r1, r3
 8008888:	f04f 0c0a 	mov.w	ip, #10
 800888c:	4620      	mov	r0, r4
 800888e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008892:	3a30      	subs	r2, #48	; 0x30
 8008894:	2a09      	cmp	r2, #9
 8008896:	d903      	bls.n	80088a0 <_svfiprintf_r+0x1a8>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0c5      	beq.n	8008828 <_svfiprintf_r+0x130>
 800889c:	9105      	str	r1, [sp, #20]
 800889e:	e7c3      	b.n	8008828 <_svfiprintf_r+0x130>
 80088a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80088a4:	4604      	mov	r4, r0
 80088a6:	2301      	movs	r3, #1
 80088a8:	e7f0      	b.n	800888c <_svfiprintf_r+0x194>
 80088aa:	ab03      	add	r3, sp, #12
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	462a      	mov	r2, r5
 80088b0:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <_svfiprintf_r+0x1f8>)
 80088b2:	a904      	add	r1, sp, #16
 80088b4:	4638      	mov	r0, r7
 80088b6:	f3af 8000 	nop.w
 80088ba:	1c42      	adds	r2, r0, #1
 80088bc:	4606      	mov	r6, r0
 80088be:	d1d6      	bne.n	800886e <_svfiprintf_r+0x176>
 80088c0:	89ab      	ldrh	r3, [r5, #12]
 80088c2:	065b      	lsls	r3, r3, #25
 80088c4:	f53f af2c 	bmi.w	8008720 <_svfiprintf_r+0x28>
 80088c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088ca:	b01d      	add	sp, #116	; 0x74
 80088cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d0:	ab03      	add	r3, sp, #12
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	462a      	mov	r2, r5
 80088d6:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <_svfiprintf_r+0x1f8>)
 80088d8:	a904      	add	r1, sp, #16
 80088da:	4638      	mov	r0, r7
 80088dc:	f000 f87a 	bl	80089d4 <_printf_i>
 80088e0:	e7eb      	b.n	80088ba <_svfiprintf_r+0x1c2>
 80088e2:	bf00      	nop
 80088e4:	08008d14 	.word	0x08008d14
 80088e8:	08008d1e 	.word	0x08008d1e
 80088ec:	00000000 	.word	0x00000000
 80088f0:	08008641 	.word	0x08008641
 80088f4:	08008d1a 	.word	0x08008d1a

080088f8 <_printf_common>:
 80088f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088fc:	4616      	mov	r6, r2
 80088fe:	4699      	mov	r9, r3
 8008900:	688a      	ldr	r2, [r1, #8]
 8008902:	690b      	ldr	r3, [r1, #16]
 8008904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008908:	4293      	cmp	r3, r2
 800890a:	bfb8      	it	lt
 800890c:	4613      	movlt	r3, r2
 800890e:	6033      	str	r3, [r6, #0]
 8008910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008914:	4607      	mov	r7, r0
 8008916:	460c      	mov	r4, r1
 8008918:	b10a      	cbz	r2, 800891e <_printf_common+0x26>
 800891a:	3301      	adds	r3, #1
 800891c:	6033      	str	r3, [r6, #0]
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	0699      	lsls	r1, r3, #26
 8008922:	bf42      	ittt	mi
 8008924:	6833      	ldrmi	r3, [r6, #0]
 8008926:	3302      	addmi	r3, #2
 8008928:	6033      	strmi	r3, [r6, #0]
 800892a:	6825      	ldr	r5, [r4, #0]
 800892c:	f015 0506 	ands.w	r5, r5, #6
 8008930:	d106      	bne.n	8008940 <_printf_common+0x48>
 8008932:	f104 0a19 	add.w	sl, r4, #25
 8008936:	68e3      	ldr	r3, [r4, #12]
 8008938:	6832      	ldr	r2, [r6, #0]
 800893a:	1a9b      	subs	r3, r3, r2
 800893c:	42ab      	cmp	r3, r5
 800893e:	dc26      	bgt.n	800898e <_printf_common+0x96>
 8008940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008944:	1e13      	subs	r3, r2, #0
 8008946:	6822      	ldr	r2, [r4, #0]
 8008948:	bf18      	it	ne
 800894a:	2301      	movne	r3, #1
 800894c:	0692      	lsls	r2, r2, #26
 800894e:	d42b      	bmi.n	80089a8 <_printf_common+0xb0>
 8008950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008954:	4649      	mov	r1, r9
 8008956:	4638      	mov	r0, r7
 8008958:	47c0      	blx	r8
 800895a:	3001      	adds	r0, #1
 800895c:	d01e      	beq.n	800899c <_printf_common+0xa4>
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	68e5      	ldr	r5, [r4, #12]
 8008962:	6832      	ldr	r2, [r6, #0]
 8008964:	f003 0306 	and.w	r3, r3, #6
 8008968:	2b04      	cmp	r3, #4
 800896a:	bf08      	it	eq
 800896c:	1aad      	subeq	r5, r5, r2
 800896e:	68a3      	ldr	r3, [r4, #8]
 8008970:	6922      	ldr	r2, [r4, #16]
 8008972:	bf0c      	ite	eq
 8008974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008978:	2500      	movne	r5, #0
 800897a:	4293      	cmp	r3, r2
 800897c:	bfc4      	itt	gt
 800897e:	1a9b      	subgt	r3, r3, r2
 8008980:	18ed      	addgt	r5, r5, r3
 8008982:	2600      	movs	r6, #0
 8008984:	341a      	adds	r4, #26
 8008986:	42b5      	cmp	r5, r6
 8008988:	d11a      	bne.n	80089c0 <_printf_common+0xc8>
 800898a:	2000      	movs	r0, #0
 800898c:	e008      	b.n	80089a0 <_printf_common+0xa8>
 800898e:	2301      	movs	r3, #1
 8008990:	4652      	mov	r2, sl
 8008992:	4649      	mov	r1, r9
 8008994:	4638      	mov	r0, r7
 8008996:	47c0      	blx	r8
 8008998:	3001      	adds	r0, #1
 800899a:	d103      	bne.n	80089a4 <_printf_common+0xac>
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a4:	3501      	adds	r5, #1
 80089a6:	e7c6      	b.n	8008936 <_printf_common+0x3e>
 80089a8:	18e1      	adds	r1, r4, r3
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	2030      	movs	r0, #48	; 0x30
 80089ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089b2:	4422      	add	r2, r4
 80089b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089bc:	3302      	adds	r3, #2
 80089be:	e7c7      	b.n	8008950 <_printf_common+0x58>
 80089c0:	2301      	movs	r3, #1
 80089c2:	4622      	mov	r2, r4
 80089c4:	4649      	mov	r1, r9
 80089c6:	4638      	mov	r0, r7
 80089c8:	47c0      	blx	r8
 80089ca:	3001      	adds	r0, #1
 80089cc:	d0e6      	beq.n	800899c <_printf_common+0xa4>
 80089ce:	3601      	adds	r6, #1
 80089d0:	e7d9      	b.n	8008986 <_printf_common+0x8e>
	...

080089d4 <_printf_i>:
 80089d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089d8:	460c      	mov	r4, r1
 80089da:	4691      	mov	r9, r2
 80089dc:	7e27      	ldrb	r7, [r4, #24]
 80089de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80089e0:	2f78      	cmp	r7, #120	; 0x78
 80089e2:	4680      	mov	r8, r0
 80089e4:	469a      	mov	sl, r3
 80089e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089ea:	d807      	bhi.n	80089fc <_printf_i+0x28>
 80089ec:	2f62      	cmp	r7, #98	; 0x62
 80089ee:	d80a      	bhi.n	8008a06 <_printf_i+0x32>
 80089f0:	2f00      	cmp	r7, #0
 80089f2:	f000 80d8 	beq.w	8008ba6 <_printf_i+0x1d2>
 80089f6:	2f58      	cmp	r7, #88	; 0x58
 80089f8:	f000 80a3 	beq.w	8008b42 <_printf_i+0x16e>
 80089fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a04:	e03a      	b.n	8008a7c <_printf_i+0xa8>
 8008a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a0a:	2b15      	cmp	r3, #21
 8008a0c:	d8f6      	bhi.n	80089fc <_printf_i+0x28>
 8008a0e:	a001      	add	r0, pc, #4	; (adr r0, 8008a14 <_printf_i+0x40>)
 8008a10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a14:	08008a6d 	.word	0x08008a6d
 8008a18:	08008a81 	.word	0x08008a81
 8008a1c:	080089fd 	.word	0x080089fd
 8008a20:	080089fd 	.word	0x080089fd
 8008a24:	080089fd 	.word	0x080089fd
 8008a28:	080089fd 	.word	0x080089fd
 8008a2c:	08008a81 	.word	0x08008a81
 8008a30:	080089fd 	.word	0x080089fd
 8008a34:	080089fd 	.word	0x080089fd
 8008a38:	080089fd 	.word	0x080089fd
 8008a3c:	080089fd 	.word	0x080089fd
 8008a40:	08008b8d 	.word	0x08008b8d
 8008a44:	08008ab1 	.word	0x08008ab1
 8008a48:	08008b6f 	.word	0x08008b6f
 8008a4c:	080089fd 	.word	0x080089fd
 8008a50:	080089fd 	.word	0x080089fd
 8008a54:	08008baf 	.word	0x08008baf
 8008a58:	080089fd 	.word	0x080089fd
 8008a5c:	08008ab1 	.word	0x08008ab1
 8008a60:	080089fd 	.word	0x080089fd
 8008a64:	080089fd 	.word	0x080089fd
 8008a68:	08008b77 	.word	0x08008b77
 8008a6c:	680b      	ldr	r3, [r1, #0]
 8008a6e:	1d1a      	adds	r2, r3, #4
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	600a      	str	r2, [r1, #0]
 8008a74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e0a3      	b.n	8008bc8 <_printf_i+0x1f4>
 8008a80:	6825      	ldr	r5, [r4, #0]
 8008a82:	6808      	ldr	r0, [r1, #0]
 8008a84:	062e      	lsls	r6, r5, #24
 8008a86:	f100 0304 	add.w	r3, r0, #4
 8008a8a:	d50a      	bpl.n	8008aa2 <_printf_i+0xce>
 8008a8c:	6805      	ldr	r5, [r0, #0]
 8008a8e:	600b      	str	r3, [r1, #0]
 8008a90:	2d00      	cmp	r5, #0
 8008a92:	da03      	bge.n	8008a9c <_printf_i+0xc8>
 8008a94:	232d      	movs	r3, #45	; 0x2d
 8008a96:	426d      	negs	r5, r5
 8008a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a9c:	485e      	ldr	r0, [pc, #376]	; (8008c18 <_printf_i+0x244>)
 8008a9e:	230a      	movs	r3, #10
 8008aa0:	e019      	b.n	8008ad6 <_printf_i+0x102>
 8008aa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008aa6:	6805      	ldr	r5, [r0, #0]
 8008aa8:	600b      	str	r3, [r1, #0]
 8008aaa:	bf18      	it	ne
 8008aac:	b22d      	sxthne	r5, r5
 8008aae:	e7ef      	b.n	8008a90 <_printf_i+0xbc>
 8008ab0:	680b      	ldr	r3, [r1, #0]
 8008ab2:	6825      	ldr	r5, [r4, #0]
 8008ab4:	1d18      	adds	r0, r3, #4
 8008ab6:	6008      	str	r0, [r1, #0]
 8008ab8:	0628      	lsls	r0, r5, #24
 8008aba:	d501      	bpl.n	8008ac0 <_printf_i+0xec>
 8008abc:	681d      	ldr	r5, [r3, #0]
 8008abe:	e002      	b.n	8008ac6 <_printf_i+0xf2>
 8008ac0:	0669      	lsls	r1, r5, #25
 8008ac2:	d5fb      	bpl.n	8008abc <_printf_i+0xe8>
 8008ac4:	881d      	ldrh	r5, [r3, #0]
 8008ac6:	4854      	ldr	r0, [pc, #336]	; (8008c18 <_printf_i+0x244>)
 8008ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8008aca:	bf0c      	ite	eq
 8008acc:	2308      	moveq	r3, #8
 8008ace:	230a      	movne	r3, #10
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ad6:	6866      	ldr	r6, [r4, #4]
 8008ad8:	60a6      	str	r6, [r4, #8]
 8008ada:	2e00      	cmp	r6, #0
 8008adc:	bfa2      	ittt	ge
 8008ade:	6821      	ldrge	r1, [r4, #0]
 8008ae0:	f021 0104 	bicge.w	r1, r1, #4
 8008ae4:	6021      	strge	r1, [r4, #0]
 8008ae6:	b90d      	cbnz	r5, 8008aec <_printf_i+0x118>
 8008ae8:	2e00      	cmp	r6, #0
 8008aea:	d04d      	beq.n	8008b88 <_printf_i+0x1b4>
 8008aec:	4616      	mov	r6, r2
 8008aee:	fbb5 f1f3 	udiv	r1, r5, r3
 8008af2:	fb03 5711 	mls	r7, r3, r1, r5
 8008af6:	5dc7      	ldrb	r7, [r0, r7]
 8008af8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008afc:	462f      	mov	r7, r5
 8008afe:	42bb      	cmp	r3, r7
 8008b00:	460d      	mov	r5, r1
 8008b02:	d9f4      	bls.n	8008aee <_printf_i+0x11a>
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d10b      	bne.n	8008b20 <_printf_i+0x14c>
 8008b08:	6823      	ldr	r3, [r4, #0]
 8008b0a:	07df      	lsls	r7, r3, #31
 8008b0c:	d508      	bpl.n	8008b20 <_printf_i+0x14c>
 8008b0e:	6923      	ldr	r3, [r4, #16]
 8008b10:	6861      	ldr	r1, [r4, #4]
 8008b12:	4299      	cmp	r1, r3
 8008b14:	bfde      	ittt	le
 8008b16:	2330      	movle	r3, #48	; 0x30
 8008b18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b20:	1b92      	subs	r2, r2, r6
 8008b22:	6122      	str	r2, [r4, #16]
 8008b24:	f8cd a000 	str.w	sl, [sp]
 8008b28:	464b      	mov	r3, r9
 8008b2a:	aa03      	add	r2, sp, #12
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4640      	mov	r0, r8
 8008b30:	f7ff fee2 	bl	80088f8 <_printf_common>
 8008b34:	3001      	adds	r0, #1
 8008b36:	d14c      	bne.n	8008bd2 <_printf_i+0x1fe>
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3c:	b004      	add	sp, #16
 8008b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b42:	4835      	ldr	r0, [pc, #212]	; (8008c18 <_printf_i+0x244>)
 8008b44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	680e      	ldr	r6, [r1, #0]
 8008b4c:	061f      	lsls	r7, r3, #24
 8008b4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b52:	600e      	str	r6, [r1, #0]
 8008b54:	d514      	bpl.n	8008b80 <_printf_i+0x1ac>
 8008b56:	07d9      	lsls	r1, r3, #31
 8008b58:	bf44      	itt	mi
 8008b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b5e:	6023      	strmi	r3, [r4, #0]
 8008b60:	b91d      	cbnz	r5, 8008b6a <_printf_i+0x196>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	f023 0320 	bic.w	r3, r3, #32
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	2310      	movs	r3, #16
 8008b6c:	e7b0      	b.n	8008ad0 <_printf_i+0xfc>
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	f043 0320 	orr.w	r3, r3, #32
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	2378      	movs	r3, #120	; 0x78
 8008b78:	4828      	ldr	r0, [pc, #160]	; (8008c1c <_printf_i+0x248>)
 8008b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b7e:	e7e3      	b.n	8008b48 <_printf_i+0x174>
 8008b80:	065e      	lsls	r6, r3, #25
 8008b82:	bf48      	it	mi
 8008b84:	b2ad      	uxthmi	r5, r5
 8008b86:	e7e6      	b.n	8008b56 <_printf_i+0x182>
 8008b88:	4616      	mov	r6, r2
 8008b8a:	e7bb      	b.n	8008b04 <_printf_i+0x130>
 8008b8c:	680b      	ldr	r3, [r1, #0]
 8008b8e:	6826      	ldr	r6, [r4, #0]
 8008b90:	6960      	ldr	r0, [r4, #20]
 8008b92:	1d1d      	adds	r5, r3, #4
 8008b94:	600d      	str	r5, [r1, #0]
 8008b96:	0635      	lsls	r5, r6, #24
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	d501      	bpl.n	8008ba0 <_printf_i+0x1cc>
 8008b9c:	6018      	str	r0, [r3, #0]
 8008b9e:	e002      	b.n	8008ba6 <_printf_i+0x1d2>
 8008ba0:	0671      	lsls	r1, r6, #25
 8008ba2:	d5fb      	bpl.n	8008b9c <_printf_i+0x1c8>
 8008ba4:	8018      	strh	r0, [r3, #0]
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	6123      	str	r3, [r4, #16]
 8008baa:	4616      	mov	r6, r2
 8008bac:	e7ba      	b.n	8008b24 <_printf_i+0x150>
 8008bae:	680b      	ldr	r3, [r1, #0]
 8008bb0:	1d1a      	adds	r2, r3, #4
 8008bb2:	600a      	str	r2, [r1, #0]
 8008bb4:	681e      	ldr	r6, [r3, #0]
 8008bb6:	6862      	ldr	r2, [r4, #4]
 8008bb8:	2100      	movs	r1, #0
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f7f7 fb10 	bl	80001e0 <memchr>
 8008bc0:	b108      	cbz	r0, 8008bc6 <_printf_i+0x1f2>
 8008bc2:	1b80      	subs	r0, r0, r6
 8008bc4:	6060      	str	r0, [r4, #4]
 8008bc6:	6863      	ldr	r3, [r4, #4]
 8008bc8:	6123      	str	r3, [r4, #16]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bd0:	e7a8      	b.n	8008b24 <_printf_i+0x150>
 8008bd2:	6923      	ldr	r3, [r4, #16]
 8008bd4:	4632      	mov	r2, r6
 8008bd6:	4649      	mov	r1, r9
 8008bd8:	4640      	mov	r0, r8
 8008bda:	47d0      	blx	sl
 8008bdc:	3001      	adds	r0, #1
 8008bde:	d0ab      	beq.n	8008b38 <_printf_i+0x164>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	079b      	lsls	r3, r3, #30
 8008be4:	d413      	bmi.n	8008c0e <_printf_i+0x23a>
 8008be6:	68e0      	ldr	r0, [r4, #12]
 8008be8:	9b03      	ldr	r3, [sp, #12]
 8008bea:	4298      	cmp	r0, r3
 8008bec:	bfb8      	it	lt
 8008bee:	4618      	movlt	r0, r3
 8008bf0:	e7a4      	b.n	8008b3c <_printf_i+0x168>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	4632      	mov	r2, r6
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	4640      	mov	r0, r8
 8008bfa:	47d0      	blx	sl
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d09b      	beq.n	8008b38 <_printf_i+0x164>
 8008c00:	3501      	adds	r5, #1
 8008c02:	68e3      	ldr	r3, [r4, #12]
 8008c04:	9903      	ldr	r1, [sp, #12]
 8008c06:	1a5b      	subs	r3, r3, r1
 8008c08:	42ab      	cmp	r3, r5
 8008c0a:	dcf2      	bgt.n	8008bf2 <_printf_i+0x21e>
 8008c0c:	e7eb      	b.n	8008be6 <_printf_i+0x212>
 8008c0e:	2500      	movs	r5, #0
 8008c10:	f104 0619 	add.w	r6, r4, #25
 8008c14:	e7f5      	b.n	8008c02 <_printf_i+0x22e>
 8008c16:	bf00      	nop
 8008c18:	08008d25 	.word	0x08008d25
 8008c1c:	08008d36 	.word	0x08008d36

08008c20 <__retarget_lock_acquire_recursive>:
 8008c20:	4770      	bx	lr

08008c22 <__retarget_lock_release_recursive>:
 8008c22:	4770      	bx	lr

08008c24 <memcpy>:
 8008c24:	440a      	add	r2, r1
 8008c26:	4291      	cmp	r1, r2
 8008c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2c:	d100      	bne.n	8008c30 <memcpy+0xc>
 8008c2e:	4770      	bx	lr
 8008c30:	b510      	push	{r4, lr}
 8008c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c3a:	4291      	cmp	r1, r2
 8008c3c:	d1f9      	bne.n	8008c32 <memcpy+0xe>
 8008c3e:	bd10      	pop	{r4, pc}

08008c40 <memmove>:
 8008c40:	4288      	cmp	r0, r1
 8008c42:	b510      	push	{r4, lr}
 8008c44:	eb01 0402 	add.w	r4, r1, r2
 8008c48:	d902      	bls.n	8008c50 <memmove+0x10>
 8008c4a:	4284      	cmp	r4, r0
 8008c4c:	4623      	mov	r3, r4
 8008c4e:	d807      	bhi.n	8008c60 <memmove+0x20>
 8008c50:	1e43      	subs	r3, r0, #1
 8008c52:	42a1      	cmp	r1, r4
 8008c54:	d008      	beq.n	8008c68 <memmove+0x28>
 8008c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c5e:	e7f8      	b.n	8008c52 <memmove+0x12>
 8008c60:	4402      	add	r2, r0
 8008c62:	4601      	mov	r1, r0
 8008c64:	428a      	cmp	r2, r1
 8008c66:	d100      	bne.n	8008c6a <memmove+0x2a>
 8008c68:	bd10      	pop	{r4, pc}
 8008c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008c72:	e7f7      	b.n	8008c64 <memmove+0x24>

08008c74 <_realloc_r>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	4607      	mov	r7, r0
 8008c78:	4614      	mov	r4, r2
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	b921      	cbnz	r1, 8008c88 <_realloc_r+0x14>
 8008c7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c82:	4611      	mov	r1, r2
 8008c84:	f7ff bc46 	b.w	8008514 <_malloc_r>
 8008c88:	b922      	cbnz	r2, 8008c94 <_realloc_r+0x20>
 8008c8a:	f7ff fbf3 	bl	8008474 <_free_r>
 8008c8e:	4625      	mov	r5, r4
 8008c90:	4628      	mov	r0, r5
 8008c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c94:	f000 f814 	bl	8008cc0 <_malloc_usable_size_r>
 8008c98:	42a0      	cmp	r0, r4
 8008c9a:	d20f      	bcs.n	8008cbc <_realloc_r+0x48>
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	f7ff fc38 	bl	8008514 <_malloc_r>
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d0f2      	beq.n	8008c90 <_realloc_r+0x1c>
 8008caa:	4631      	mov	r1, r6
 8008cac:	4622      	mov	r2, r4
 8008cae:	f7ff ffb9 	bl	8008c24 <memcpy>
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f7ff fbdd 	bl	8008474 <_free_r>
 8008cba:	e7e9      	b.n	8008c90 <_realloc_r+0x1c>
 8008cbc:	4635      	mov	r5, r6
 8008cbe:	e7e7      	b.n	8008c90 <_realloc_r+0x1c>

08008cc0 <_malloc_usable_size_r>:
 8008cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cc4:	1f18      	subs	r0, r3, #4
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	bfbc      	itt	lt
 8008cca:	580b      	ldrlt	r3, [r1, r0]
 8008ccc:	18c0      	addlt	r0, r0, r3
 8008cce:	4770      	bx	lr

08008cd0 <_init>:
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	bf00      	nop
 8008cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cd6:	bc08      	pop	{r3}
 8008cd8:	469e      	mov	lr, r3
 8008cda:	4770      	bx	lr

08008cdc <_fini>:
 8008cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cde:	bf00      	nop
 8008ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce2:	bc08      	pop	{r3}
 8008ce4:	469e      	mov	lr, r3
 8008ce6:	4770      	bx	lr
